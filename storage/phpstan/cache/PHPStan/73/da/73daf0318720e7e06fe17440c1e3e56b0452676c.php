<?php declare(strict_types = 1);

return PHPStan\Cache\CacheItem::__set_state(array(
   'variableKey' => 'C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\CarbonInterface.php-1610491687',
   'data' => 
  array (
    'b0b4344081533efd03d83da1f4dcfb65' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
        ),
         'className' => NULL,
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4d10f40c0a7f66cb218692e47e619406' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Common interface for Carbon and CarbonImmutable.
 *
 * <autodoc generated by `composer phpdoc`>
 *
 * @property      int              $year
 * @property      int              $yearIso
 * @property      int              $month
 * @property      int              $day
 * @property      int              $hour
 * @property      int              $minute
 * @property      int              $second
 * @property      int              $micro
 * @property      int              $microsecond
 * @property      int|float|string $timestamp                                                                         seconds since the Unix Epoch
 * @property      string           $englishDayOfWeek                                                                  the day of week in English
 * @property      string           $shortEnglishDayOfWeek                                                             the abbreviated day of week in English
 * @property      string           $englishMonth                                                                      the month in English
 * @property      string           $shortEnglishMonth                                                                 the abbreviated month in English
 * @property      string           $localeDayOfWeek                                                                   the day of week in current locale LC_TIME
 * @property      string           $shortLocaleDayOfWeek                                                              the abbreviated day of week in current locale LC_TIME
 * @property      string           $localeMonth                                                                       the month in current locale LC_TIME
 * @property      string           $shortLocaleMonth                                                                  the abbreviated month in current locale LC_TIME
 * @property      int              $milliseconds
 * @property      int              $millisecond
 * @property      int              $milli
 * @property      int              $week                                                                              1 through 53
 * @property      int              $isoWeek                                                                           1 through 53
 * @property      int              $weekYear                                                                          year according to week format
 * @property      int              $isoWeekYear                                                                       year according to ISO week format
 * @property      int              $dayOfYear                                                                         1 through 366
 * @property      int              $age                                                                               does a diffInYears() with default parameters
 * @property      int              $offset                                                                            the timezone offset in seconds from UTC
 * @property      int              $offsetMinutes                                                                     the timezone offset in minutes from UTC
 * @property      int              $offsetHours                                                                       the timezone offset in hours from UTC
 * @property      CarbonTimeZone   $timezone                                                                          the current timezone
 * @property      CarbonTimeZone   $tz                                                                                alias of $timezone
 * @property-read int              $dayOfWeek                                                                         0 (for Sunday) through 6 (for Saturday)
 * @property-read int              $dayOfWeekIso                                                                      1 (for Monday) through 7 (for Sunday)
 * @property-read int              $weekOfYear                                                                        ISO-8601 week number of year, weeks starting on Monday
 * @property-read int              $daysInMonth                                                                       number of days in the given month
 * @property-read string           $latinMeridiem                                                                     "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
 * @property-read string           $latinUpperMeridiem                                                                "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
 * @property-read string           $timezoneAbbreviatedName                                                           the current timezone abbreviated name
 * @property-read string           $tzAbbrName                                                                        alias of $timezoneAbbreviatedName
 * @property-read string           $dayName                                                                           long name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $shortDayName                                                                      short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $minDayName                                                                        very short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $monthName                                                                         long name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $shortMonthName                                                                    short name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $meridiem                                                                          lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read string           $upperMeridiem                                                                     uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read int              $noZeroHour                                                                        current hour from 1 to 24
 * @property-read int              $weeksInYear                                                                       51 through 53
 * @property-read int              $isoWeeksInYear                                                                    51 through 53
 * @property-read int              $weekOfMonth                                                                       1 through 5
 * @property-read int              $weekNumberInMonth                                                                 1 through 5
 * @property-read int              $firstWeekDay                                                                      0 through 6
 * @property-read int              $lastWeekDay                                                                       0 through 6
 * @property-read int              $daysInYear                                                                        365 or 366
 * @property-read int              $quarter                                                                           the quarter of this instance, 1 - 4
 * @property-read int              $decade                                                                            the decade of this instance
 * @property-read int              $century                                                                           the century of this instance
 * @property-read int              $millennium                                                                        the millennium of this instance
 * @property-read bool             $dst                                                                               daylight savings time indicator, true if DST, false otherwise
 * @property-read bool             $local                                                                             checks if the timezone is local, true if local, false otherwise
 * @property-read bool             $utc                                                                               checks if the timezone is UTC, true if UTC, false otherwise
 * @property-read string           $timezoneName                                                                      the current timezone name
 * @property-read string           $tzName                                                                            alias of $timezoneName
 * @property-read string           $locale                                                                            locale of the current instance
 *
 * @method        bool             isUtc()                                                                            Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
 * @method        bool             isLocal()                                                                          Check if the current instance has non-UTC timezone.
 * @method        bool             isValid()                                                                          Check if the current instance is a valid date.
 * @method        bool             isDST()                                                                            Check if the current instance is in a daylight saving time.
 * @method        bool             isSunday()                                                                         Checks if the instance day is sunday.
 * @method        bool             isMonday()                                                                         Checks if the instance day is monday.
 * @method        bool             isTuesday()                                                                        Checks if the instance day is tuesday.
 * @method        bool             isWednesday()                                                                      Checks if the instance day is wednesday.
 * @method        bool             isThursday()                                                                       Checks if the instance day is thursday.
 * @method        bool             isFriday()                                                                         Checks if the instance day is friday.
 * @method        bool             isSaturday()                                                                       Checks if the instance day is saturday.
 * @method        bool             isSameYear(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentYear()                                                                    Checks if the instance is in the same year as the current moment.
 * @method        bool             isNextYear()                                                                       Checks if the instance is in the same year as the current moment next year.
 * @method        bool             isLastYear()                                                                       Checks if the instance is in the same year as the current moment last year.
 * @method        bool             isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentWeek()                                                                    Checks if the instance is in the same week as the current moment.
 * @method        bool             isNextWeek()                                                                       Checks if the instance is in the same week as the current moment next week.
 * @method        bool             isLastWeek()                                                                       Checks if the instance is in the same week as the current moment last week.
 * @method        bool             isSameDay(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentDay()                                                                     Checks if the instance is in the same day as the current moment.
 * @method        bool             isNextDay()                                                                        Checks if the instance is in the same day as the current moment next day.
 * @method        bool             isLastDay()                                                                        Checks if the instance is in the same day as the current moment last day.
 * @method        bool             isSameHour(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentHour()                                                                    Checks if the instance is in the same hour as the current moment.
 * @method        bool             isNextHour()                                                                       Checks if the instance is in the same hour as the current moment next hour.
 * @method        bool             isLastHour()                                                                       Checks if the instance is in the same hour as the current moment last hour.
 * @method        bool             isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMinute()                                                                  Checks if the instance is in the same minute as the current moment.
 * @method        bool             isNextMinute()                                                                     Checks if the instance is in the same minute as the current moment next minute.
 * @method        bool             isLastMinute()                                                                     Checks if the instance is in the same minute as the current moment last minute.
 * @method        bool             isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentSecond()                                                                  Checks if the instance is in the same second as the current moment.
 * @method        bool             isNextSecond()                                                                     Checks if the instance is in the same second as the current moment next second.
 * @method        bool             isLastSecond()                                                                     Checks if the instance is in the same second as the current moment last second.
 * @method        bool             isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMicro()                                                                   Checks if the instance is in the same microsecond as the current moment.
 * @method        bool             isNextMicro()                                                                      Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool             isLastMicro()                                                                      Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool             isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)               Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMicrosecond()                                                             Checks if the instance is in the same microsecond as the current moment.
 * @method        bool             isNextMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool             isLastMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool             isCurrentMonth()                                                                   Checks if the instance is in the same month as the current moment.
 * @method        bool             isNextMonth()                                                                      Checks if the instance is in the same month as the current moment next month.
 * @method        bool             isLastMonth()                                                                      Checks if the instance is in the same month as the current moment last month.
 * @method        bool             isCurrentQuarter()                                                                 Checks if the instance is in the same quarter as the current moment.
 * @method        bool             isNextQuarter()                                                                    Checks if the instance is in the same quarter as the current moment next quarter.
 * @method        bool             isLastQuarter()                                                                    Checks if the instance is in the same quarter as the current moment last quarter.
 * @method        bool             isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentDecade()                                                                  Checks if the instance is in the same decade as the current moment.
 * @method        bool             isNextDecade()                                                                     Checks if the instance is in the same decade as the current moment next decade.
 * @method        bool             isLastDecade()                                                                     Checks if the instance is in the same decade as the current moment last decade.
 * @method        bool             isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                   Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentCentury()                                                                 Checks if the instance is in the same century as the current moment.
 * @method        bool             isNextCentury()                                                                    Checks if the instance is in the same century as the current moment next century.
 * @method        bool             isLastCentury()                                                                    Checks if the instance is in the same century as the current moment last century.
 * @method        bool             isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMillennium()                                                              Checks if the instance is in the same millennium as the current moment.
 * @method        bool             isNextMillennium()                                                                 Checks if the instance is in the same millennium as the current moment next millennium.
 * @method        bool             isLastMillennium()                                                                 Checks if the instance is in the same millennium as the current moment last millennium.
 * @method        CarbonInterface  years(int $value)                                                                  Set current instance year to the given value.
 * @method        CarbonInterface  year(int $value)                                                                   Set current instance year to the given value.
 * @method        CarbonInterface  setYears(int $value)                                                               Set current instance year to the given value.
 * @method        CarbonInterface  setYear(int $value)                                                                Set current instance year to the given value.
 * @method        CarbonInterface  months(int $value)                                                                 Set current instance month to the given value.
 * @method        CarbonInterface  month(int $value)                                                                  Set current instance month to the given value.
 * @method        CarbonInterface  setMonths(int $value)                                                              Set current instance month to the given value.
 * @method        CarbonInterface  setMonth(int $value)                                                               Set current instance month to the given value.
 * @method        CarbonInterface  days(int $value)                                                                   Set current instance day to the given value.
 * @method        CarbonInterface  day(int $value)                                                                    Set current instance day to the given value.
 * @method        CarbonInterface  setDays(int $value)                                                                Set current instance day to the given value.
 * @method        CarbonInterface  setDay(int $value)                                                                 Set current instance day to the given value.
 * @method        CarbonInterface  hours(int $value)                                                                  Set current instance hour to the given value.
 * @method        CarbonInterface  hour(int $value)                                                                   Set current instance hour to the given value.
 * @method        CarbonInterface  setHours(int $value)                                                               Set current instance hour to the given value.
 * @method        CarbonInterface  setHour(int $value)                                                                Set current instance hour to the given value.
 * @method        CarbonInterface  minutes(int $value)                                                                Set current instance minute to the given value.
 * @method        CarbonInterface  minute(int $value)                                                                 Set current instance minute to the given value.
 * @method        CarbonInterface  setMinutes(int $value)                                                             Set current instance minute to the given value.
 * @method        CarbonInterface  setMinute(int $value)                                                              Set current instance minute to the given value.
 * @method        CarbonInterface  seconds(int $value)                                                                Set current instance second to the given value.
 * @method        CarbonInterface  second(int $value)                                                                 Set current instance second to the given value.
 * @method        CarbonInterface  setSeconds(int $value)                                                             Set current instance second to the given value.
 * @method        CarbonInterface  setSecond(int $value)                                                              Set current instance second to the given value.
 * @method        CarbonInterface  millis(int $value)                                                                 Set current instance millisecond to the given value.
 * @method        CarbonInterface  milli(int $value)                                                                  Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMillis(int $value)                                                              Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMilli(int $value)                                                               Set current instance millisecond to the given value.
 * @method        CarbonInterface  milliseconds(int $value)                                                           Set current instance millisecond to the given value.
 * @method        CarbonInterface  millisecond(int $value)                                                            Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMilliseconds(int $value)                                                        Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMillisecond(int $value)                                                         Set current instance millisecond to the given value.
 * @method        CarbonInterface  micros(int $value)                                                                 Set current instance microsecond to the given value.
 * @method        CarbonInterface  micro(int $value)                                                                  Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicros(int $value)                                                              Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicro(int $value)                                                               Set current instance microsecond to the given value.
 * @method        CarbonInterface  microseconds(int $value)                                                           Set current instance microsecond to the given value.
 * @method        CarbonInterface  microsecond(int $value)                                                            Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicroseconds(int $value)                                                        Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicrosecond(int $value)                                                         Set current instance microsecond to the given value.
 * @method        CarbonInterface  addYears(int $value = 1)                                                           Add years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addYear()                                                                          Add one year to the instance (using date interval).
 * @method        CarbonInterface  subYears(int $value = 1)                                                           Sub years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subYear()                                                                          Sub one year to the instance (using date interval).
 * @method        CarbonInterface  addYearsWithOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addYearWithOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subYearsWithOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subYearWithOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addYearsWithoutOverflow(int $value = 1)                                            Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearWithoutOverflow()                                                           Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsWithoutOverflow(int $value = 1)                                            Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearWithoutOverflow()                                                           Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearsWithNoOverflow(int $value = 1)                                             Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearWithNoOverflow()                                                            Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsWithNoOverflow(int $value = 1)                                             Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearWithNoOverflow()                                                            Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearsNoOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearNoOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsNoOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearNoOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonths(int $value = 1)                                                          Add months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMonth()                                                                         Add one month to the instance (using date interval).
 * @method        CarbonInterface  subMonths(int $value = 1)                                                          Sub months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMonth()                                                                         Sub one month to the instance (using date interval).
 * @method        CarbonInterface  addMonthsWithOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMonthWithOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMonthsWithOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMonthWithOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMonthsWithoutOverflow(int $value = 1)                                           Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthWithoutOverflow()                                                          Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsWithoutOverflow(int $value = 1)                                           Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthWithoutOverflow()                                                          Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthsWithNoOverflow(int $value = 1)                                            Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthWithNoOverflow()                                                           Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsWithNoOverflow(int $value = 1)                                            Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthWithNoOverflow()                                                           Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthsNoOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthNoOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsNoOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthNoOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDays(int $value = 1)                                                            Add days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addDay()                                                                           Add one day to the instance (using date interval).
 * @method        CarbonInterface  subDays(int $value = 1)                                                            Sub days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subDay()                                                                           Sub one day to the instance (using date interval).
 * @method        CarbonInterface  addHours(int $value = 1)                                                           Add hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addHour()                                                                          Add one hour to the instance (using date interval).
 * @method        CarbonInterface  subHours(int $value = 1)                                                           Sub hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subHour()                                                                          Sub one hour to the instance (using date interval).
 * @method        CarbonInterface  addMinutes(int $value = 1)                                                         Add minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMinute()                                                                        Add one minute to the instance (using date interval).
 * @method        CarbonInterface  subMinutes(int $value = 1)                                                         Sub minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMinute()                                                                        Sub one minute to the instance (using date interval).
 * @method        CarbonInterface  addSeconds(int $value = 1)                                                         Add seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addSecond()                                                                        Add one second to the instance (using date interval).
 * @method        CarbonInterface  subSeconds(int $value = 1)                                                         Sub seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subSecond()                                                                        Sub one second to the instance (using date interval).
 * @method        CarbonInterface  addMillis(int $value = 1)                                                          Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMilli()                                                                         Add one millisecond to the instance (using date interval).
 * @method        CarbonInterface  subMillis(int $value = 1)                                                          Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMilli()                                                                         Sub one millisecond to the instance (using date interval).
 * @method        CarbonInterface  addMilliseconds(int $value = 1)                                                    Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMillisecond()                                                                   Add one millisecond to the instance (using date interval).
 * @method        CarbonInterface  subMilliseconds(int $value = 1)                                                    Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMillisecond()                                                                   Sub one millisecond to the instance (using date interval).
 * @method        CarbonInterface  addMicros(int $value = 1)                                                          Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMicro()                                                                         Add one microsecond to the instance (using date interval).
 * @method        CarbonInterface  subMicros(int $value = 1)                                                          Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMicro()                                                                         Sub one microsecond to the instance (using date interval).
 * @method        CarbonInterface  addMicroseconds(int $value = 1)                                                    Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMicrosecond()                                                                   Add one microsecond to the instance (using date interval).
 * @method        CarbonInterface  subMicroseconds(int $value = 1)                                                    Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMicrosecond()                                                                   Sub one microsecond to the instance (using date interval).
 * @method        CarbonInterface  addMillennia(int $value = 1)                                                       Add millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMillennium()                                                                    Add one millennium to the instance (using date interval).
 * @method        CarbonInterface  subMillennia(int $value = 1)                                                       Sub millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMillennium()                                                                    Sub one millennium to the instance (using date interval).
 * @method        CarbonInterface  addMillenniaWithOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMillenniumWithOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMillenniaWithOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMillenniumWithOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMillenniaWithoutOverflow(int $value = 1)                                        Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumWithoutOverflow()                                                     Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaWithoutOverflow(int $value = 1)                                        Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumWithoutOverflow()                                                     Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniaWithNoOverflow(int $value = 1)                                         Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumWithNoOverflow()                                                      Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaWithNoOverflow(int $value = 1)                                         Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumWithNoOverflow()                                                      Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniaNoOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumNoOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaNoOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumNoOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturies(int $value = 1)                                                       Add centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addCentury()                                                                       Add one century to the instance (using date interval).
 * @method        CarbonInterface  subCenturies(int $value = 1)                                                       Sub centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subCentury()                                                                       Sub one century to the instance (using date interval).
 * @method        CarbonInterface  addCenturiesWithOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addCenturyWithOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subCenturiesWithOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subCenturyWithOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addCenturiesWithoutOverflow(int $value = 1)                                        Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyWithoutOverflow()                                                        Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesWithoutOverflow(int $value = 1)                                        Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyWithoutOverflow()                                                        Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturiesWithNoOverflow(int $value = 1)                                         Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyWithNoOverflow()                                                         Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesWithNoOverflow(int $value = 1)                                         Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyWithNoOverflow()                                                         Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturiesNoOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyNoOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesNoOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyNoOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecades(int $value = 1)                                                         Add decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addDecade()                                                                        Add one decade to the instance (using date interval).
 * @method        CarbonInterface  subDecades(int $value = 1)                                                         Sub decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subDecade()                                                                        Sub one decade to the instance (using date interval).
 * @method        CarbonInterface  addDecadesWithOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addDecadeWithOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subDecadesWithOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subDecadeWithOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addDecadesWithoutOverflow(int $value = 1)                                          Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeWithoutOverflow()                                                         Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesWithoutOverflow(int $value = 1)                                          Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeWithoutOverflow()                                                         Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadesWithNoOverflow(int $value = 1)                                           Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeWithNoOverflow()                                                          Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesWithNoOverflow(int $value = 1)                                           Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeWithNoOverflow()                                                          Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadesNoOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeNoOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesNoOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeNoOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarters(int $value = 1)                                                        Add quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addQuarter()                                                                       Add one quarter to the instance (using date interval).
 * @method        CarbonInterface  subQuarters(int $value = 1)                                                        Sub quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subQuarter()                                                                       Sub one quarter to the instance (using date interval).
 * @method        CarbonInterface  addQuartersWithOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addQuarterWithOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subQuartersWithOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subQuarterWithOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addQuartersWithoutOverflow(int $value = 1)                                         Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterWithoutOverflow()                                                        Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersWithoutOverflow(int $value = 1)                                         Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterWithoutOverflow()                                                        Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuartersWithNoOverflow(int $value = 1)                                          Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterWithNoOverflow()                                                         Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersWithNoOverflow(int $value = 1)                                          Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterWithNoOverflow()                                                         Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuartersNoOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterNoOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersNoOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterNoOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addWeeks(int $value = 1)                                                           Add weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addWeek()                                                                          Add one week to the instance (using date interval).
 * @method        CarbonInterface  subWeeks(int $value = 1)                                                           Sub weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subWeek()                                                                          Sub one week to the instance (using date interval).
 * @method        CarbonInterface  addWeekdays(int $value = 1)                                                        Add weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addWeekday()                                                                       Add one weekday to the instance (using date interval).
 * @method        CarbonInterface  subWeekdays(int $value = 1)                                                        Sub weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subWeekday()                                                                       Sub one weekday to the instance (using date interval).
 * @method        CarbonInterface  addRealMicros(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMicro()                                                                     Add one microsecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicros(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicro()                                                                     Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod     microsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonInterface  addRealMicroseconds(int $value = 1)                                                Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMicrosecond()                                                               Add one microsecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicroseconds(int $value = 1)                                                Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicrosecond()                                                               Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod     microsecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonInterface  addRealMillis(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMilli()                                                                     Add one millisecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillis(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMilli()                                                                     Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod     millisUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonInterface  addRealMilliseconds(int $value = 1)                                                Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMillisecond()                                                               Add one millisecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMilliseconds(int $value = 1)                                                Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillisecond()                                                               Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod     millisecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonInterface  addRealSeconds(int $value = 1)                                                     Add seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealSecond()                                                                    Add one second to the instance (using timestamp).
 * @method        CarbonInterface  subRealSeconds(int $value = 1)                                                     Sub seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealSecond()                                                                    Sub one second to the instance (using timestamp).
 * @method        CarbonPeriod     secondsUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
 * @method        CarbonInterface  addRealMinutes(int $value = 1)                                                     Add minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMinute()                                                                    Add one minute to the instance (using timestamp).
 * @method        CarbonInterface  subRealMinutes(int $value = 1)                                                     Sub minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMinute()                                                                    Sub one minute to the instance (using timestamp).
 * @method        CarbonPeriod     minutesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
 * @method        CarbonInterface  addRealHours(int $value = 1)                                                       Add hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealHour()                                                                      Add one hour to the instance (using timestamp).
 * @method        CarbonInterface  subRealHours(int $value = 1)                                                       Sub hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealHour()                                                                      Sub one hour to the instance (using timestamp).
 * @method        CarbonPeriod     hoursUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
 * @method        CarbonInterface  addRealDays(int $value = 1)                                                        Add days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealDay()                                                                       Add one day to the instance (using timestamp).
 * @method        CarbonInterface  subRealDays(int $value = 1)                                                        Sub days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealDay()                                                                       Sub one day to the instance (using timestamp).
 * @method        CarbonPeriod     daysUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
 * @method        CarbonInterface  addRealWeeks(int $value = 1)                                                       Add weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealWeek()                                                                      Add one week to the instance (using timestamp).
 * @method        CarbonInterface  subRealWeeks(int $value = 1)                                                       Sub weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealWeek()                                                                      Sub one week to the instance (using timestamp).
 * @method        CarbonPeriod     weeksUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
 * @method        CarbonInterface  addRealMonths(int $value = 1)                                                      Add months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMonth()                                                                     Add one month to the instance (using timestamp).
 * @method        CarbonInterface  subRealMonths(int $value = 1)                                                      Sub months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMonth()                                                                     Sub one month to the instance (using timestamp).
 * @method        CarbonPeriod     monthsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
 * @method        CarbonInterface  addRealQuarters(int $value = 1)                                                    Add quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealQuarter()                                                                   Add one quarter to the instance (using timestamp).
 * @method        CarbonInterface  subRealQuarters(int $value = 1)                                                    Sub quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealQuarter()                                                                   Sub one quarter to the instance (using timestamp).
 * @method        CarbonPeriod     quartersUntil($endDate = null, int $factor = 1)                                    Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
 * @method        CarbonInterface  addRealYears(int $value = 1)                                                       Add years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealYear()                                                                      Add one year to the instance (using timestamp).
 * @method        CarbonInterface  subRealYears(int $value = 1)                                                       Sub years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealYear()                                                                      Sub one year to the instance (using timestamp).
 * @method        CarbonPeriod     yearsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
 * @method        CarbonInterface  addRealDecades(int $value = 1)                                                     Add decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealDecade()                                                                    Add one decade to the instance (using timestamp).
 * @method        CarbonInterface  subRealDecades(int $value = 1)                                                     Sub decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealDecade()                                                                    Sub one decade to the instance (using timestamp).
 * @method        CarbonPeriod     decadesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
 * @method        CarbonInterface  addRealCenturies(int $value = 1)                                                   Add centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealCentury()                                                                   Add one century to the instance (using timestamp).
 * @method        CarbonInterface  subRealCenturies(int $value = 1)                                                   Sub centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealCentury()                                                                   Sub one century to the instance (using timestamp).
 * @method        CarbonPeriod     centuriesUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
 * @method        CarbonInterface  addRealMillennia(int $value = 1)                                                   Add millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMillennium()                                                                Add one millennium to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillennia(int $value = 1)                                                   Sub millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillennium()                                                                Sub one millennium to the instance (using timestamp).
 * @method        CarbonPeriod     millenniaUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
 * @method        CarbonInterface  roundYear(float $precision = 1, string $function = "round")                        Round the current instance year with given precision using the given function.
 * @method        CarbonInterface  roundYears(float $precision = 1, string $function = "round")                       Round the current instance year with given precision using the given function.
 * @method        CarbonInterface  floorYear(float $precision = 1)                                                    Truncate the current instance year with given precision.
 * @method        CarbonInterface  floorYears(float $precision = 1)                                                   Truncate the current instance year with given precision.
 * @method        CarbonInterface  ceilYear(float $precision = 1)                                                     Ceil the current instance year with given precision.
 * @method        CarbonInterface  ceilYears(float $precision = 1)                                                    Ceil the current instance year with given precision.
 * @method        CarbonInterface  roundMonth(float $precision = 1, string $function = "round")                       Round the current instance month with given precision using the given function.
 * @method        CarbonInterface  roundMonths(float $precision = 1, string $function = "round")                      Round the current instance month with given precision using the given function.
 * @method        CarbonInterface  floorMonth(float $precision = 1)                                                   Truncate the current instance month with given precision.
 * @method        CarbonInterface  floorMonths(float $precision = 1)                                                  Truncate the current instance month with given precision.
 * @method        CarbonInterface  ceilMonth(float $precision = 1)                                                    Ceil the current instance month with given precision.
 * @method        CarbonInterface  ceilMonths(float $precision = 1)                                                   Ceil the current instance month with given precision.
 * @method        CarbonInterface  roundDay(float $precision = 1, string $function = "round")                         Round the current instance day with given precision using the given function.
 * @method        CarbonInterface  roundDays(float $precision = 1, string $function = "round")                        Round the current instance day with given precision using the given function.
 * @method        CarbonInterface  floorDay(float $precision = 1)                                                     Truncate the current instance day with given precision.
 * @method        CarbonInterface  floorDays(float $precision = 1)                                                    Truncate the current instance day with given precision.
 * @method        CarbonInterface  ceilDay(float $precision = 1)                                                      Ceil the current instance day with given precision.
 * @method        CarbonInterface  ceilDays(float $precision = 1)                                                     Ceil the current instance day with given precision.
 * @method        CarbonInterface  roundHour(float $precision = 1, string $function = "round")                        Round the current instance hour with given precision using the given function.
 * @method        CarbonInterface  roundHours(float $precision = 1, string $function = "round")                       Round the current instance hour with given precision using the given function.
 * @method        CarbonInterface  floorHour(float $precision = 1)                                                    Truncate the current instance hour with given precision.
 * @method        CarbonInterface  floorHours(float $precision = 1)                                                   Truncate the current instance hour with given precision.
 * @method        CarbonInterface  ceilHour(float $precision = 1)                                                     Ceil the current instance hour with given precision.
 * @method        CarbonInterface  ceilHours(float $precision = 1)                                                    Ceil the current instance hour with given precision.
 * @method        CarbonInterface  roundMinute(float $precision = 1, string $function = "round")                      Round the current instance minute with given precision using the given function.
 * @method        CarbonInterface  roundMinutes(float $precision = 1, string $function = "round")                     Round the current instance minute with given precision using the given function.
 * @method        CarbonInterface  floorMinute(float $precision = 1)                                                  Truncate the current instance minute with given precision.
 * @method        CarbonInterface  floorMinutes(float $precision = 1)                                                 Truncate the current instance minute with given precision.
 * @method        CarbonInterface  ceilMinute(float $precision = 1)                                                   Ceil the current instance minute with given precision.
 * @method        CarbonInterface  ceilMinutes(float $precision = 1)                                                  Ceil the current instance minute with given precision.
 * @method        CarbonInterface  roundSecond(float $precision = 1, string $function = "round")                      Round the current instance second with given precision using the given function.
 * @method        CarbonInterface  roundSeconds(float $precision = 1, string $function = "round")                     Round the current instance second with given precision using the given function.
 * @method        CarbonInterface  floorSecond(float $precision = 1)                                                  Truncate the current instance second with given precision.
 * @method        CarbonInterface  floorSeconds(float $precision = 1)                                                 Truncate the current instance second with given precision.
 * @method        CarbonInterface  ceilSecond(float $precision = 1)                                                   Ceil the current instance second with given precision.
 * @method        CarbonInterface  ceilSeconds(float $precision = 1)                                                  Ceil the current instance second with given precision.
 * @method        CarbonInterface  roundMillennium(float $precision = 1, string $function = "round")                  Round the current instance millennium with given precision using the given function.
 * @method        CarbonInterface  roundMillennia(float $precision = 1, string $function = "round")                   Round the current instance millennium with given precision using the given function.
 * @method        CarbonInterface  floorMillennium(float $precision = 1)                                              Truncate the current instance millennium with given precision.
 * @method        CarbonInterface  floorMillennia(float $precision = 1)                                               Truncate the current instance millennium with given precision.
 * @method        CarbonInterface  ceilMillennium(float $precision = 1)                                               Ceil the current instance millennium with given precision.
 * @method        CarbonInterface  ceilMillennia(float $precision = 1)                                                Ceil the current instance millennium with given precision.
 * @method        CarbonInterface  roundCentury(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
 * @method        CarbonInterface  roundCenturies(float $precision = 1, string $function = "round")                   Round the current instance century with given precision using the given function.
 * @method        CarbonInterface  floorCentury(float $precision = 1)                                                 Truncate the current instance century with given precision.
 * @method        CarbonInterface  floorCenturies(float $precision = 1)                                               Truncate the current instance century with given precision.
 * @method        CarbonInterface  ceilCentury(float $precision = 1)                                                  Ceil the current instance century with given precision.
 * @method        CarbonInterface  ceilCenturies(float $precision = 1)                                                Ceil the current instance century with given precision.
 * @method        CarbonInterface  roundDecade(float $precision = 1, string $function = "round")                      Round the current instance decade with given precision using the given function.
 * @method        CarbonInterface  roundDecades(float $precision = 1, string $function = "round")                     Round the current instance decade with given precision using the given function.
 * @method        CarbonInterface  floorDecade(float $precision = 1)                                                  Truncate the current instance decade with given precision.
 * @method        CarbonInterface  floorDecades(float $precision = 1)                                                 Truncate the current instance decade with given precision.
 * @method        CarbonInterface  ceilDecade(float $precision = 1)                                                   Ceil the current instance decade with given precision.
 * @method        CarbonInterface  ceilDecades(float $precision = 1)                                                  Ceil the current instance decade with given precision.
 * @method        CarbonInterface  roundQuarter(float $precision = 1, string $function = "round")                     Round the current instance quarter with given precision using the given function.
 * @method        CarbonInterface  roundQuarters(float $precision = 1, string $function = "round")                    Round the current instance quarter with given precision using the given function.
 * @method        CarbonInterface  floorQuarter(float $precision = 1)                                                 Truncate the current instance quarter with given precision.
 * @method        CarbonInterface  floorQuarters(float $precision = 1)                                                Truncate the current instance quarter with given precision.
 * @method        CarbonInterface  ceilQuarter(float $precision = 1)                                                  Ceil the current instance quarter with given precision.
 * @method        CarbonInterface  ceilQuarters(float $precision = 1)                                                 Ceil the current instance quarter with given precision.
 * @method        CarbonInterface  roundMillisecond(float $precision = 1, string $function = "round")                 Round the current instance millisecond with given precision using the given function.
 * @method        CarbonInterface  roundMilliseconds(float $precision = 1, string $function = "round")                Round the current instance millisecond with given precision using the given function.
 * @method        CarbonInterface  floorMillisecond(float $precision = 1)                                             Truncate the current instance millisecond with given precision.
 * @method        CarbonInterface  floorMilliseconds(float $precision = 1)                                            Truncate the current instance millisecond with given precision.
 * @method        CarbonInterface  ceilMillisecond(float $precision = 1)                                              Ceil the current instance millisecond with given precision.
 * @method        CarbonInterface  ceilMilliseconds(float $precision = 1)                                             Ceil the current instance millisecond with given precision.
 * @method        CarbonInterface  roundMicrosecond(float $precision = 1, string $function = "round")                 Round the current instance microsecond with given precision using the given function.
 * @method        CarbonInterface  roundMicroseconds(float $precision = 1, string $function = "round")                Round the current instance microsecond with given precision using the given function.
 * @method        CarbonInterface  floorMicrosecond(float $precision = 1)                                             Truncate the current instance microsecond with given precision.
 * @method        CarbonInterface  floorMicroseconds(float $precision = 1)                                            Truncate the current instance microsecond with given precision.
 * @method        CarbonInterface  ceilMicrosecond(float $precision = 1)                                              Ceil the current instance microsecond with given precision.
 * @method        CarbonInterface  ceilMicroseconds(float $precision = 1)                                             Ceil the current instance microsecond with given precision.
 * @method        string           shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1) Get the difference (short format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)  Get the difference (long format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 *
 * </autodoc>
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a54ae3ee07d995f26f2ae6ba968072d4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Diff wording options(expressed in octal).
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '92249e7d8400beddd2a3e27ab1317ee4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Diff syntax options.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '03fc9fea7db3abd0161d79151b538274' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate string options.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '48737655f8c3961aa8fcd6aaf3283acc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The day constants.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b7bb948d58814dbd6031f79d3c3b725f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The month constants.
     * These aren\'t used by Carbon itself but exist for
     * convenience sake alone.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6f10eea9586fad02af004a7308053dca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Number of X in Y.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6879ede7a563c9449e974e70528ebbeb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Special settings to get the start of week from current locale culture.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1c966be0857071802d99d32fa4f5c321' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * RFC7231 DateTime format.
     *
     * @var string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a1773759e950a8b831d59b3c0996c69c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Default format to use for __toString method when type juggling occurs.
     *
     * @var string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'af714f8342797675918eb91a25ccb6b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format for converting mocked time, includes microseconds.
     *
     * @var string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c718959e60a4647e485b6f87354a8ed5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Pattern detection for ->isoFormat and ::createFromIsoFormat.
     *
     * @var string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a991d6924efd5a853b101369aa73661b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Dynamically handle calls to the class.
     *
     * @param string $method     magic method name called
     * @param array  $parameters parameters list
     *
     * @throws UnknownMethodException|BadMethodCallException|ReflectionException|Throwable
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__call',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '02f202e8c0cc6bb2d4950a139c8589c5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Dynamically handle calls to the class.
     *
     * @param string $method     magic method name called
     * @param array  $parameters parameters list
     *
     * @throws BadMethodCallException
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__callStatic',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd4b5de40fcbe14d8d61ede22d55f4123' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Update constructedObjectId on cloned.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__clone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9d941a3c18119b16efe9ab8b10988d8f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new Carbon instance.
     *
     * Please see the testing aids section (specifically static::setTestNow())
     * for more on the possibility of this constructor returning a test instance.
     *
     * @param string|null              $time
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__construct',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9a37c8c67190da671accce91325fdfc4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Show truthy properties on var_dump().
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__debugInfo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '764555daaaa4a364c25d43c7b3b882a3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a part of the Carbon object
     *
     * @param string $name
     *
     * @throws UnknownGetterException
     *
     * @return string|int|bool|DateTimeZone|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__get',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '747eab66caea4c369d784ebd870f81a9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if an attribute exists on the object
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__isset',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '95cfb1bcc57f774eb69522121c4a4f58' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a part of the Carbon object
     *
     * @param string                  $name
     * @param string|int|DateTimeZone $value
     *
     * @throws UnknownSetterException|ReflectionException
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__set',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '71fa479582c300321ab325974e53eaba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The __set_state handler.
     *
     * @param string|array $dump
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__set_state',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e1035c0b1a7f660be323736604d33188' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the list of properties to dump on serialize() called on.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__sleep',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '87ca0d1bfa704e5253f30aa367710db5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as a string using the set format
     *
     * @example
     * ```
     * echo Carbon::now(); // Carbon instances can be casted to string
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => '__toString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '608d893824ac150dc1b6b5205cb51c31' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add given units or interval to the current instance.
     *
     * @example $date->add(\'hour\', 3)
     * @example $date->add(15, \'days\')
     * @example $date->add(CarbonInterval::days(4))
     *
     * @param string|DateInterval|Closure|CarbonConverterInterface $unit
     * @param int                                                  $value
     * @param bool|null                                            $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'add',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7564cb773009ec57859bbba066e0cf2f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add seconds to the instance using timestamp. Positive $value travels
     * forward while negative $value travels into the past.
     *
     * @param string $unit
     * @param int    $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'addRealUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '02974c37b496880350961dbf5a8dbdc7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add given units to the current instance.
     *
     * @param string    $unit
     * @param int       $value
     * @param bool|null $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'addUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0aac7891bdbc52e1eeb9067de67a381c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        amount to add to the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'addUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '94191d87b2e219f5a43139fd7d58d707' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given to now
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single part)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'ago',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f4d766aff46dba8f55bc02c15dc28390' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify the current instance to the average of a given instance (default now) and the current instance
     * (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'average',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7c7c4f89b957bf065ecee64d6d8f73c5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others.
     *
     * The third argument allow you to specify if bounds are included or not (true by default)
     * but for when you including/excluding bounds may produce different results in your application,
     * we recommend to use the explicit methods ->betweenIncluded() or ->betweenExcluded() instead.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->between(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-25\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-25\', \'2018-08-01\', false); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     * @param bool                                    $equal Indicates if an equal to comparison should be done
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'between',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da24403e628d38f9d2787daa17e7db59' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others, bounds excluded.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-07-25\', \'2018-08-01\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'betweenExcluded',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe47aab54599fee8e67161782fa45ff7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others, bounds included.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-07-25\', \'2018-08-01\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'betweenIncluded',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0387e8b81953a78eaceaf67f1e0b7673' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns either the close date "Friday 15h30", or a calendar date "10/09/2017" is farthest than 7 days from now.
     *
     * @param Carbon|\\DateTimeInterface|string|null $referenceTime
     * @param array                                 $formats
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ce45d0a4c29835b8d7f3f38746a968a8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format and valid to create a
     * new instance.
     *
     * @example
     * ```
     * Carbon::canBeCreatedFromFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::canBeCreatedFromFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'canBeCreatedFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fd7f27e2fa5aa948c4b5f847eeb8c170' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the Carbon instance passed through, a now instance in the same timezone
     * if null given or parse the input if string given.
     *
     * @param Carbon|\\Carbon\\CarbonPeriod|\\Carbon\\CarbonInterval|\\DateInterval|\\DatePeriod|DateTimeInterface|string|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'carbonize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '761c65c43c5e050f9af8e1fe4a78ddcd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Cast the current instance into the given class.
     *
     * @param string $className The $className::instance() method will be called to cast the current object.
     *
     * @return DateTimeInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'cast',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5ddccd554f4345fd0e83b95c11ee0d6c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'ceil',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '645a4058d39e8bf566efc07ff0f80f7a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance at the given unit with given precision if specified.
     *
     * @param string    $unit
     * @param float|int $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'ceilUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '44302be25c94c6b237102fbd5692252f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'ceilWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8a0da81882265051b1b77a7f995b9660' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Similar to native modify() method of DateTime but can handle more grammars.
     *
     * @example
     * ```
     * echo Carbon::now()->change(\'next 2pm\');
     * ```
     *
     * @link https://php.net/manual/en/datetime.modify.php
     *
     * @param string $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'change',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7204b36ae80775c95bd9f536595a19de' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Cleanup properties attached to the public scope of DateTime when a dump of the date is requested.
     * foreach ($date as $_) {}
     * serializer($date)
     * var_export($date)
     * get_object_vars($date)
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'cleanupDumpProperties',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '964ee6d688f7f603aaa182ce6d5f1987' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias copy
     *
     * Get a copy of the instance.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'clone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '59cb39ae07e416bc2ec7d94aff354e88' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the closest date from the instance (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'closest',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bc781721e50b6e0796f19d3849b96814' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a copy of the instance.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'copy',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '846c03a623e2f04a6270b2edada3bf25' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new Carbon instance from a specific date and time.
     *
     * If any of $year, $month or $day are set to null their now() values will
     * be used.
     *
     * If $hour is null it will be set to its now() value and the default
     * values for $minute and $second will be their now() values.
     *
     * If $hour is not null then the default values for $minute and $second
     * will be 0.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'create',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '25236796a49e034c0c4dc990dca092f2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a date. The time portion is set to now.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2334e18ed4b07ce1e714edbd7a3d7d4e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format.
     *
     * @param string                         $format Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '004da2069da26723cc420eb6976c9584' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific ISO format (same replacements as ->isoFormat()).
     *
     * @param string                                             $format     Datetime format
     * @param string                                             $time
     * @param DateTimeZone|string|false|null                     $tz         optional timezone
     * @param string|null                                        $locale     locale to be used for LTS, LT, LL, LLL, etc. macro-formats (en by fault, unneeded if no such macro-format in use)
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator optional custom translator to use for macro-formats
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromIsoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '96a3e40203370fe1311daca6450c0dd7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format and a string in a given language.
     *
     * @param string                         $format Datetime format
     * @param string                         $locale
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromLocaleFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c25312ad24b1163a16a51f8bedb08a4c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific ISO format and a string in a given language.
     *
     * @param string                         $format Datetime ISO format
     * @param string                         $locale
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromLocaleIsoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2388af6719227271d5a8cba3e40a64ec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a time. The date portion is set to today.
     *
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd194d001f8a3822e3756e617df5e8597' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a time string. The date portion is set to today.
     *
     * @param string                   $time
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f8051b73a11e7ce3965cb61013b89fa6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp and set the timezone (use default one if not specified).
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string          $timestamp
     * @param \\DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4c87d3c379293144862fa6af942d44cf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp in milliseconds.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string          $timestamp
     * @param \\DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromTimestampMs',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7c039483bb580807b09e0f7cf43cd2ca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp in milliseconds.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $timestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromTimestampMsUTC',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da1dfb92add11b7005baf5753f75112e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from an timestamp keeping the timezone to UTC.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $timestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createFromTimestampUTC',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '92244215990351340d1bc582371c8aff' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a date. The time portion is set to midnight.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createMidnightDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5485ed657af970606234678a9030f25e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new safe Carbon instance from a specific date and time.
     *
     * If any of $year, $month or $day are set to null their now() values will
     * be used.
     *
     * If $hour is null it will be set to its now() value and the default
     * values for $minute and $second will be their now() values.
     *
     * If $hour is not null then the default values for $minute and $second
     * will be 0.
     *
     * If one of the set values is not valid, an InvalidDateException
     * will be thrown.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidDateException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'createSafe',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6e90e90360be7c023d4cae66f1231211' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the day of year.
     *
     * @param int|null $value new value for day of year if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'dayOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0752724839636c8fecffd94413605982' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference as a CarbonInterval instance.
     * Return absolute interval (always positive) unless you pass false to the second argument.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return CarbonInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffAsCarbonInterval',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b444a0aaed18761a262a35a1058e0edd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference by the given interval using a filter closure.
     *
     * @param CarbonInterval                                         $ci       An interval to traverse by
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '10b826fd196b47a92b0333d29f9be0b9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @example
     * ```
     * echo Carbon::tomorrow()->diffForHumans() . "\\n";
     * echo Carbon::tomorrow()->diffForHumans([\'parts\' => 2]) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans([\'parts\' => 3, \'join\' => true]) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday()) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday(), [\'short\' => true]) . "\\n";
     * ```
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffForHumans',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd42fbdae2c8cc4e0d5e234edc5ba58dd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '40f0a9f263ffb4ca555d89c0b3ce4516' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days using a filter closure rounded down.
     *
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInDaysFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fa22cf0c14c758ed0c8ad31229059c90' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '895488394711917cd81d96cd0237b867' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours using a filter closure rounded down.
     *
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInHoursFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5e2f8a74b706f4ddee70e7c438926643' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in microseconds.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5bdb9c62c7d7a6ee0abe2f8c4a44fe87' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in milliseconds rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInMilliseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '996d44f15ce3880af876a98b707bbaad' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '40314dc621bd40b7651e8ef7e3bf7550' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cf290ac6b27f38ad9c3e93c22a22620b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in quarters rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInQuarters',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9057a3b837a619515eae55d66280121a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInRealHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2ae510710335a7c4be59f472543175bd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in microseconds using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInRealMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1b2ce515d6c2d4dc73fbd92971a96b10' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in milliseconds rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInRealMilliseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '80613c2db6a7b6b0e5656df2ceea9aa4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInRealMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fbb4cc7e94bea2059660e3d2bc708a8d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '11f8a7301537b0b2b0449bfbcc656b88' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '454fc161c49139f231c019c1151d3934' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weekdays rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInWeekdays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '95f9a1cffcb0a6551836648ea7c865c7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weekend days using a filter rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1309601bea72dd8f522cb95aa2249dec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '478d88d542ab070eda212d69d15da10c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in years
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'diffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd92f4b1d22c27febfe402fe30d01370c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOption
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'disableHumanDiffOption',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c641210cb609696074c1a234b718f6a3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOption
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'enableHumanDiffOption',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7627417fbcea11aaa663aabe1a6e898f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current given unit.
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOf(\'month\')
     *   ->endOf(\'week\', Carbon::FRIDAY);
     * ```
     *
     * @param string            $unit
     * @param array<int, mixed> $params
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a21c8c0d734197d12b1cda543cc3fd1b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the century and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfCentury();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfCentury',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ee740e92658453cfb6d6b61ee38df711' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the time to 23:59:59.999999 end of day
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfDay();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '007a34f4557977f58e19db63850ba689' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the decade and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfDecade();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfDecade',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '06ac263c8967bdb9a62b2e5f9722944d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current hour, minutes and seconds become 59
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfHour();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfHour',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3562468c8cc5d734370b30745122dcb5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the millennium and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMillennium();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfMillennium',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd3b2d2d6b9ce0c0bbcb8f12d3f0e285b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current minute, seconds become 59
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMinute();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfMinute',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '31cbc7e1f966f07a827b33a22cbbe6f8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the month and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMonth();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '35f34e471c07fe5613ffd4b8c01db4cd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the quarter and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfQuarter();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e9a1c758a44f0c91616c7db51ea73d0b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current second, microseconds become 999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->endOfSecond()
     *   ->format(\'H:i:s.u\');
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfSecond',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eb74354d440957dafd0852702984d95e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of week (defined in $weekEndsAt) and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->locale(\'ar\')->endOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfWeek(Carbon::SATURDAY) . "\\n";
     * ```
     *
     * @param int $weekEndsAt optional start allow you to specify the day of week to use to end the week
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e88fff5188384054c2d60a2499c826a4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the year and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfYear();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'endOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e4060076e8a17b80b419143a86f2c609' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(Carbon::parse(\'2018-07-25 12:45:16\')); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see equalTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'eq',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3dcd7a0a2f3b86daf00f0aed51e0241' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(Carbon::parse(\'2018-07-25 12:45:16\')); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'equalTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'df7bde2ebb2ba201e2ca4884d1125314' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the current locale to the given, execute the passed function, reset the locale to previous one,
     * then return the result of the closure (or null if the closure was void).
     *
     * @param string   $locale locale ex. en
     * @param callable $func
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'executeWithLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2e5b462c948e4b95d1a6e229d2f1c01d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the farthest date from the instance (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'farthest',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6d0fb78f283fee1c2da643e10d5408c7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current month. If no dayOfWeek is provided, modify to the
     * first day of the current month.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'firstOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '58399826795265f38c54695a464b7444' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current quarter. If no dayOfWeek is provided, modify to the
     * first day of the current quarter.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'firstOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '86fb05c3a4fb9c9bba6a8e6fad67c6ec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current year. If no dayOfWeek is provided, modify to the
     * first day of the current year.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'firstOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f29bf0cde4b430b6f828892c62c9ebee' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a50bd3670dc459551484b37b04341e49' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8a377b18240fc23a91aa0703a16bbbe2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9ce3f84efc0d7ee3e8af29588e1c42fa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae41364563915a36d7f1622f15977a01' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInRealDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6997db16fd14e56e04bb6dbefb723624' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInRealHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd50550f5d2cb726aaa86d01c1927bb1c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInRealMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4b90dc36f65b9e7f7b4e2842b894e392' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c30ab91a5eaaced5dd34180384ec23c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '18da1b4838444a399b5a115839468b85' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInRealWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe8954d17a53702d74596b5ae8a489e1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in year as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aca7042a88bba79f1c244993814a7682' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bd3f698981e3efa166bfa32b0eb1d9fb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '252f0d85ddd9cf7476050d738b1db24e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in year as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '040caad3c8ef8ac7b2c97493f335aa67' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floor',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b81aaac74807d3f76ced9474c501bae8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Truncate the current instance at the given unit with given precision if specified.
     *
     * @param string    $unit
     * @param float|int $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floorUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1ae816d9eec954a9511d06bee1cee33b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Truncate the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'floorWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cc4f9124f21a80658579b838ff1251e5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance with the current locale.  You can set the current
     * locale using setlocale() http://php.net/setlocale.
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'formatLocalized',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3d3c304e8e2c0729c74558076bf3837d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias diffForHumans
     *
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'from',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '71da6d14d3fcea33daa72124728af857' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current
     * instance to now.
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'fromNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '80d124011ab7d567d5dbe8184531a41b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create an instance from a serialized string.
     *
     * @param string $value
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'fromSerialized',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ac556faa7b314f4d34a7b6ae6a629406' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Register a custom macro.
     *
     * @param object|callable $macro
     * @param int             $priority marco with higher priority is tried first
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'genericMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd1b1e9ec1fb782e8d3305605bc810c5b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a part of the Carbon object
     *
     * @param string $name
     *
     * @throws UnknownGetterException
     *
     * @return string|int|bool|DateTimeZone|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'get',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cee3b835221b295adb6c9f918a5bca2c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the alternative number for a given date property if available in the current locale.
     *
     * @param string $key date property
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getAltNumber',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4a24930d8e843aba0fe5e036aa1e30d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the list of internally available locales and already loaded custom locales.
     * (It will ignore custom translator dynamic loading.)
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getAvailableLocales',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6120450b584bb7d764a8c6ffb9ec188a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of Language object for each available locale. This object allow you to get the ISO name, native
     * name, region and variant of the locale.
     *
     * @return Language[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getAvailableLocalesInfo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cb05e8b138f0a62e16d45a6c38a217fe' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of calendar formats for ISO formatting.
     *
     * @param string|null $locale current locale used if null
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getCalendarFormats',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c780f972bb8de76b1d498d633a4fc6e2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the days of the week
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec2bce6a05a2cf6a43227307a2b75ef1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the fallback locale.
     *
     * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
     *
     * @return string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getFallbackLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a336975173e3490209a679170aa82b1e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of replacements from date() format to isoFormat().
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getFormatsToIsoReplacements',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a0071945f9ba7c3c221e754b6b2f7490' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return default humanDiff() options (merged flags as integer).
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getHumanDiffOptions',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f3c3e23693d41456ae39d9326c23f85' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of locale formats for ISO formatting.
     *
     * @param string|null $locale current locale used if null
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getIsoFormats',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6d4f929addc5c3366c934cc604355617' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of locale units for ISO formatting.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getIsoUnits',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f3504e10209330d575f0dc034d8e8086' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * {@inheritdoc}
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getLastErrors',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c07cac3eca774f794406731cb80d8eaa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the raw callable macro registered globally or locally for a given name.
     *
     * @param string $name
     *
     * @return callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getLocalMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '332dcb594106b6e54846bc8713ec0e53' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translator of the current instance or the default if none set.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cfd5b93753a9f70229abd23e190c4cea' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the current translator locale.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4789f61130e6ac2717460a14ef6386d9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the raw callable macro registered globally for a given name.
     *
     * @param string $name
     *
     * @return callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4bfc09f36d6d7bb773ecb545a9d1888b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * get midday/noon hour
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getMidDayAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2a3daa58c9542af527a1bf361c7baef5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the offset hour and minute formatted with +/- and a given separator (":" by default).
     * For example, if the time zone is 9 hours 30 minutes, you\'ll get "+09:30", with "@@" as first
     * argument, "+09@@30", with "" as first argument, "+0930". Negative offset will return something
     * like "-12:00".
     *
     * @param string $separator string to place between hours and minutes (":" by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getOffsetString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '67d6ceb0afa7d9e871a7f265bc77342f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a unit of the instance padded with 0 by default or any other string if specified.
     *
     * @param string $unit      Carbon unit name
     * @param int    $length    Length of the output (2 by default)
     * @param string $padString String to use for padding ("0" by default)
     * @param int    $padType   Side(s) to pad (STR_PAD_LEFT by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getPaddedUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e78ac2abf51ffe1091a10d97108f7f6a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a timestamp rounded with the given precision (6 by default).
     *
     * @example getPreciseTimestamp()   1532087464437474 (microsecond maximum precision)
     * @example getPreciseTimestamp(6)  1532087464437474
     * @example getPreciseTimestamp(5)  153208746443747  (1/100000 second precision)
     * @example getPreciseTimestamp(4)  15320874644375   (1/10000 second precision)
     * @example getPreciseTimestamp(3)  1532087464437    (millisecond precision)
     * @example getPreciseTimestamp(2)  153208746444     (1/100 second precision)
     * @example getPreciseTimestamp(1)  15320874644      (1/10 second precision)
     * @example getPreciseTimestamp(0)  1532087464       (second precision)
     * @example getPreciseTimestamp(-1) 153208746        (10 second precision)
     * @example getPreciseTimestamp(-2) 15320875         (100 second precision)
     *
     * @param int $precision
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getPreciseTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bc630e08fab090532adf6514e43fb0b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns current local settings.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getSettings',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4166a8f96fceabcfda9ddd359db32cf6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the Carbon instance (real or mock) to be returned when a "now"
     * instance is created.
     *
     * @return Closure|static the current instance used for testing
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fc22d0167654b4e57c5757417a301ddf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a format from H:i to H:i:s.u according to given unit precision.
     *
     * @param string $unitPrecision "minute", "second", "millisecond" or "microsecond"
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTimeFormatByPrecision',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '080aa72ac60e7665a19b55777a7cfcae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current week day name (with context for languages with multiple forms).
     *
     * @param string|null $context      whole format string
     * @param string      $keySuffix    "", "_short" or "_min"
     * @param string|null $defaultValue default value if translation missing
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTranslatedDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1e67615575c81362a1fd39eaafdce213' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current abbreviated week day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTranslatedMinDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b333e3f936117a883d8ae705bc2f8bca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current month day name (with context for languages with multiple forms).
     *
     * @param string|null $context      whole format string
     * @param string      $keySuffix    "" or "_short"
     * @param string|null $defaultValue default value if translation missing
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTranslatedMonthName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4a34902ca7accaae223636ef4f042308' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current short week day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTranslatedShortDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e86ad7d93faf350a21745b117ab58769' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current short month day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTranslatedShortMonthName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e9789d3ecfbb1fdb2163ecaa2d7f5462' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns raw translation message for a given key.
     *
     * @param string                                             $key        key to find
     * @param string|null                                        $locale     current locale used if null
     * @param string|null                                        $default    default value if translation returns the key
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator an optional translator to use
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTranslationMessage',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae6626636cbd09d5a2856dd6089ec885' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns raw translation message for a given key.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator the translator to use
     * @param string                                             $key        key to find
     * @param string|null                                        $locale     current locale used if null
     * @param string|null                                        $default    default value if translation returns the key
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTranslationMessageWith',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f9791cc677b6f9070dca9e6ef403c77a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the default translator instance in use.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5e885a988dbd5ebd434d6c73d4608c71' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the last day of week
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getWeekEndsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8ca3918f0be8c93663299e69c78781b7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the first day of week
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getWeekStartsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '102a9d77f524a6b9133a8672da7c90af' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get weekend days
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'getWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2b9c431a3eab728c9cee54e90ab6f81b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'greaterThan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b9f5879a274c922997b6e1c5a321c9e8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'greaterThanOrEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4d5c0bfa4dc5a8867c136465712d679b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'gt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a2d34d01d7f372261106930dc6f9f9c3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThanOrEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'gte',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2a214239e0489fdc018716630c8278c6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format.
     *
     * @example
     * ```
     * Carbon::hasFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::hasFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'hasFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '722d80614d45803930fea69871775d68' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format.
     *
     * @example
     * ```
     * Carbon::hasFormatWithModifiers(\'31/08/2015\', \'d#m#Y\'); // true
     * Carbon::hasFormatWithModifiers(\'31/08/2015\', \'m#d#Y\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'hasFormatWithModifiers',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1c7b36acd24f9446b7586124609e8908' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if macro is registered globally or locally.
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'hasLocalMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd65763595b31ebacf2e84f29ef585ccf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return true if the current instance has its own translator.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'hasLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0b5350c97dba5f415af64edb1cfcbb84' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if macro is registered globally.
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'hasMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0777154175d5782a414ec6e37ff9dcf7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determine if a time string will produce a relative date.
     *
     * @param string $time
     *
     * @return bool true if time match a relative date, false if absolute or invalid time string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'hasRelativeKeywords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '00bd0861a9a39ce8b3fae0954d79fb91' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determine if there is a valid test instance set. A valid test instance
     * is anything that is not null.
     *
     * @return bool true if there is a test instance, otherwise false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'hasTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '409430f824f5a7abf8424a38c176e7c6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a DateTime one.
     *
     * @param DateTimeInterface $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'instance',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '315205d852c49efc3d5986ce68ccddc2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current date matches the given string.
     *
     * @example
     * ```
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2018\')); // false
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019-06\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'06-02\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019-06-02\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'Sunday\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'June\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23:45\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23:00\')); // false
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12h\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 15:23:45\')->is(\'3pm\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 15:23:45\')->is(\'3am\')); // false
     * ```
     *
     * @param string $tester day name, month name, hour, date, etc. as string
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'is',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5818af9a81747438e96e26ace46c97c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isAfter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b9ba3a40d4d6493cf27329b59492f65b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isBefore',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6d0cc3d8f45a538ec28b89ec9fd1b216' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-25\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-25\', \'2018-08-01\', false); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     * @param bool                                    $equal Indicates if an equal to comparison should be done
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isBetween',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '96e5396d4bf4796e18ef0ca7a13efe1f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if its the birthday. Compares the date/month values of the two dates.
     *
     * @example
     * ```
     * Carbon::now()->subYears(5)->isBirthday(); // true
     * Carbon::now()->subYears(5)->subDay()->isBirthday(); // false
     * Carbon::parse(\'2019-06-05\')->isBirthday(Carbon::parse(\'2001-06-05\')); // true
     * Carbon::parse(\'2019-06-05\')->isBirthday(Carbon::parse(\'2001-06-06\')); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date The instance to compare with or null to use current day.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isBirthday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '39f1ef1dc4648783848c2b364172441b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the current unit given.
     *
     * @example
     * ```
     * Carbon::now()->isCurrentUnit(\'hour\'); // true
     * Carbon::now()->subHours(2)->isCurrentUnit(\'hour\'); // false
     * ```
     *
     * @param string $unit The unit to test.
     *
     * @throws BadMethodCallException
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isCurrentUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b39cf0abbb223ea2305057d6a8a1ea92' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if this day is a specific day of the week.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(Carbon::WEDNESDAY); // true
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(Carbon::FRIDAY); // false
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(\'Wednesday\'); // true
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(\'Friday\'); // false
     * ```
     *
     * @param int $dayOfWeek
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isDayOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '318838351a4ea0a23c98e8674ffa47e7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is end of day.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 23:59:59.999999\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:59.123456\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:59\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:58.999999\')->isEndOfDay(); // false
     * Carbon::parse(\'2019-02-28 23:59:59.999999\')->isEndOfDay(true); // true
     * Carbon::parse(\'2019-02-28 23:59:59.123456\')->isEndOfDay(true); // false
     * Carbon::parse(\'2019-02-28 23:59:59\')->isEndOfDay(true); // false
     * ```
     *
     * @param bool $checkMicroseconds check time at microseconds precision
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isEndOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7f050c87b766e9c53210dfd355891fa1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the future, ie. greater (after) than now.
     *
     * @example
     * ```
     * Carbon::now()->addHours(5)->isFuture(); // true
     * Carbon::now()->subHours(5)->isFuture(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isFuture',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '364842014d6f71f41d549214333e7f67' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is immutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '35a8a475dfa3f541bb45da4b29fa1a34' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if today is the last day of the Month
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28\')->isLastOfMonth(); // true
     * Carbon::parse(\'2019-03-28\')->isLastOfMonth(); // false
     * Carbon::parse(\'2019-03-30\')->isLastOfMonth(); // false
     * Carbon::parse(\'2019-03-31\')->isLastOfMonth(); // true
     * Carbon::parse(\'2019-04-30\')->isLastOfMonth(); // true
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isLastOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '07a8cb76426a1d0758e6348f6583f718' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a leap year.
     *
     * @example
     * ```
     * Carbon::parse(\'2020-01-01\')->isLeapYear(); // true
     * Carbon::parse(\'2019-01-01\')->isLeapYear(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isLeapYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b287ef22836117a6cd499b661ad51dd4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a long year
     *
     * @example
     * ```
     * Carbon::parse(\'2015-01-01\')->isLongYear(); // true
     * Carbon::parse(\'2016-01-01\')->isLongYear(); // false
     * ```
     *
     * @see https://en.wikipedia.org/wiki/ISO_8601#Week_dates
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isLongYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '20f0f12cee9411b7f231a090382d58fc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is midday.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 11:59:59.999999\')->isMidday(); // false
     * Carbon::parse(\'2019-02-28 12:00:00\')->isMidday(); // true
     * Carbon::parse(\'2019-02-28 12:00:00.999999\')->isMidday(); // true
     * Carbon::parse(\'2019-02-28 12:00:01\')->isMidday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isMidday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5564b2ba1f4fa56fd4acaff955f02db0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is start of day / midnight.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 00:00:00\')->isMidnight(); // true
     * Carbon::parse(\'2019-02-28 00:00:00.999999\')->isMidnight(); // true
     * Carbon::parse(\'2019-02-28 00:00:01\')->isMidnight(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isMidnight',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e294f038ad4e88f65bdd97045984ab5f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if a property can be changed via setter.
     *
     * @param string $unit
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isModifiableUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eaa35f83dac7291a5a56da5bbc419fdd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is mutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '75c8acad7201609b51512c471be34d71' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the past, ie. less (before) than now.
     *
     * @example
     * ```
     * Carbon::now()->subHours(5)->isPast(); // true
     * Carbon::now()->addHours(5)->isPast(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isPast',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '992ec12b786764db77dd136268cf0af2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Compares the formatted values of the two dates.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-06-13\')->isSameAs(\'Y-d\', Carbon::parse(\'2019-12-13\')); // true
     * Carbon::parse(\'2019-06-13\')->isSameAs(\'Y-d\', Carbon::parse(\'2019-06-14\')); // false
     * ```
     *
     * @param string                                        $format date formats to compare.
     * @param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date   instance to compare with or null to use current day.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isSameAs',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '236b7e57486b0ac14f56232085449148' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the passed in date is in the same month as the instance´s month.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2019-01-01\')); // true
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2019-02-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2018-01-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2018-01-01\'), false); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date       The instance to compare with or null to use the current date.
     * @param bool                                   $ofSameYear Check if it is the same month in the same year.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isSameMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bfaa684ff9b8f982efc54169225b080a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the passed in date is in the same quarter as the instance quarter (and year if needed).
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2019-03-01\')); // true
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2019-04-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2018-03-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2018-03-01\'), false); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date       The instance to compare with or null to use current day.
     * @param bool                                          $ofSameYear Check if it is the same month in the same year.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isSameQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1e3710e7f1a1ccda33f9dcb3dc4c3784' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the current unit given.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-13\')->isSameUnit(\'year\', Carbon::parse(\'2019-12-25\')); // true
     * Carbon::parse(\'2018-12-13\')->isSameUnit(\'year\', Carbon::parse(\'2019-12-25\')); // false
     * ```
     *
     * @param string                                 $unit singular unit string
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date instance to compare with or null to use current day.
     *
     * @throws BadComparisonUnitException
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isSameUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2049625d1c268f355038449e58adfa17' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is start of day / midnight.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 00:00:00\')->isStartOfDay(); // true
     * Carbon::parse(\'2019-02-28 00:00:00.999999\')->isStartOfDay(); // true
     * Carbon::parse(\'2019-02-28 00:00:01\')->isStartOfDay(); // false
     * Carbon::parse(\'2019-02-28 00:00:00.000000\')->isStartOfDay(true); // true
     * Carbon::parse(\'2019-02-28 00:00:00.000012\')->isStartOfDay(true); // false
     * ```
     *
     * @param bool $checkMicroseconds check time at microseconds precision
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isStartOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cc86aeca325e07e0746c53da35281dc3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the strict mode is globally in use, false else.
     * (It can be overridden in specific instances.)
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isStrictModeEnabled',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b6df12d3446ccfd3e99d3f78aab228de' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is today.
     *
     * @example
     * ```
     * Carbon::today()->isToday(); // true
     * Carbon::tomorrow()->isToday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isToday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bb519db1b49e49c04175a29959114048' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is tomorrow.
     *
     * @example
     * ```
     * Carbon::tomorrow()->isTomorrow(); // true
     * Carbon::yesterday()->isTomorrow(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isTomorrow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c87e31532c425d1c855f2b67e80f36f8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a weekday.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-14\')->isWeekday(); // false
     * Carbon::parse(\'2019-07-15\')->isWeekday(); // true
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '213b3d147b5ba78894d7427866a7d86e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a weekend day.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-14\')->isWeekend(); // true
     * Carbon::parse(\'2019-07-15\')->isWeekend(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isWeekend',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '49bcdfc1a6a49cc03d0fc43c5d01310d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is yesterday.
     *
     * @example
     * ```
     * Carbon::yesterday()->isYesterday(); // true
     * Carbon::tomorrow()->isYesterday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isYesterday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e5020d4efbefeae8c7ef7342eb0b2bca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format in the current language using ISO replacement patterns.
     *
     * @param string      $format
     * @param string|null $originalFormat provide context if a chunk has been passed alone
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '10ef66fde6ca54eceae48a80ba2c405a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the week number using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $week
     * @param int|null $dayOfWeek
     * @param int|null $dayOfYear
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isoWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '72464cb808d539c6eaad6f1f5eccc1c1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set/get the week number of year using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isoWeekYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '793baf5b4477f498bb8daf3f57192702' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the ISO weekday from 1 (Monday) to 7 (Sunday).
     *
     * @param int|null $value new value for weekday if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isoWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e3f8c9972cbca4890f3b2821488b31e4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the number of weeks of the current week-year using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'isoWeeksInYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '24aea967270bfe7d043a7a0ad7e96fc1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Prepare the object for JSON serialization.
     *
     * @return array|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'jsonSerialize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3a034bdeadc8e5795a0a593e8b035def' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current month. If no dayOfWeek is provided, modify to the
     * last day of the current month.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'lastOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5eef34fa30fadd68a7d86b212dfa72a6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current quarter. If no dayOfWeek is provided, modify to the
     * last day of the current quarter.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'lastOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '59e555ef277aec0878eb74b15e19e27a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current year. If no dayOfWeek is provided, modify to the
     * last day of the current year.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'lastOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eaac7b6e936db345db97e647305b8390' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'lessThan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b48eb2ee4b5e7b368dad00b12bc712fa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'lessThanOrEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f1f00d2e176278e92043287b992dc94' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the locale for the current instance.
     *
     * @param string|null $locale
     * @param string      ...$fallbackLocales
     *
     * @return $this|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'locale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6bb5ea95b2a5900947f9cb789c923ad9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow).
     * Support is considered enabled if the 3 words are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'localeHasDiffOneDayWords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f2eb2ec562d747529572df88fe68322c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after).
     * Support is considered enabled if the 4 sentences are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'localeHasDiffSyntax',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8f82ba4b7638ab4c863dc3e5f26dd15e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow).
     * Support is considered enabled if the 2 words are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'localeHasDiffTwoDayWords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '98090ecfdd5d8441cc7fe25f7798a2ae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X).
     * Support is considered enabled if the 4 sentences are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'localeHasPeriodSyntax',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6b90e8da051e4b3dc1c7fe7cc7c8e81d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has short-units support.
     * Support is considered enabled if either year, day or hour has a short variant translated.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'localeHasShortUnits',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bd30da374479c63798d52aa77f8fafac' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'lt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f3d17cc7998b4de22ac87a2b9e80e227' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThanOrEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'lte',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '022110daa71e98c9c702ca5e70bc7106' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Register a custom macro.
     *
     * @example
     * ```
     * $userSettings = [
     *   \'locale\' => \'pt\',
     *   \'timezone\' => \'America/Sao_Paulo\',
     * ];
     * Carbon::macro(\'userFormat\', function () use ($userSettings) {
     *   return $this->copy()->locale($userSettings[\'locale\'])->tz($userSettings[\'timezone\'])->calendar();
     * });
     * echo Carbon::yesterday()->hours(11)->userFormat();
     * ```
     *
     * @param string          $name
     * @param object|callable $macro
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'macro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fbae586c6ed3ff28e66acd89700a01a6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Make a Carbon instance from given variable if possible.
     *
     * Always return a new instance. Parse only strings and only these likely to be dates (skip intervals
     * and recurrences). Throw an exception for invalid format, but otherwise return null.
     *
     * @param mixed $var
     *
     * @throws InvalidFormatException
     *
     * @return static|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'make',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0432730ef9838c9a0c30230fe401fe40' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the maximum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'max',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4d7054aae9817766f926065b59aa8750' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for the greatest supported date.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'maxValue',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '77839e25421516b95afd4f84450eb08c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the maximum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see max()
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'maximum',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4dbafa2f03accc0c699e4aabf2e68ce0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the meridiem of the current time in the current locale.
     *
     * @param bool $isLower if true, returns lowercase variant if available in the current locale.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'meridiem',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b30ef8682883f32fb4d88e2bafa1b7f6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to midday, default to self::$midDayAt
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'midDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '34b6d32e404bae05c1673346a6f6bc41' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the minimum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'min',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9071fa39194c4bb40f255aa033810e7a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for the lowest supported date.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'minValue',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd3531c64d293d59b29c3af6e797a0bf1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the minimum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see min()
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'minimum',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1566e591a152de55f9dc01ba0a4b16af' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Mix another object into the class.
     *
     * @example
     * ```
     * Carbon::mixin(new class {
     *   public function addMoon() {
     *     return function () {
     *       return $this->addDays(30);
     *     };
     *   }
     *   public function subMoon() {
     *     return function () {
     *       return $this->subDays(30);
     *     };
     *   }
     * });
     * $fullMoon = Carbon::create(\'2018-12-22\');
     * $nextFullMoon = $fullMoon->addMoon();
     * $blackMoon = Carbon::create(\'2019-01-06\');
     * $previousBlackMoon = $blackMoon->subMoon();
     * echo "$nextFullMoon\\n";
     * echo "$previousBlackMoon\\n";
     * ```
     *
     * @param object|string $mixin
     *
     * @throws ReflectionException
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'mixin',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f3a2ecd1d69b12b7c47547af08f3ecd7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Calls \\DateTime::modify if mutable or \\DateTimeImmutable::modify else.
     *
     * @see https://php.net/manual/en/datetime.modify.php
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'modify',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7fb1ec7fa40cbba3e35f258527bfb3de' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is not equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(Carbon::parse(\'2018-07-25 12:45:16\')); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see notEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'ne',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0dcda2d65a2b51ccfefe9aac5c24d544' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the next occurrence of a given modifier such as a day of
     * the week. If no modifier is provided, modify to the next occurrence
     * of the current day of the week. Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param string|int|null $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'next',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '534bf76b6daf9441327738e754be2f5e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward to the next weekday.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'nextWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0805145caf6200231f42cf5cb89db044' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward to the next weekend day.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'nextWeekendDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9b47a6a24c2db8c1c7c442955891a238' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is not equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(Carbon::parse(\'2018-07-25 12:45:16\')); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'notEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '50af0a3f696c21b0dc77be214d6a02e4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a Carbon instance for the current date and time.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'now',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e184c58a40c9085ccf4eea550d335c8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a present instance in the same timezone.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'nowWithSameTz',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '53d1005b9554d4753003f40d123ff646' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current month. If the calculated occurrence is outside the scope
     * of the current month, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'nthOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bd291700ae1c00c6d3bf6b17a61ffe9b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current quarter. If the calculated occurrence is outside the scope
     * of the current quarter, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'nthOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a2c4b8e4067fa59f2842be6ead652244' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current year. If the calculated occurrence is outside the scope
     * of the current year, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'nthOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e4cfe6e5ed58df20cb40722b24a12614' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a property with its ordinal.
     *
     * @param string      $key
     * @param string|null $period
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'ordinal',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6b463ce1b5a3118281c67fe9a7431e8f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a string.
     *
     * This is an alias for the constructor that allows better fluent syntax
     * as it allows you to do Carbon::parse(\'Monday next week\')->fn() rather
     * than (new Carbon(\'Monday next week\'))->fn().
     *
     * @param string|DateTimeInterface|null $time
     * @param DateTimeZone|string|null      $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'parse',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '85c5397af6be955ba0b7cbf9add02933' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.).
     *
     * @param string                   $time   date/time string in the given language (may also contain English).
     * @param string|null              $locale if locale is null or not specified, current global locale will be
     *                                         used instead.
     * @param DateTimeZone|string|null $tz     optional timezone for the new instance.
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'parseFromLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '317f6c1c3db98b8a15d46335a00cd106' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns standardized plural of a given singular/plural unit name (in English).
     *
     * @param string $unit
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'pluralUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c699416c49c5ecd8b2d19df672165a41' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the previous occurrence of a given modifier such as a day of
     * the week. If no dayOfWeek is provided, modify to the previous occurrence
     * of the current day of the week. Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param string|int|null $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'previous',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1786a323588178422f3119afbec8aef1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go backward to the previous weekday.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'previousWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b8c5d4f4300952038de80bf80592bcba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go backward to the previous weekend day.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'previousWeekendDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ad761ea547ab4a3b5f7c24b2bb7b78d5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
     *
     * @param \\DateTimeInterface|Carbon|CarbonImmutable|null $end      period end date
     * @param int|\\DateInterval|string|null                  $interval period default interval or number of the given $unit
     * @param string|null                                    $unit     if specified, $interval must be an integer
     *
     * @return CarbonPeriod
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'range',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a9ae094aabcd0a5b1786dd5f271d3ffe' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Call native PHP DateTime/DateTimeImmutable add() method.
     *
     * @param DateInterval $interval
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'rawAdd',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1cbde766308d6986044e9de81f52f3fc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format.
     *
     * @param string                         $format Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'rawCreateFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '69b3050b4041198d5517713dec6391d5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @see https://php.net/manual/en/datetime.format.php
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'rawFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'efcc765b17b650fa790a6970a59582b2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a string.
     *
     * This is an alias for the constructor that allows better fluent syntax
     * as it allows you to do Carbon::parse(\'Monday next week\')->fn() rather
     * than (new Carbon(\'Monday next week\'))->fn().
     *
     * @param string|DateTimeInterface|null $time
     * @param DateTimeZone|string|null      $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'rawParse',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6473724037b0251023081660b5dcedda' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Call native PHP DateTime/DateTimeImmutable sub() method.
     *
     * @param DateInterval $interval
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'rawSub',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '05199fafbfe272e550e62a46c72dd68a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Remove all macros and generic macros.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'resetMacros',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4c604f8820f686a6941ecfcf06e1268e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Reset the month overflow behavior.
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'resetMonthsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '61545b1bb09f36a3cdd9441f8bb33336' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Reset the format used to the default when type juggling a Carbon instance to a string
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'resetToStringFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9d049efff6d42df67689eed8dae7b577' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Reset the month overflow behavior.
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'resetYearsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f4ee990a1b973ff20c698719ab7fd516' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     * @param string                              $function
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'round',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '129f3825735c4f6c301283efa89356c9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance at the given unit with given precision if specified and the given function.
     *
     * @param string    $unit
     * @param float|int $precision
     * @param string    $function
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'roundUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd2fc59ccfe872c1a3560be277d31d8eb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'roundWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b7dcf76e18b866160459856d3bf41d10' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The number of seconds since midnight.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'secondsSinceMidnight',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd4a626326dc60844d3bf1b079ab8ccb2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The number of seconds until 23:59:59.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'secondsUntilEndOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1bed5932eb1f76a1fa5f72bc1464bc69' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a serialized string of the instance.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'serialize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f7591a1b90e25961bb0c38b2bf1bb9d9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather transform Carbon object before the serialization.
     *
     * JSON serialize all Carbon instances using the given callback.
     *
     * @param callable $callback
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'serializeUsing',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ef95ce9cf3e3fe18a136a0f7517d168c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a part of the Carbon object
     *
     * @param string|array            $name
     * @param string|int|DateTimeZone $value
     *
     * @throws ImmutableException|UnknownSetterException
     *
     * @return $this
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'set',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aff70f2683552aaf3cd53e6e6c9d854c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date with gregorian year, month and day numbers.
     *
     * @see https://php.net/manual/en/datetime.setdate.php
     *
     * @param int $year
     * @param int $month
     * @param int $day
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e2b7ec5c18053e2b22a98c28c14e9f7f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the year, month, and date for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date now if null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setDateFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0939cb2357bca2ca71359f9cfdf8ac91' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date and time all together.
     *
     * @param int $year
     * @param int $month
     * @param int $day
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microseconds
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd63838c98b43a8de5fa2957b31e2c135' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date and time for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setDateTimeFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '68b4cf762b1dadf50d9d5c7ae218c035' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the fallback locale.
     *
     * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
     *
     * @param string $locale
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setFallbackLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b287b2f17e1491770562dcd88894d9c3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOptions
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setHumanDiffOptions',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '423b86dab005e7446456fd682861fe56' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.
     *
     * @see https://php.net/manual/en/datetime.setisodate.php
     *
     * @param int $year
     * @param int $week
     * @param int $day
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setISODate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '60c1b016ac5870a886d26805cee25a71' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the translator for the current instance.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return $this
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '97278912bd7f36d4a3e52534b9d4687e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the current translator locale and indicate if the source locale file exists.
     * Pass \'auto\' as locale to use closest language from the current LC_TIME locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '72535051c49b2d05f00f57977d175547' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather consider mid-day is always 12pm, then if you need to test if it\'s an other
     *             hour, test it explicitly:
     *                 $date->format(\'G\') == 13
     *             or to set explicitly to a given hour:
     *                 $date->setTime(13, 0, 0, 0)
     *
     * Set midday/noon hour
     *
     * @param int $hour midday hour
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setMidDayAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3a62cadbf0d934a140fd36f41359cbb5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a Carbon instance (real or mock) to be returned when a "now"
     * instance is created.  The provided instance will be returned
     * specifically under the following conditions:
     *   - A call to the static now() method, ex. Carbon::now()
     *   - When a null (or blank string) is passed to the constructor or parse(), ex. new Carbon(null)
     *   - When the string "now" is passed to the constructor or parse(), ex. new Carbon(\'now\')
     *   - When a string containing the desired time is passed to Carbon::parse().
     *
     * Note the timezone parameter was left out of the examples above and
     * has no affect as the mock value will be returned regardless of its value.
     *
     * To clear the test instance call this method using the default
     * parameter of null.
     *
     * /!\\ Use this method for unit tests only.
     *
     * @param Closure|static|string|false|null $testNow real or mock Carbon instance
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '14f524a04f2e08347ff4dd09cf753087' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the current time of the DateTime object to a different time.
     *
     * @see https://php.net/manual/en/datetime.settime.php
     *
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microseconds
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '06258f89b091646c55c3fb0555e821fd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the hour, minute, second and microseconds for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date now if null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setTimeFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '012767eaf1765cd78a9ee1f60d603046' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the time by time string.
     *
     * @param string $time
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setTimeFromTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '507b63e9417aacdcedd3e02f856c6b1a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timestamp.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $unixTimestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4b7e8e21db75b2c088e4a20076c71ee7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone from a string or object.
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e83c0ce8be3a0458434ee9d0faf1b33b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather let Carbon object being casted to string with DEFAULT_TO_STRING_FORMAT, and
     *             use other method or custom format passed to format() method if you need to dump an other string
     *             format.
     *
     * Set the default format used when type juggling a Carbon instance to a string
     *
     * @param string|Closure|null $format
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setToStringFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5119734096307792222a406beaa77ac2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the default translator instance to use.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a5225b228d015f57170a4e01f19c6ad4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set specified unit to new given value.
     *
     * @param string $unit  year, month, day, hour, minute, second or microsecond
     * @param int    $value new value for given unit
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da73b69254d708120843afa6b2fae5d4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        new value for the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3f9a76d1c559d7ee4e543166d362cbff' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use UTF-8 language packages on every machine.
     *
     * Set if UTF8 will be used for localized date/time.
     *
     * @param bool $utf8
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setUtf8',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1ea056c9d81188cc40ed2d2f5f0f3846' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             Use $weekStartsAt optional parameter instead when using startOfWeek, floorWeek, ceilWeek
     *             or roundWeek method. You can also use the \'first_day_of_week\' locale setting to change the
     *             start of week according to current locale selected and implicitly the end of week.
     *
     * Set the last day of week
     *
     * @param int|string $day week end day (or \'auto\' to get the day before the first day of week
     *                        from Carbon::getLocale() culture).
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setWeekEndsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7ac2a01c905d37e4d816894c8567e2d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             Use $weekEndsAt optional parameter instead when using endOfWeek method. You can also use the
     *             \'first_day_of_week\' locale setting to change the start of week according to current locale
     *             selected and implicitly the end of week.
     *
     * Set the first day of week
     *
     * @param int|string $day week start day (or \'auto\' to get the first day of week from Carbon::getLocale() culture).
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setWeekStartsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cc3d98590832e9f2e15c8c36307e592c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather consider week-end is always saturday and sunday, and if you have some custom
     *             week-end days to handle, give to those days an other name and create a macro for them:
     *
     *             ```
     *             Carbon::macro(\'isDayOff\', function ($date) {
     *                 return $date->isSunday() || $date->isMonday();
     *             });
     *             Carbon::macro(\'isNotDayOff\', function ($date) {
     *                 return !$date->isDayOff();
     *             });
     *             if ($someDate->isDayOff()) ...
     *             if ($someDate->isNotDayOff()) ...
     *             // Add 5 not-off days
     *             $count = 5;
     *             while ($someDate->isDayOff() || ($count-- > 0)) {
     *                 $someDate->addDay();
     *             }
     *             ```
     *
     * Set weekend days
     *
     * @param array $days
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'setWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '699b597ae09c7af30f1afe842b873536' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set specific options.
     *  - strictMode: true|false|null
     *  - monthOverflow: true|false|null
     *  - yearOverflow: true|false|null
     *  - humanDiffOptions: int|null
     *  - toStringFormat: string|Closure|null
     *  - toJsonFormat: string|Closure|null
     *  - locale: string|null
     *  - timezone: \\DateTimeZone|string|int|null
     *  - macros: array|null
     *  - genericMacros: array|null
     *
     * @param array $settings
     *
     * @return $this|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'settings',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3138842cfab79901da1c437473bea5b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone from a string or object and add/subtract the offset difference.
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'shiftTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '88a556808038051f48ff78c3aa2106e3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the month overflow global behavior (can be overridden in specific instances).
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'shouldOverflowMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '691124667e7a2d986339a181b2e636ae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the month overflow global behavior (can be overridden in specific instances).
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'shouldOverflowYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6666abb520cb0ea70e027d1b45b3d7cc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias diffForHumans
     *
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'since',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e0a8a6ad285c6a23b0b60ec42a69b6f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns standardized singular of a given singular/plural unit name (in English).
     *
     * @param string $unit
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'singularUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '65302e2d7ba11cf174de7365e34010f1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current given unit.
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOf(\'month\')
     *   ->endOf(\'week\', Carbon::FRIDAY);
     * ```
     *
     * @param string            $unit
     * @param array<int, mixed> $params
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '20cceba6a173e094d80bb67722b5bc98' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the century and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfCentury();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfCentury',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cb8387339634c13c61f618bbbb4ac7f0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the time to 00:00:00 start of day
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfDay();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '913232155e86176f8eb8454adc84dba0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the decade and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfDecade();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfDecade',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '86d7ce264be1dbab2a4cf0a3150f7363' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current hour, minutes and seconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfHour();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfHour',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e0b026a0eb356ae32872c562e5fed60b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the millennium and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMillennium();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfMillennium',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1d3b72264c0a9bdcb581211fd5375d31' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current minute, seconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMinute();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfMinute',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'be5bfc2b79132fa0c621af929ce1f13c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the month and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMonth();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2f2b2a4f570e7561ce8c913159a1d15d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the quarter and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfQuarter();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7bbcfc1c98399631dba8c48c18f04291' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current second, microseconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOfSecond()
     *   ->format(\'H:i:s.u\');
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfSecond',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7ae368a8b38557c36c1fa22614f88caa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of week (defined in $weekStartsAt) and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->locale(\'ar\')->startOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfWeek(Carbon::SUNDAY) . "\\n";
     * ```
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '13679fd8bcd476482b3e9d542136c7b4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the year and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfYear();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'startOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bf92d4b82deb923395c82e327dce77be' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units or interval to the current instance.
     *
     * @example $date->sub(\'hour\', 3)
     * @example $date->sub(15, \'days\')
     * @example $date->sub(CarbonInterval::days(4))
     *
     * @param string|DateInterval|Closure|CarbonConverterInterface $unit
     * @param int                                                  $value
     * @param bool|null                                            $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'sub',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e0765319b0df7675b80a1f65b7955a11' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units to the current instance.
     *
     * @param string    $unit
     * @param int       $value
     * @param bool|null $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'subUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8fbd7cae98e244912e59a5995585db32' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        amount to subtract to the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'subUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b598b21b532eeb64c7e7e8485e9ffcb2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units or interval to the current instance.
     *
     * @see sub()
     *
     * @param string|DateInterval $unit
     * @param int                 $value
     * @param bool|null           $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'subtract',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '703c91327df4d977f02d84ba9127ca43' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'timespan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '168aa547289a326eb0ee1352833dd3b9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timestamp.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $unixTimestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'timestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '64ae30829bb3152783b5aa1b60093173' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias setTimezone
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'timezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1f46628834841daee0361b288bb4eaf2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given (or now if null given) to current instance.
     *
     * When comparing a value in the past to default now:
     * 1 hour from now
     * 5 months from now
     *
     * When comparing a value in the future to default now:
     * 1 hour ago
     * 5 months ago
     *
     * When comparing a value in the past to another value:
     * 1 hour after
     * 5 months after
     *
     * When comparing a value in the future to another value:
     * 1 hour before
     * 5 months before
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'to',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a30bfee7e869ad8ccceae7bc560ee5d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get default array representation.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toArray());
     * ```
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toArray',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7fc256b1408137afd83ca4c58a4280ea' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as ATOM
     *
     * @example
     * ```
     * echo Carbon::now()->toAtomString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toAtomString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1a9c4af2cc99f67a9deb4c4a532816b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as COOKIE
     *
     * @example
     * ```
     * echo Carbon::now()->toCookieString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toCookieString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9511a432f6c21c247c9d8f9cc5275236' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias toDateTime
     *
     * Return native DateTime PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDate());
     * ```
     *
     * @return DateTime
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ebcdeafd70c3d24addfb906e0f508a53' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date
     *
     * @example
     * ```
     * echo Carbon::now()->toDateString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toDateString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f0262f3204173956cef8d0dbc6676eb0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return native DateTime PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDateTime());
     * ```
     *
     * @return DateTime
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9265d886eead8c335f891f63fd19fd88' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return native toDateTimeImmutable PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDateTimeImmutable());
     * ```
     *
     * @return DateTimeImmutable
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toDateTimeImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4f6a61dc73157348e0e073ce3bf5d736' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date and time T-separated with no timezone
     *
     * @example
     * ```
     * echo Carbon::now()->toDateTimeLocalString();
     * echo "\\n";
     * echo Carbon::now()->toDateTimeLocalString(\'minute\'); // You can specify precision among: minute, second, millisecond and microsecond
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toDateTimeLocalString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a519ca593ff697ac6bb0cf183f0bd2b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date and time
     *
     * @example
     * ```
     * echo Carbon::now()->toDateTimeString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toDateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e43efd7b572474a9ff840f607d9b36d1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance with day, date and time
     *
     * @example
     * ```
     * echo Carbon::now()->toDayDateTimeString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toDayDateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '236f63517b500f1f880bf4a33234c376' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as a readable date
     *
     * @example
     * ```
     * echo Carbon::now()->toFormattedDateString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toFormattedDateString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd17166386cfed713acf12a3b51391829' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z, if $keepOffset truthy, offset will be kept:
     * 1977-04-22T01:00:00-05:00).
     *
     * @example
     * ```
     * echo Carbon::now(\'America/Toronto\')->toISOString() . "\\n";
     * echo Carbon::now(\'America/Toronto\')->toISOString(true) . "\\n";
     * ```
     *
     * @param bool $keepOffset Pass true to keep the date offset. Else forced to UTC.
     *
     * @return null|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toISOString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '53609e61c224562a3526eed9f69e9e48' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a immutable copy of the instance.
     *
     * @return CarbonImmutable
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0ca7e70f95b1e8ab4d82e5ae795d68b2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as ISO8601
     *
     * @example
     * ```
     * echo Carbon::now()->toIso8601String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toIso8601String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '70d237e8a7272521814d96581c90b1a3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Convert the instance to UTC and return as Zulu ISO8601
     *
     * @example
     * ```
     * echo Carbon::now()->toIso8601ZuluString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toIso8601ZuluString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bad4c30c9bf4356ad37e00d5ddd8c468' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z) with UTC timezone.
     *
     * @example
     * ```
     * echo Carbon::now(\'America/Toronto\')->toJSON();
     * ```
     *
     * @return null|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toJSON',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1b4fedc94e5460019976db592f5ca4b8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a mutable copy of the instance.
     *
     * @return Carbon
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '129f7e384295188f2254b7c45fd8163c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given to now
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single part)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f9adf7ff2968df9c7d3117d59719879b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get default object representation.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toObject());
     * ```
     *
     * @return object
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toObject',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e17fcb7e12d788c19f19cbfbcc69239' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
     *
     * @param \\DateTimeInterface|Carbon|CarbonImmutable|int|null $end      period end date or recurrences count if int
     * @param int|\\DateInterval|string|null                      $interval period default interval or number of the given $unit
     * @param string|null                                        $unit     if specified, $interval must be an integer
     *
     * @return CarbonPeriod
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toPeriod',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bbd865f6c26f850d28e9eaf713d02700' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC1036
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc1036String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toRfc1036String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '54c87b839c1cee56852e5c0e550835e4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC1123
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc1123String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toRfc1123String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ceba2479d48716c5f58ab0172895a187' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC2822
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc2822String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toRfc2822String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0f248e58d7dce9f6d977fb11055705bc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC3339
     *
     * @param bool $extended
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc3339String() . "\\n";
     * echo Carbon::now()->toRfc3339String(true) . "\\n";
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toRfc3339String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4d975cd413d7c95c0e5b4a02b30a3159' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC7231
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc7231String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toRfc7231String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '402960b8142cbb57d519454ec0759cba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC822
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc822String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toRfc822String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ca5915138b82fb679453456c1e6f839a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC850
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc850String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toRfc850String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5acfbf1148cf034389fc6152ba552041' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RSS
     *
     * @example
     * ```
     * echo Carbon::now()->toRssString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toRssString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7970cdd07c7b39fac9e5e2b7abefdd83' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns english human readable complete date string.
     *
     * @example
     * ```
     * echo Carbon::now()->toString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2b5f3f70a1b3071f1d68a8e7e8758938' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as time
     *
     * @example
     * ```
     * echo Carbon::now()->toTimeString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd43b9a257c6bd8a45e91ccbe1fa260dc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as W3C
     *
     * @example
     * ```
     * echo Carbon::now()->toW3cString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'toW3cString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2e0d6dbdbbf34eab6925eb9da9216898' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for today.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'today',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cc6550bb598e0dbb47b09f8dc38d6794' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for tomorrow.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'tomorrow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3b766469147a1ebd0c6a130b75a657e3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate using translation string or callback available.
     *
     * @param string                                             $key
     * @param array                                              $parameters
     * @param null                                               $number
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'translate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4c667095b4e55cc75ebc687f033a4fe9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the alternative number for a given integer if available in the current locale.
     *
     * @param int $number
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'translateNumber',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a24fb02d84d9697e26c77c36d20af06c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a time string from a locale to an other.
     *
     * @param string      $timeString date/time/duration string to translate (may also contain English)
     * @param string|null $from       input locale of the $timeString parameter (`Carbon::getLocale()` by default)
     * @param string|null $to         output locale of the result returned (`"en"` by default)
     * @param int         $mode       specify what to translate with options:
     *                                - self::TRANSLATE_ALL (default)
     *                                - CarbonInterface::TRANSLATE_MONTHS
     *                                - CarbonInterface::TRANSLATE_DAYS
     *                                - CarbonInterface::TRANSLATE_UNITS
     *                                - CarbonInterface::TRANSLATE_MERIDIEM
     *                                You can use pipe to group: CarbonInterface::TRANSLATE_MONTHS | CarbonInterface::TRANSLATE_DAYS
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'translateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd63a1e42240dc4e7e1b0c290b824ab34' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a time string from the current locale (`$date->locale()`) to an other.
     *
     * @param string      $timeString time string to translate
     * @param string|null $to         output locale of the result returned ("en" by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'translateTimeStringTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ce254bd4158be06cad07fac8d762fcf1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate using translation string or callback available.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     * @param string                                             $key
     * @param array                                              $parameters
     * @param null                                               $number
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'translateWith',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '390255fed73fc364cc0c9716e59fc501' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format as ->format() do (using date replacements patterns from http://php.net/manual/fr/function.date.php)
     * but translate words whenever possible (months, day names, etc.) using the current locale.
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'translatedFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1bcbf9be53e7058beb7281ebac60073d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the timezone or returns the timezone name if no arguments passed.
     *
     * @param DateTimeZone|string $value
     *
     * @return static|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'tz',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cb69b7b4e657fffb75ab242a212d29e8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias getTimestamp
     *
     * Returns the UNIX timestamp for the current date.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'unix',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '232cc0702273632a937cc8319a9fedd3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias to
     *
     * Get the difference in a human readable format in the current locale from an other
     * instance given (or now if null given) to current instance.
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'until',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7fb3a3bc640085e46f6ea2ccaf32c94a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Indicates if months should be calculated with overflow.
     *
     * @param bool $monthsOverflow
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'useMonthsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c6d1326e91435c8a5bed15962f613d7a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * Enable the strict mode (or disable with passing false).
     *
     * @param bool $strictModeEnabled
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'useStrictMode',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3656a6cff0dab7e5a271bf0c31ba38ef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Indicates if years should be calculated with overflow.
     *
     * @param bool $yearsOverflow
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'useYearsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8ceef4ce7527ace98dc293714f1f8bb6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone to UTC.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'utc',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd40a95f1ec4e9b35b4660f055ab3a6e2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the minutes offset to UTC if no arguments passed, else set the timezone with given minutes shift passed.
     *
     * @param int|null $offset
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'utcOffset',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '39dabf8320d764f1c591cf875b9ecbbf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the milliseconds timestamps used amongst other by Date javascript objects.
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'valueOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9cd0c06a3b7ae6377528388c5ea2daac' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the week number using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $week
     * @param int|null $dayOfWeek
     * @param int|null $dayOfYear
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'week',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '90b00cc755647b2f256194590dd574bb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set/get the week number of year using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'weekYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b1e57df4ff5b56cf46145a32774a483f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the weekday from 0 (Sunday) to 6 (Saturday).
     *
     * @param int|null $value new value for weekday if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'weekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'be2e1dbcdb16c7c96764bf3ac027d47e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the number of weeks of the current week-year using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'weeksInYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3669b965d2a66d0ceea9208f80b5ac00' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Temporarily sets a static date to be used within the callback.
     * Using setTestNow to set the date, executing the callback, then
     * clearing the test instance.
     *
     * /!\\ Use this method for unit tests only.
     *
     * @param Closure|static|string|false|null $testNow real or mock Carbon instance
     * @param Closure|null $callback
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'withTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bde20d5cda679336053f514c40ca6805' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for yesterday.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'jsonserializable' => 'JsonSerializable',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonInterface',
         'functionName' => 'yesterday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
  ),
));