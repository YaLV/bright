<?php declare(strict_types = 1);

return PHPStan\Cache\CacheItem::__set_state(array(
   'variableKey' => 'C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\CarbonImmutable.php-1610491687,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Date.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Boundaries.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Comparison.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Converter.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Creator.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Difference.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Macro.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Mixin.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Modifiers.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Mutability.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Cast.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Options.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Localization.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Rounding.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\IntervalRounding.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Serialization.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Test.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Timestamp.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Units.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Week.php-1610491694',
   'data' => 
  array (
    'b0b4344081533efd03d83da1f4dcfb65' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
        ),
         'className' => NULL,
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5c71dd66dc02d495b6c61e1f0092d83e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * A simple API extension for DateTimeImmutable.
 *
 * <autodoc generated by `composer phpdoc`>
 *
 * @property      int                          $year
 * @property      int                          $yearIso
 * @property      int                          $month
 * @property      int                          $day
 * @property      int                          $hour
 * @property      int                          $minute
 * @property      int                          $second
 * @property      int                          $micro
 * @property      int                          $microsecond
 * @property      int|float|string             $timestamp                                                                           seconds since the Unix Epoch
 * @property      string                       $englishDayOfWeek                                                                    the day of week in English
 * @property      string                       $shortEnglishDayOfWeek                                                               the abbreviated day of week in English
 * @property      string                       $englishMonth                                                                        the month in English
 * @property      string                       $shortEnglishMonth                                                                   the abbreviated month in English
 * @property      string                       $localeDayOfWeek                                                                     the day of week in current locale LC_TIME
 * @property      string                       $shortLocaleDayOfWeek                                                                the abbreviated day of week in current locale LC_TIME
 * @property      string                       $localeMonth                                                                         the month in current locale LC_TIME
 * @property      string                       $shortLocaleMonth                                                                    the abbreviated month in current locale LC_TIME
 * @property      int                          $milliseconds
 * @property      int                          $millisecond
 * @property      int                          $milli
 * @property      int                          $week                                                                                1 through 53
 * @property      int                          $isoWeek                                                                             1 through 53
 * @property      int                          $weekYear                                                                            year according to week format
 * @property      int                          $isoWeekYear                                                                         year according to ISO week format
 * @property      int                          $dayOfYear                                                                           1 through 366
 * @property      int                          $age                                                                                 does a diffInYears() with default parameters
 * @property      int                          $offset                                                                              the timezone offset in seconds from UTC
 * @property      int                          $offsetMinutes                                                                       the timezone offset in minutes from UTC
 * @property      int                          $offsetHours                                                                         the timezone offset in hours from UTC
 * @property      CarbonTimeZone               $timezone                                                                            the current timezone
 * @property      CarbonTimeZone               $tz                                                                                  alias of $timezone
 * @property-read int                          $dayOfWeek                                                                           0 (for Sunday) through 6 (for Saturday)
 * @property-read int                          $dayOfWeekIso                                                                        1 (for Monday) through 7 (for Sunday)
 * @property-read int                          $weekOfYear                                                                          ISO-8601 week number of year, weeks starting on Monday
 * @property-read int                          $daysInMonth                                                                         number of days in the given month
 * @property-read string                       $latinMeridiem                                                                       "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
 * @property-read string                       $latinUpperMeridiem                                                                  "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
 * @property-read string                       $timezoneAbbreviatedName                                                             the current timezone abbreviated name
 * @property-read string                       $tzAbbrName                                                                          alias of $timezoneAbbreviatedName
 * @property-read string                       $dayName                                                                             long name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string                       $shortDayName                                                                        short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string                       $minDayName                                                                          very short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string                       $monthName                                                                           long name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string                       $shortMonthName                                                                      short name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string                       $meridiem                                                                            lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read string                       $upperMeridiem                                                                       uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read int                          $noZeroHour                                                                          current hour from 1 to 24
 * @property-read int                          $weeksInYear                                                                         51 through 53
 * @property-read int                          $isoWeeksInYear                                                                      51 through 53
 * @property-read int                          $weekOfMonth                                                                         1 through 5
 * @property-read int                          $weekNumberInMonth                                                                   1 through 5
 * @property-read int                          $firstWeekDay                                                                        0 through 6
 * @property-read int                          $lastWeekDay                                                                         0 through 6
 * @property-read int                          $daysInYear                                                                          365 or 366
 * @property-read int                          $quarter                                                                             the quarter of this instance, 1 - 4
 * @property-read int                          $decade                                                                              the decade of this instance
 * @property-read int                          $century                                                                             the century of this instance
 * @property-read int                          $millennium                                                                          the millennium of this instance
 * @property-read bool                         $dst                                                                                 daylight savings time indicator, true if DST, false otherwise
 * @property-read bool                         $local                                                                               checks if the timezone is local, true if local, false otherwise
 * @property-read bool                         $utc                                                                                 checks if the timezone is UTC, true if UTC, false otherwise
 * @property-read string                       $timezoneName                                                                        the current timezone name
 * @property-read string                       $tzName                                                                              alias of $timezoneName
 * @property-read string                       $locale                                                                              locale of the current instance
 *
 * @method        bool                         isUtc()                                                                              Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
 * @method        bool                         isLocal()                                                                            Check if the current instance has non-UTC timezone.
 * @method        bool                         isValid()                                                                            Check if the current instance is a valid date.
 * @method        bool                         isDST()                                                                              Check if the current instance is in a daylight saving time.
 * @method        bool                         isSunday()                                                                           Checks if the instance day is sunday.
 * @method        bool                         isMonday()                                                                           Checks if the instance day is monday.
 * @method        bool                         isTuesday()                                                                          Checks if the instance day is tuesday.
 * @method        bool                         isWednesday()                                                                        Checks if the instance day is wednesday.
 * @method        bool                         isThursday()                                                                         Checks if the instance day is thursday.
 * @method        bool                         isFriday()                                                                           Checks if the instance day is friday.
 * @method        bool                         isSaturday()                                                                         Checks if the instance day is saturday.
 * @method        bool                         isSameYear(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentYear()                                                                      Checks if the instance is in the same year as the current moment.
 * @method        bool                         isNextYear()                                                                         Checks if the instance is in the same year as the current moment next year.
 * @method        bool                         isLastYear()                                                                         Checks if the instance is in the same year as the current moment last year.
 * @method        bool                         isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentWeek()                                                                      Checks if the instance is in the same week as the current moment.
 * @method        bool                         isNextWeek()                                                                         Checks if the instance is in the same week as the current moment next week.
 * @method        bool                         isLastWeek()                                                                         Checks if the instance is in the same week as the current moment last week.
 * @method        bool                         isSameDay(Carbon|DateTimeInterface|string|null $date = null)                         Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentDay()                                                                       Checks if the instance is in the same day as the current moment.
 * @method        bool                         isNextDay()                                                                          Checks if the instance is in the same day as the current moment next day.
 * @method        bool                         isLastDay()                                                                          Checks if the instance is in the same day as the current moment last day.
 * @method        bool                         isSameHour(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentHour()                                                                      Checks if the instance is in the same hour as the current moment.
 * @method        bool                         isNextHour()                                                                         Checks if the instance is in the same hour as the current moment next hour.
 * @method        bool                         isLastHour()                                                                         Checks if the instance is in the same hour as the current moment last hour.
 * @method        bool                         isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentMinute()                                                                    Checks if the instance is in the same minute as the current moment.
 * @method        bool                         isNextMinute()                                                                       Checks if the instance is in the same minute as the current moment next minute.
 * @method        bool                         isLastMinute()                                                                       Checks if the instance is in the same minute as the current moment last minute.
 * @method        bool                         isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentSecond()                                                                    Checks if the instance is in the same second as the current moment.
 * @method        bool                         isNextSecond()                                                                       Checks if the instance is in the same second as the current moment next second.
 * @method        bool                         isLastSecond()                                                                       Checks if the instance is in the same second as the current moment last second.
 * @method        bool                         isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentMicro()                                                                     Checks if the instance is in the same microsecond as the current moment.
 * @method        bool                         isNextMicro()                                                                        Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool                         isLastMicro()                                                                        Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool                         isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)                 Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentMicrosecond()                                                               Checks if the instance is in the same microsecond as the current moment.
 * @method        bool                         isNextMicrosecond()                                                                  Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool                         isLastMicrosecond()                                                                  Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool                         isCurrentMonth()                                                                     Checks if the instance is in the same month as the current moment.
 * @method        bool                         isNextMonth()                                                                        Checks if the instance is in the same month as the current moment next month.
 * @method        bool                         isLastMonth()                                                                        Checks if the instance is in the same month as the current moment last month.
 * @method        bool                         isCurrentQuarter()                                                                   Checks if the instance is in the same quarter as the current moment.
 * @method        bool                         isNextQuarter()                                                                      Checks if the instance is in the same quarter as the current moment next quarter.
 * @method        bool                         isLastQuarter()                                                                      Checks if the instance is in the same quarter as the current moment last quarter.
 * @method        bool                         isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentDecade()                                                                    Checks if the instance is in the same decade as the current moment.
 * @method        bool                         isNextDecade()                                                                       Checks if the instance is in the same decade as the current moment next decade.
 * @method        bool                         isLastDecade()                                                                       Checks if the instance is in the same decade as the current moment last decade.
 * @method        bool                         isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentCentury()                                                                   Checks if the instance is in the same century as the current moment.
 * @method        bool                         isNextCentury()                                                                      Checks if the instance is in the same century as the current moment next century.
 * @method        bool                         isLastCentury()                                                                      Checks if the instance is in the same century as the current moment last century.
 * @method        bool                         isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                  Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                         isCurrentMillennium()                                                                Checks if the instance is in the same millennium as the current moment.
 * @method        bool                         isNextMillennium()                                                                   Checks if the instance is in the same millennium as the current moment next millennium.
 * @method        bool                         isLastMillennium()                                                                   Checks if the instance is in the same millennium as the current moment last millennium.
 * @method        CarbonImmutable              years(int $value)                                                                    Set current instance year to the given value.
 * @method        CarbonImmutable              year(int $value)                                                                     Set current instance year to the given value.
 * @method        CarbonImmutable              setYears(int $value)                                                                 Set current instance year to the given value.
 * @method        CarbonImmutable              setYear(int $value)                                                                  Set current instance year to the given value.
 * @method        CarbonImmutable              months(int $value)                                                                   Set current instance month to the given value.
 * @method        CarbonImmutable              month(int $value)                                                                    Set current instance month to the given value.
 * @method        CarbonImmutable              setMonths(int $value)                                                                Set current instance month to the given value.
 * @method        CarbonImmutable              setMonth(int $value)                                                                 Set current instance month to the given value.
 * @method        CarbonImmutable              days(int $value)                                                                     Set current instance day to the given value.
 * @method        CarbonImmutable              day(int $value)                                                                      Set current instance day to the given value.
 * @method        CarbonImmutable              setDays(int $value)                                                                  Set current instance day to the given value.
 * @method        CarbonImmutable              setDay(int $value)                                                                   Set current instance day to the given value.
 * @method        CarbonImmutable              hours(int $value)                                                                    Set current instance hour to the given value.
 * @method        CarbonImmutable              hour(int $value)                                                                     Set current instance hour to the given value.
 * @method        CarbonImmutable              setHours(int $value)                                                                 Set current instance hour to the given value.
 * @method        CarbonImmutable              setHour(int $value)                                                                  Set current instance hour to the given value.
 * @method        CarbonImmutable              minutes(int $value)                                                                  Set current instance minute to the given value.
 * @method        CarbonImmutable              minute(int $value)                                                                   Set current instance minute to the given value.
 * @method        CarbonImmutable              setMinutes(int $value)                                                               Set current instance minute to the given value.
 * @method        CarbonImmutable              setMinute(int $value)                                                                Set current instance minute to the given value.
 * @method        CarbonImmutable              seconds(int $value)                                                                  Set current instance second to the given value.
 * @method        CarbonImmutable              second(int $value)                                                                   Set current instance second to the given value.
 * @method        CarbonImmutable              setSeconds(int $value)                                                               Set current instance second to the given value.
 * @method        CarbonImmutable              setSecond(int $value)                                                                Set current instance second to the given value.
 * @method        CarbonImmutable              millis(int $value)                                                                   Set current instance millisecond to the given value.
 * @method        CarbonImmutable              milli(int $value)                                                                    Set current instance millisecond to the given value.
 * @method        CarbonImmutable              setMillis(int $value)                                                                Set current instance millisecond to the given value.
 * @method        CarbonImmutable              setMilli(int $value)                                                                 Set current instance millisecond to the given value.
 * @method        CarbonImmutable              milliseconds(int $value)                                                             Set current instance millisecond to the given value.
 * @method        CarbonImmutable              millisecond(int $value)                                                              Set current instance millisecond to the given value.
 * @method        CarbonImmutable              setMilliseconds(int $value)                                                          Set current instance millisecond to the given value.
 * @method        CarbonImmutable              setMillisecond(int $value)                                                           Set current instance millisecond to the given value.
 * @method        CarbonImmutable              micros(int $value)                                                                   Set current instance microsecond to the given value.
 * @method        CarbonImmutable              micro(int $value)                                                                    Set current instance microsecond to the given value.
 * @method        CarbonImmutable              setMicros(int $value)                                                                Set current instance microsecond to the given value.
 * @method        CarbonImmutable              setMicro(int $value)                                                                 Set current instance microsecond to the given value.
 * @method        CarbonImmutable              microseconds(int $value)                                                             Set current instance microsecond to the given value.
 * @method        CarbonImmutable              microsecond(int $value)                                                              Set current instance microsecond to the given value.
 * @method        CarbonImmutable              setMicroseconds(int $value)                                                          Set current instance microsecond to the given value.
 * @method        CarbonImmutable              setMicrosecond(int $value)                                                           Set current instance microsecond to the given value.
 * @method        CarbonImmutable              addYears(int $value = 1)                                                             Add years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addYear()                                                                            Add one year to the instance (using date interval).
 * @method        CarbonImmutable              subYears(int $value = 1)                                                             Sub years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subYear()                                                                            Sub one year to the instance (using date interval).
 * @method        CarbonImmutable              addYearsWithOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addYearWithOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subYearsWithOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subYearWithOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addYearsWithoutOverflow(int $value = 1)                                              Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addYearWithoutOverflow()                                                             Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subYearsWithoutOverflow(int $value = 1)                                              Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subYearWithoutOverflow()                                                             Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addYearsWithNoOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addYearWithNoOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subYearsWithNoOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subYearWithNoOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addYearsNoOverflow(int $value = 1)                                                   Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addYearNoOverflow()                                                                  Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subYearsNoOverflow(int $value = 1)                                                   Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subYearNoOverflow()                                                                  Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMonths(int $value = 1)                                                            Add months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addMonth()                                                                           Add one month to the instance (using date interval).
 * @method        CarbonImmutable              subMonths(int $value = 1)                                                            Sub months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subMonth()                                                                           Sub one month to the instance (using date interval).
 * @method        CarbonImmutable              addMonthsWithOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addMonthWithOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subMonthsWithOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subMonthWithOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addMonthsWithoutOverflow(int $value = 1)                                             Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMonthWithoutOverflow()                                                            Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMonthsWithoutOverflow(int $value = 1)                                             Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMonthWithoutOverflow()                                                            Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMonthsWithNoOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMonthWithNoOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMonthsWithNoOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMonthWithNoOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMonthsNoOverflow(int $value = 1)                                                  Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMonthNoOverflow()                                                                 Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMonthsNoOverflow(int $value = 1)                                                  Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMonthNoOverflow()                                                                 Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addDays(int $value = 1)                                                              Add days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addDay()                                                                             Add one day to the instance (using date interval).
 * @method        CarbonImmutable              subDays(int $value = 1)                                                              Sub days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subDay()                                                                             Sub one day to the instance (using date interval).
 * @method        CarbonImmutable              addHours(int $value = 1)                                                             Add hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addHour()                                                                            Add one hour to the instance (using date interval).
 * @method        CarbonImmutable              subHours(int $value = 1)                                                             Sub hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subHour()                                                                            Sub one hour to the instance (using date interval).
 * @method        CarbonImmutable              addMinutes(int $value = 1)                                                           Add minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addMinute()                                                                          Add one minute to the instance (using date interval).
 * @method        CarbonImmutable              subMinutes(int $value = 1)                                                           Sub minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subMinute()                                                                          Sub one minute to the instance (using date interval).
 * @method        CarbonImmutable              addSeconds(int $value = 1)                                                           Add seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addSecond()                                                                          Add one second to the instance (using date interval).
 * @method        CarbonImmutable              subSeconds(int $value = 1)                                                           Sub seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subSecond()                                                                          Sub one second to the instance (using date interval).
 * @method        CarbonImmutable              addMillis(int $value = 1)                                                            Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addMilli()                                                                           Add one millisecond to the instance (using date interval).
 * @method        CarbonImmutable              subMillis(int $value = 1)                                                            Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subMilli()                                                                           Sub one millisecond to the instance (using date interval).
 * @method        CarbonImmutable              addMilliseconds(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addMillisecond()                                                                     Add one millisecond to the instance (using date interval).
 * @method        CarbonImmutable              subMilliseconds(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subMillisecond()                                                                     Sub one millisecond to the instance (using date interval).
 * @method        CarbonImmutable              addMicros(int $value = 1)                                                            Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addMicro()                                                                           Add one microsecond to the instance (using date interval).
 * @method        CarbonImmutable              subMicros(int $value = 1)                                                            Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subMicro()                                                                           Sub one microsecond to the instance (using date interval).
 * @method        CarbonImmutable              addMicroseconds(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addMicrosecond()                                                                     Add one microsecond to the instance (using date interval).
 * @method        CarbonImmutable              subMicroseconds(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subMicrosecond()                                                                     Sub one microsecond to the instance (using date interval).
 * @method        CarbonImmutable              addMillennia(int $value = 1)                                                         Add millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addMillennium()                                                                      Add one millennium to the instance (using date interval).
 * @method        CarbonImmutable              subMillennia(int $value = 1)                                                         Sub millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subMillennium()                                                                      Sub one millennium to the instance (using date interval).
 * @method        CarbonImmutable              addMillenniaWithOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addMillenniumWithOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subMillenniaWithOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subMillenniumWithOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addMillenniaWithoutOverflow(int $value = 1)                                          Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMillenniumWithoutOverflow()                                                       Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMillenniaWithoutOverflow(int $value = 1)                                          Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMillenniumWithoutOverflow()                                                       Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMillenniaWithNoOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMillenniumWithNoOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMillenniaWithNoOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMillenniumWithNoOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMillenniaNoOverflow(int $value = 1)                                               Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addMillenniumNoOverflow()                                                            Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMillenniaNoOverflow(int $value = 1)                                               Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subMillenniumNoOverflow()                                                            Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addCenturies(int $value = 1)                                                         Add centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addCentury()                                                                         Add one century to the instance (using date interval).
 * @method        CarbonImmutable              subCenturies(int $value = 1)                                                         Sub centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subCentury()                                                                         Sub one century to the instance (using date interval).
 * @method        CarbonImmutable              addCenturiesWithOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addCenturyWithOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subCenturiesWithOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subCenturyWithOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addCenturiesWithoutOverflow(int $value = 1)                                          Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addCenturyWithoutOverflow()                                                          Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subCenturiesWithoutOverflow(int $value = 1)                                          Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subCenturyWithoutOverflow()                                                          Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addCenturiesWithNoOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addCenturyWithNoOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subCenturiesWithNoOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subCenturyWithNoOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addCenturiesNoOverflow(int $value = 1)                                               Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addCenturyNoOverflow()                                                               Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subCenturiesNoOverflow(int $value = 1)                                               Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subCenturyNoOverflow()                                                               Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addDecades(int $value = 1)                                                           Add decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addDecade()                                                                          Add one decade to the instance (using date interval).
 * @method        CarbonImmutable              subDecades(int $value = 1)                                                           Sub decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subDecade()                                                                          Sub one decade to the instance (using date interval).
 * @method        CarbonImmutable              addDecadesWithOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addDecadeWithOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subDecadesWithOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subDecadeWithOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addDecadesWithoutOverflow(int $value = 1)                                            Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addDecadeWithoutOverflow()                                                           Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subDecadesWithoutOverflow(int $value = 1)                                            Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subDecadeWithoutOverflow()                                                           Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addDecadesWithNoOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addDecadeWithNoOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subDecadesWithNoOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subDecadeWithNoOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addDecadesNoOverflow(int $value = 1)                                                 Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addDecadeNoOverflow()                                                                Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subDecadesNoOverflow(int $value = 1)                                                 Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subDecadeNoOverflow()                                                                Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addQuarters(int $value = 1)                                                          Add quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addQuarter()                                                                         Add one quarter to the instance (using date interval).
 * @method        CarbonImmutable              subQuarters(int $value = 1)                                                          Sub quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subQuarter()                                                                         Sub one quarter to the instance (using date interval).
 * @method        CarbonImmutable              addQuartersWithOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addQuarterWithOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subQuartersWithOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              subQuarterWithOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonImmutable              addQuartersWithoutOverflow(int $value = 1)                                           Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addQuarterWithoutOverflow()                                                          Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subQuartersWithoutOverflow(int $value = 1)                                           Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subQuarterWithoutOverflow()                                                          Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addQuartersWithNoOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addQuarterWithNoOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subQuartersWithNoOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subQuarterWithNoOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addQuartersNoOverflow(int $value = 1)                                                Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addQuarterNoOverflow()                                                               Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subQuartersNoOverflow(int $value = 1)                                                Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              subQuarterNoOverflow()                                                               Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonImmutable              addWeeks(int $value = 1)                                                             Add weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addWeek()                                                                            Add one week to the instance (using date interval).
 * @method        CarbonImmutable              subWeeks(int $value = 1)                                                             Sub weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subWeek()                                                                            Sub one week to the instance (using date interval).
 * @method        CarbonImmutable              addWeekdays(int $value = 1)                                                          Add weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              addWeekday()                                                                         Add one weekday to the instance (using date interval).
 * @method        CarbonImmutable              subWeekdays(int $value = 1)                                                          Sub weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonImmutable              subWeekday()                                                                         Sub one weekday to the instance (using date interval).
 * @method        CarbonImmutable              addRealMicros(int $value = 1)                                                        Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealMicro()                                                                       Add one microsecond to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMicros(int $value = 1)                                                        Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMicro()                                                                       Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod                 microsUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonImmutable              addRealMicroseconds(int $value = 1)                                                  Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealMicrosecond()                                                                 Add one microsecond to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMicroseconds(int $value = 1)                                                  Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMicrosecond()                                                                 Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod                 microsecondsUntil($endDate = null, int $factor = 1)                                  Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonImmutable              addRealMillis(int $value = 1)                                                        Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealMilli()                                                                       Add one millisecond to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMillis(int $value = 1)                                                        Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMilli()                                                                       Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod                 millisUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonImmutable              addRealMilliseconds(int $value = 1)                                                  Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealMillisecond()                                                                 Add one millisecond to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMilliseconds(int $value = 1)                                                  Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMillisecond()                                                                 Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod                 millisecondsUntil($endDate = null, int $factor = 1)                                  Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonImmutable              addRealSeconds(int $value = 1)                                                       Add seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealSecond()                                                                      Add one second to the instance (using timestamp).
 * @method        CarbonImmutable              subRealSeconds(int $value = 1)                                                       Sub seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealSecond()                                                                      Sub one second to the instance (using timestamp).
 * @method        CarbonPeriod                 secondsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
 * @method        CarbonImmutable              addRealMinutes(int $value = 1)                                                       Add minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealMinute()                                                                      Add one minute to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMinutes(int $value = 1)                                                       Sub minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMinute()                                                                      Sub one minute to the instance (using timestamp).
 * @method        CarbonPeriod                 minutesUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
 * @method        CarbonImmutable              addRealHours(int $value = 1)                                                         Add hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealHour()                                                                        Add one hour to the instance (using timestamp).
 * @method        CarbonImmutable              subRealHours(int $value = 1)                                                         Sub hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealHour()                                                                        Sub one hour to the instance (using timestamp).
 * @method        CarbonPeriod                 hoursUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
 * @method        CarbonImmutable              addRealDays(int $value = 1)                                                          Add days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealDay()                                                                         Add one day to the instance (using timestamp).
 * @method        CarbonImmutable              subRealDays(int $value = 1)                                                          Sub days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealDay()                                                                         Sub one day to the instance (using timestamp).
 * @method        CarbonPeriod                 daysUntil($endDate = null, int $factor = 1)                                          Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
 * @method        CarbonImmutable              addRealWeeks(int $value = 1)                                                         Add weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealWeek()                                                                        Add one week to the instance (using timestamp).
 * @method        CarbonImmutable              subRealWeeks(int $value = 1)                                                         Sub weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealWeek()                                                                        Sub one week to the instance (using timestamp).
 * @method        CarbonPeriod                 weeksUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
 * @method        CarbonImmutable              addRealMonths(int $value = 1)                                                        Add months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealMonth()                                                                       Add one month to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMonths(int $value = 1)                                                        Sub months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMonth()                                                                       Sub one month to the instance (using timestamp).
 * @method        CarbonPeriod                 monthsUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
 * @method        CarbonImmutable              addRealQuarters(int $value = 1)                                                      Add quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealQuarter()                                                                     Add one quarter to the instance (using timestamp).
 * @method        CarbonImmutable              subRealQuarters(int $value = 1)                                                      Sub quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealQuarter()                                                                     Sub one quarter to the instance (using timestamp).
 * @method        CarbonPeriod                 quartersUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
 * @method        CarbonImmutable              addRealYears(int $value = 1)                                                         Add years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealYear()                                                                        Add one year to the instance (using timestamp).
 * @method        CarbonImmutable              subRealYears(int $value = 1)                                                         Sub years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealYear()                                                                        Sub one year to the instance (using timestamp).
 * @method        CarbonPeriod                 yearsUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
 * @method        CarbonImmutable              addRealDecades(int $value = 1)                                                       Add decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealDecade()                                                                      Add one decade to the instance (using timestamp).
 * @method        CarbonImmutable              subRealDecades(int $value = 1)                                                       Sub decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealDecade()                                                                      Sub one decade to the instance (using timestamp).
 * @method        CarbonPeriod                 decadesUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
 * @method        CarbonImmutable              addRealCenturies(int $value = 1)                                                     Add centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealCentury()                                                                     Add one century to the instance (using timestamp).
 * @method        CarbonImmutable              subRealCenturies(int $value = 1)                                                     Sub centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealCentury()                                                                     Sub one century to the instance (using timestamp).
 * @method        CarbonPeriod                 centuriesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
 * @method        CarbonImmutable              addRealMillennia(int $value = 1)                                                     Add millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              addRealMillennium()                                                                  Add one millennium to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMillennia(int $value = 1)                                                     Sub millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonImmutable              subRealMillennium()                                                                  Sub one millennium to the instance (using timestamp).
 * @method        CarbonPeriod                 millenniaUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
 * @method        CarbonImmutable              roundYear(float $precision = 1, string $function = "round")                          Round the current instance year with given precision using the given function.
 * @method        CarbonImmutable              roundYears(float $precision = 1, string $function = "round")                         Round the current instance year with given precision using the given function.
 * @method        CarbonImmutable              floorYear(float $precision = 1)                                                      Truncate the current instance year with given precision.
 * @method        CarbonImmutable              floorYears(float $precision = 1)                                                     Truncate the current instance year with given precision.
 * @method        CarbonImmutable              ceilYear(float $precision = 1)                                                       Ceil the current instance year with given precision.
 * @method        CarbonImmutable              ceilYears(float $precision = 1)                                                      Ceil the current instance year with given precision.
 * @method        CarbonImmutable              roundMonth(float $precision = 1, string $function = "round")                         Round the current instance month with given precision using the given function.
 * @method        CarbonImmutable              roundMonths(float $precision = 1, string $function = "round")                        Round the current instance month with given precision using the given function.
 * @method        CarbonImmutable              floorMonth(float $precision = 1)                                                     Truncate the current instance month with given precision.
 * @method        CarbonImmutable              floorMonths(float $precision = 1)                                                    Truncate the current instance month with given precision.
 * @method        CarbonImmutable              ceilMonth(float $precision = 1)                                                      Ceil the current instance month with given precision.
 * @method        CarbonImmutable              ceilMonths(float $precision = 1)                                                     Ceil the current instance month with given precision.
 * @method        CarbonImmutable              roundDay(float $precision = 1, string $function = "round")                           Round the current instance day with given precision using the given function.
 * @method        CarbonImmutable              roundDays(float $precision = 1, string $function = "round")                          Round the current instance day with given precision using the given function.
 * @method        CarbonImmutable              floorDay(float $precision = 1)                                                       Truncate the current instance day with given precision.
 * @method        CarbonImmutable              floorDays(float $precision = 1)                                                      Truncate the current instance day with given precision.
 * @method        CarbonImmutable              ceilDay(float $precision = 1)                                                        Ceil the current instance day with given precision.
 * @method        CarbonImmutable              ceilDays(float $precision = 1)                                                       Ceil the current instance day with given precision.
 * @method        CarbonImmutable              roundHour(float $precision = 1, string $function = "round")                          Round the current instance hour with given precision using the given function.
 * @method        CarbonImmutable              roundHours(float $precision = 1, string $function = "round")                         Round the current instance hour with given precision using the given function.
 * @method        CarbonImmutable              floorHour(float $precision = 1)                                                      Truncate the current instance hour with given precision.
 * @method        CarbonImmutable              floorHours(float $precision = 1)                                                     Truncate the current instance hour with given precision.
 * @method        CarbonImmutable              ceilHour(float $precision = 1)                                                       Ceil the current instance hour with given precision.
 * @method        CarbonImmutable              ceilHours(float $precision = 1)                                                      Ceil the current instance hour with given precision.
 * @method        CarbonImmutable              roundMinute(float $precision = 1, string $function = "round")                        Round the current instance minute with given precision using the given function.
 * @method        CarbonImmutable              roundMinutes(float $precision = 1, string $function = "round")                       Round the current instance minute with given precision using the given function.
 * @method        CarbonImmutable              floorMinute(float $precision = 1)                                                    Truncate the current instance minute with given precision.
 * @method        CarbonImmutable              floorMinutes(float $precision = 1)                                                   Truncate the current instance minute with given precision.
 * @method        CarbonImmutable              ceilMinute(float $precision = 1)                                                     Ceil the current instance minute with given precision.
 * @method        CarbonImmutable              ceilMinutes(float $precision = 1)                                                    Ceil the current instance minute with given precision.
 * @method        CarbonImmutable              roundSecond(float $precision = 1, string $function = "round")                        Round the current instance second with given precision using the given function.
 * @method        CarbonImmutable              roundSeconds(float $precision = 1, string $function = "round")                       Round the current instance second with given precision using the given function.
 * @method        CarbonImmutable              floorSecond(float $precision = 1)                                                    Truncate the current instance second with given precision.
 * @method        CarbonImmutable              floorSeconds(float $precision = 1)                                                   Truncate the current instance second with given precision.
 * @method        CarbonImmutable              ceilSecond(float $precision = 1)                                                     Ceil the current instance second with given precision.
 * @method        CarbonImmutable              ceilSeconds(float $precision = 1)                                                    Ceil the current instance second with given precision.
 * @method        CarbonImmutable              roundMillennium(float $precision = 1, string $function = "round")                    Round the current instance millennium with given precision using the given function.
 * @method        CarbonImmutable              roundMillennia(float $precision = 1, string $function = "round")                     Round the current instance millennium with given precision using the given function.
 * @method        CarbonImmutable              floorMillennium(float $precision = 1)                                                Truncate the current instance millennium with given precision.
 * @method        CarbonImmutable              floorMillennia(float $precision = 1)                                                 Truncate the current instance millennium with given precision.
 * @method        CarbonImmutable              ceilMillennium(float $precision = 1)                                                 Ceil the current instance millennium with given precision.
 * @method        CarbonImmutable              ceilMillennia(float $precision = 1)                                                  Ceil the current instance millennium with given precision.
 * @method        CarbonImmutable              roundCentury(float $precision = 1, string $function = "round")                       Round the current instance century with given precision using the given function.
 * @method        CarbonImmutable              roundCenturies(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
 * @method        CarbonImmutable              floorCentury(float $precision = 1)                                                   Truncate the current instance century with given precision.
 * @method        CarbonImmutable              floorCenturies(float $precision = 1)                                                 Truncate the current instance century with given precision.
 * @method        CarbonImmutable              ceilCentury(float $precision = 1)                                                    Ceil the current instance century with given precision.
 * @method        CarbonImmutable              ceilCenturies(float $precision = 1)                                                  Ceil the current instance century with given precision.
 * @method        CarbonImmutable              roundDecade(float $precision = 1, string $function = "round")                        Round the current instance decade with given precision using the given function.
 * @method        CarbonImmutable              roundDecades(float $precision = 1, string $function = "round")                       Round the current instance decade with given precision using the given function.
 * @method        CarbonImmutable              floorDecade(float $precision = 1)                                                    Truncate the current instance decade with given precision.
 * @method        CarbonImmutable              floorDecades(float $precision = 1)                                                   Truncate the current instance decade with given precision.
 * @method        CarbonImmutable              ceilDecade(float $precision = 1)                                                     Ceil the current instance decade with given precision.
 * @method        CarbonImmutable              ceilDecades(float $precision = 1)                                                    Ceil the current instance decade with given precision.
 * @method        CarbonImmutable              roundQuarter(float $precision = 1, string $function = "round")                       Round the current instance quarter with given precision using the given function.
 * @method        CarbonImmutable              roundQuarters(float $precision = 1, string $function = "round")                      Round the current instance quarter with given precision using the given function.
 * @method        CarbonImmutable              floorQuarter(float $precision = 1)                                                   Truncate the current instance quarter with given precision.
 * @method        CarbonImmutable              floorQuarters(float $precision = 1)                                                  Truncate the current instance quarter with given precision.
 * @method        CarbonImmutable              ceilQuarter(float $precision = 1)                                                    Ceil the current instance quarter with given precision.
 * @method        CarbonImmutable              ceilQuarters(float $precision = 1)                                                   Ceil the current instance quarter with given precision.
 * @method        CarbonImmutable              roundMillisecond(float $precision = 1, string $function = "round")                   Round the current instance millisecond with given precision using the given function.
 * @method        CarbonImmutable              roundMilliseconds(float $precision = 1, string $function = "round")                  Round the current instance millisecond with given precision using the given function.
 * @method        CarbonImmutable              floorMillisecond(float $precision = 1)                                               Truncate the current instance millisecond with given precision.
 * @method        CarbonImmutable              floorMilliseconds(float $precision = 1)                                              Truncate the current instance millisecond with given precision.
 * @method        CarbonImmutable              ceilMillisecond(float $precision = 1)                                                Ceil the current instance millisecond with given precision.
 * @method        CarbonImmutable              ceilMilliseconds(float $precision = 1)                                               Ceil the current instance millisecond with given precision.
 * @method        CarbonImmutable              roundMicrosecond(float $precision = 1, string $function = "round")                   Round the current instance microsecond with given precision using the given function.
 * @method        CarbonImmutable              roundMicroseconds(float $precision = 1, string $function = "round")                  Round the current instance microsecond with given precision using the given function.
 * @method        CarbonImmutable              floorMicrosecond(float $precision = 1)                                               Truncate the current instance microsecond with given precision.
 * @method        CarbonImmutable              floorMicroseconds(float $precision = 1)                                              Truncate the current instance microsecond with given precision.
 * @method        CarbonImmutable              ceilMicrosecond(float $precision = 1)                                                Ceil the current instance microsecond with given precision.
 * @method        CarbonImmutable              ceilMicroseconds(float $precision = 1)                                               Ceil the current instance microsecond with given precision.
 * @method        string                       shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)          Get the difference (short format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string                       longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)           Get the difference (long format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string                       shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)          Get the difference (short format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string                       longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)           Get the difference (long format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string                       shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)     Get the difference (short format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string                       longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)      Get the difference (long format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string                       shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string                       longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        static CarbonImmutable|false createFromFormat(string $format, string $time, string|DateTimeZone $timezone = null) Parse a string into a new CarbonImmutable object according to the specified format.
 * @method        static CarbonImmutable       __set_state(array $array)                                                            https://php.net/manual/en/datetime.set-state.php
 *
 * </autodoc>
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'date' => 'Carbon\\Traits\\Date',
          'datetimeimmutable' => 'DateTimeImmutable',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7b3c765a5ca9f2bd7753079062df0017' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '92ca527a8cd8bbee9e6fe37a47c1c5b2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * A simple API extension for DateTime.
 *
 * <autodoc generated by `composer phpdoc`>
 *
 * @property      int              $year
 * @property      int              $yearIso
 * @property      int              $month
 * @property      int              $day
 * @property      int              $hour
 * @property      int              $minute
 * @property      int              $second
 * @property      int              $micro
 * @property      int              $microsecond
 * @property      int|float|string $timestamp                                                                         seconds since the Unix Epoch
 * @property      string           $englishDayOfWeek                                                                  the day of week in English
 * @property      string           $shortEnglishDayOfWeek                                                             the abbreviated day of week in English
 * @property      string           $englishMonth                                                                      the month in English
 * @property      string           $shortEnglishMonth                                                                 the abbreviated month in English
 * @property      string           $localeDayOfWeek                                                                   the day of week in current locale LC_TIME
 * @property      string           $shortLocaleDayOfWeek                                                              the abbreviated day of week in current locale LC_TIME
 * @property      string           $localeMonth                                                                       the month in current locale LC_TIME
 * @property      string           $shortLocaleMonth                                                                  the abbreviated month in current locale LC_TIME
 * @property      int              $milliseconds
 * @property      int              $millisecond
 * @property      int              $milli
 * @property      int              $week                                                                              1 through 53
 * @property      int              $isoWeek                                                                           1 through 53
 * @property      int              $weekYear                                                                          year according to week format
 * @property      int              $isoWeekYear                                                                       year according to ISO week format
 * @property      int              $dayOfYear                                                                         1 through 366
 * @property      int              $age                                                                               does a diffInYears() with default parameters
 * @property      int              $offset                                                                            the timezone offset in seconds from UTC
 * @property      int              $offsetMinutes                                                                     the timezone offset in minutes from UTC
 * @property      int              $offsetHours                                                                       the timezone offset in hours from UTC
 * @property      CarbonTimeZone   $timezone                                                                          the current timezone
 * @property      CarbonTimeZone   $tz                                                                                alias of $timezone
 * @property-read int              $dayOfWeek                                                                         0 (for Sunday) through 6 (for Saturday)
 * @property-read int              $dayOfWeekIso                                                                      1 (for Monday) through 7 (for Sunday)
 * @property-read int              $weekOfYear                                                                        ISO-8601 week number of year, weeks starting on Monday
 * @property-read int              $daysInMonth                                                                       number of days in the given month
 * @property-read string           $latinMeridiem                                                                     "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
 * @property-read string           $latinUpperMeridiem                                                                "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
 * @property-read string           $timezoneAbbreviatedName                                                           the current timezone abbreviated name
 * @property-read string           $tzAbbrName                                                                        alias of $timezoneAbbreviatedName
 * @property-read string           $dayName                                                                           long name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $shortDayName                                                                      short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $minDayName                                                                        very short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $monthName                                                                         long name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $shortMonthName                                                                    short name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $meridiem                                                                          lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read string           $upperMeridiem                                                                     uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read int              $noZeroHour                                                                        current hour from 1 to 24
 * @property-read int              $weeksInYear                                                                       51 through 53
 * @property-read int              $isoWeeksInYear                                                                    51 through 53
 * @property-read int              $weekOfMonth                                                                       1 through 5
 * @property-read int              $weekNumberInMonth                                                                 1 through 5
 * @property-read int              $firstWeekDay                                                                      0 through 6
 * @property-read int              $lastWeekDay                                                                       0 through 6
 * @property-read int              $daysInYear                                                                        365 or 366
 * @property-read int              $quarter                                                                           the quarter of this instance, 1 - 4
 * @property-read int              $decade                                                                            the decade of this instance
 * @property-read int              $century                                                                           the century of this instance
 * @property-read int              $millennium                                                                        the millennium of this instance
 * @property-read bool             $dst                                                                               daylight savings time indicator, true if DST, false otherwise
 * @property-read bool             $local                                                                             checks if the timezone is local, true if local, false otherwise
 * @property-read bool             $utc                                                                               checks if the timezone is UTC, true if UTC, false otherwise
 * @property-read string           $timezoneName                                                                      the current timezone name
 * @property-read string           $tzName                                                                            alias of $timezoneName
 * @property-read string           $locale                                                                            locale of the current instance
 *
 * @method        bool             isUtc()                                                                            Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
 * @method        bool             isLocal()                                                                          Check if the current instance has non-UTC timezone.
 * @method        bool             isValid()                                                                          Check if the current instance is a valid date.
 * @method        bool             isDST()                                                                            Check if the current instance is in a daylight saving time.
 * @method        bool             isSunday()                                                                         Checks if the instance day is sunday.
 * @method        bool             isMonday()                                                                         Checks if the instance day is monday.
 * @method        bool             isTuesday()                                                                        Checks if the instance day is tuesday.
 * @method        bool             isWednesday()                                                                      Checks if the instance day is wednesday.
 * @method        bool             isThursday()                                                                       Checks if the instance day is thursday.
 * @method        bool             isFriday()                                                                         Checks if the instance day is friday.
 * @method        bool             isSaturday()                                                                       Checks if the instance day is saturday.
 * @method        bool             isSameYear(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentYear()                                                                    Checks if the instance is in the same year as the current moment.
 * @method        bool             isNextYear()                                                                       Checks if the instance is in the same year as the current moment next year.
 * @method        bool             isLastYear()                                                                       Checks if the instance is in the same year as the current moment last year.
 * @method        bool             isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentWeek()                                                                    Checks if the instance is in the same week as the current moment.
 * @method        bool             isNextWeek()                                                                       Checks if the instance is in the same week as the current moment next week.
 * @method        bool             isLastWeek()                                                                       Checks if the instance is in the same week as the current moment last week.
 * @method        bool             isSameDay(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentDay()                                                                     Checks if the instance is in the same day as the current moment.
 * @method        bool             isNextDay()                                                                        Checks if the instance is in the same day as the current moment next day.
 * @method        bool             isLastDay()                                                                        Checks if the instance is in the same day as the current moment last day.
 * @method        bool             isSameHour(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentHour()                                                                    Checks if the instance is in the same hour as the current moment.
 * @method        bool             isNextHour()                                                                       Checks if the instance is in the same hour as the current moment next hour.
 * @method        bool             isLastHour()                                                                       Checks if the instance is in the same hour as the current moment last hour.
 * @method        bool             isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMinute()                                                                  Checks if the instance is in the same minute as the current moment.
 * @method        bool             isNextMinute()                                                                     Checks if the instance is in the same minute as the current moment next minute.
 * @method        bool             isLastMinute()                                                                     Checks if the instance is in the same minute as the current moment last minute.
 * @method        bool             isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentSecond()                                                                  Checks if the instance is in the same second as the current moment.
 * @method        bool             isNextSecond()                                                                     Checks if the instance is in the same second as the current moment next second.
 * @method        bool             isLastSecond()                                                                     Checks if the instance is in the same second as the current moment last second.
 * @method        bool             isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMicro()                                                                   Checks if the instance is in the same microsecond as the current moment.
 * @method        bool             isNextMicro()                                                                      Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool             isLastMicro()                                                                      Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool             isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)               Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMicrosecond()                                                             Checks if the instance is in the same microsecond as the current moment.
 * @method        bool             isNextMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool             isLastMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool             isCurrentMonth()                                                                   Checks if the instance is in the same month as the current moment.
 * @method        bool             isNextMonth()                                                                      Checks if the instance is in the same month as the current moment next month.
 * @method        bool             isLastMonth()                                                                      Checks if the instance is in the same month as the current moment last month.
 * @method        bool             isCurrentQuarter()                                                                 Checks if the instance is in the same quarter as the current moment.
 * @method        bool             isNextQuarter()                                                                    Checks if the instance is in the same quarter as the current moment next quarter.
 * @method        bool             isLastQuarter()                                                                    Checks if the instance is in the same quarter as the current moment last quarter.
 * @method        bool             isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentDecade()                                                                  Checks if the instance is in the same decade as the current moment.
 * @method        bool             isNextDecade()                                                                     Checks if the instance is in the same decade as the current moment next decade.
 * @method        bool             isLastDecade()                                                                     Checks if the instance is in the same decade as the current moment last decade.
 * @method        bool             isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                   Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentCentury()                                                                 Checks if the instance is in the same century as the current moment.
 * @method        bool             isNextCentury()                                                                    Checks if the instance is in the same century as the current moment next century.
 * @method        bool             isLastCentury()                                                                    Checks if the instance is in the same century as the current moment last century.
 * @method        bool             isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMillennium()                                                              Checks if the instance is in the same millennium as the current moment.
 * @method        bool             isNextMillennium()                                                                 Checks if the instance is in the same millennium as the current moment next millennium.
 * @method        bool             isLastMillennium()                                                                 Checks if the instance is in the same millennium as the current moment last millennium.
 * @method        CarbonInterface  years(int $value)                                                                  Set current instance year to the given value.
 * @method        CarbonInterface  year(int $value)                                                                   Set current instance year to the given value.
 * @method        CarbonInterface  setYears(int $value)                                                               Set current instance year to the given value.
 * @method        CarbonInterface  setYear(int $value)                                                                Set current instance year to the given value.
 * @method        CarbonInterface  months(int $value)                                                                 Set current instance month to the given value.
 * @method        CarbonInterface  month(int $value)                                                                  Set current instance month to the given value.
 * @method        CarbonInterface  setMonths(int $value)                                                              Set current instance month to the given value.
 * @method        CarbonInterface  setMonth(int $value)                                                               Set current instance month to the given value.
 * @method        CarbonInterface  days(int $value)                                                                   Set current instance day to the given value.
 * @method        CarbonInterface  day(int $value)                                                                    Set current instance day to the given value.
 * @method        CarbonInterface  setDays(int $value)                                                                Set current instance day to the given value.
 * @method        CarbonInterface  setDay(int $value)                                                                 Set current instance day to the given value.
 * @method        CarbonInterface  hours(int $value)                                                                  Set current instance hour to the given value.
 * @method        CarbonInterface  hour(int $value)                                                                   Set current instance hour to the given value.
 * @method        CarbonInterface  setHours(int $value)                                                               Set current instance hour to the given value.
 * @method        CarbonInterface  setHour(int $value)                                                                Set current instance hour to the given value.
 * @method        CarbonInterface  minutes(int $value)                                                                Set current instance minute to the given value.
 * @method        CarbonInterface  minute(int $value)                                                                 Set current instance minute to the given value.
 * @method        CarbonInterface  setMinutes(int $value)                                                             Set current instance minute to the given value.
 * @method        CarbonInterface  setMinute(int $value)                                                              Set current instance minute to the given value.
 * @method        CarbonInterface  seconds(int $value)                                                                Set current instance second to the given value.
 * @method        CarbonInterface  second(int $value)                                                                 Set current instance second to the given value.
 * @method        CarbonInterface  setSeconds(int $value)                                                             Set current instance second to the given value.
 * @method        CarbonInterface  setSecond(int $value)                                                              Set current instance second to the given value.
 * @method        CarbonInterface  millis(int $value)                                                                 Set current instance millisecond to the given value.
 * @method        CarbonInterface  milli(int $value)                                                                  Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMillis(int $value)                                                              Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMilli(int $value)                                                               Set current instance millisecond to the given value.
 * @method        CarbonInterface  milliseconds(int $value)                                                           Set current instance millisecond to the given value.
 * @method        CarbonInterface  millisecond(int $value)                                                            Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMilliseconds(int $value)                                                        Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMillisecond(int $value)                                                         Set current instance millisecond to the given value.
 * @method        CarbonInterface  micros(int $value)                                                                 Set current instance microsecond to the given value.
 * @method        CarbonInterface  micro(int $value)                                                                  Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicros(int $value)                                                              Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicro(int $value)                                                               Set current instance microsecond to the given value.
 * @method        CarbonInterface  microseconds(int $value)                                                           Set current instance microsecond to the given value.
 * @method        CarbonInterface  microsecond(int $value)                                                            Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicroseconds(int $value)                                                        Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicrosecond(int $value)                                                         Set current instance microsecond to the given value.
 * @method        CarbonInterface  addYears(int $value = 1)                                                           Add years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addYear()                                                                          Add one year to the instance (using date interval).
 * @method        CarbonInterface  subYears(int $value = 1)                                                           Sub years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subYear()                                                                          Sub one year to the instance (using date interval).
 * @method        CarbonInterface  addYearsWithOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addYearWithOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subYearsWithOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subYearWithOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addYearsWithoutOverflow(int $value = 1)                                            Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearWithoutOverflow()                                                           Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsWithoutOverflow(int $value = 1)                                            Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearWithoutOverflow()                                                           Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearsWithNoOverflow(int $value = 1)                                             Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearWithNoOverflow()                                                            Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsWithNoOverflow(int $value = 1)                                             Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearWithNoOverflow()                                                            Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearsNoOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearNoOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsNoOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearNoOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonths(int $value = 1)                                                          Add months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMonth()                                                                         Add one month to the instance (using date interval).
 * @method        CarbonInterface  subMonths(int $value = 1)                                                          Sub months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMonth()                                                                         Sub one month to the instance (using date interval).
 * @method        CarbonInterface  addMonthsWithOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMonthWithOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMonthsWithOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMonthWithOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMonthsWithoutOverflow(int $value = 1)                                           Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthWithoutOverflow()                                                          Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsWithoutOverflow(int $value = 1)                                           Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthWithoutOverflow()                                                          Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthsWithNoOverflow(int $value = 1)                                            Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthWithNoOverflow()                                                           Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsWithNoOverflow(int $value = 1)                                            Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthWithNoOverflow()                                                           Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthsNoOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthNoOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsNoOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthNoOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDays(int $value = 1)                                                            Add days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addDay()                                                                           Add one day to the instance (using date interval).
 * @method        CarbonInterface  subDays(int $value = 1)                                                            Sub days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subDay()                                                                           Sub one day to the instance (using date interval).
 * @method        CarbonInterface  addHours(int $value = 1)                                                           Add hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addHour()                                                                          Add one hour to the instance (using date interval).
 * @method        CarbonInterface  subHours(int $value = 1)                                                           Sub hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subHour()                                                                          Sub one hour to the instance (using date interval).
 * @method        CarbonInterface  addMinutes(int $value = 1)                                                         Add minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMinute()                                                                        Add one minute to the instance (using date interval).
 * @method        CarbonInterface  subMinutes(int $value = 1)                                                         Sub minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMinute()                                                                        Sub one minute to the instance (using date interval).
 * @method        CarbonInterface  addSeconds(int $value = 1)                                                         Add seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addSecond()                                                                        Add one second to the instance (using date interval).
 * @method        CarbonInterface  subSeconds(int $value = 1)                                                         Sub seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subSecond()                                                                        Sub one second to the instance (using date interval).
 * @method        CarbonInterface  addMillis(int $value = 1)                                                          Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMilli()                                                                         Add one millisecond to the instance (using date interval).
 * @method        CarbonInterface  subMillis(int $value = 1)                                                          Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMilli()                                                                         Sub one millisecond to the instance (using date interval).
 * @method        CarbonInterface  addMilliseconds(int $value = 1)                                                    Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMillisecond()                                                                   Add one millisecond to the instance (using date interval).
 * @method        CarbonInterface  subMilliseconds(int $value = 1)                                                    Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMillisecond()                                                                   Sub one millisecond to the instance (using date interval).
 * @method        CarbonInterface  addMicros(int $value = 1)                                                          Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMicro()                                                                         Add one microsecond to the instance (using date interval).
 * @method        CarbonInterface  subMicros(int $value = 1)                                                          Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMicro()                                                                         Sub one microsecond to the instance (using date interval).
 * @method        CarbonInterface  addMicroseconds(int $value = 1)                                                    Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMicrosecond()                                                                   Add one microsecond to the instance (using date interval).
 * @method        CarbonInterface  subMicroseconds(int $value = 1)                                                    Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMicrosecond()                                                                   Sub one microsecond to the instance (using date interval).
 * @method        CarbonInterface  addMillennia(int $value = 1)                                                       Add millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMillennium()                                                                    Add one millennium to the instance (using date interval).
 * @method        CarbonInterface  subMillennia(int $value = 1)                                                       Sub millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMillennium()                                                                    Sub one millennium to the instance (using date interval).
 * @method        CarbonInterface  addMillenniaWithOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMillenniumWithOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMillenniaWithOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMillenniumWithOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMillenniaWithoutOverflow(int $value = 1)                                        Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumWithoutOverflow()                                                     Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaWithoutOverflow(int $value = 1)                                        Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumWithoutOverflow()                                                     Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniaWithNoOverflow(int $value = 1)                                         Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumWithNoOverflow()                                                      Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaWithNoOverflow(int $value = 1)                                         Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumWithNoOverflow()                                                      Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniaNoOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumNoOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaNoOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumNoOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturies(int $value = 1)                                                       Add centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addCentury()                                                                       Add one century to the instance (using date interval).
 * @method        CarbonInterface  subCenturies(int $value = 1)                                                       Sub centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subCentury()                                                                       Sub one century to the instance (using date interval).
 * @method        CarbonInterface  addCenturiesWithOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addCenturyWithOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subCenturiesWithOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subCenturyWithOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addCenturiesWithoutOverflow(int $value = 1)                                        Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyWithoutOverflow()                                                        Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesWithoutOverflow(int $value = 1)                                        Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyWithoutOverflow()                                                        Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturiesWithNoOverflow(int $value = 1)                                         Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyWithNoOverflow()                                                         Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesWithNoOverflow(int $value = 1)                                         Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyWithNoOverflow()                                                         Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturiesNoOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyNoOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesNoOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyNoOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecades(int $value = 1)                                                         Add decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addDecade()                                                                        Add one decade to the instance (using date interval).
 * @method        CarbonInterface  subDecades(int $value = 1)                                                         Sub decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subDecade()                                                                        Sub one decade to the instance (using date interval).
 * @method        CarbonInterface  addDecadesWithOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addDecadeWithOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subDecadesWithOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subDecadeWithOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addDecadesWithoutOverflow(int $value = 1)                                          Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeWithoutOverflow()                                                         Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesWithoutOverflow(int $value = 1)                                          Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeWithoutOverflow()                                                         Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadesWithNoOverflow(int $value = 1)                                           Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeWithNoOverflow()                                                          Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesWithNoOverflow(int $value = 1)                                           Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeWithNoOverflow()                                                          Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadesNoOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeNoOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesNoOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeNoOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarters(int $value = 1)                                                        Add quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addQuarter()                                                                       Add one quarter to the instance (using date interval).
 * @method        CarbonInterface  subQuarters(int $value = 1)                                                        Sub quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subQuarter()                                                                       Sub one quarter to the instance (using date interval).
 * @method        CarbonInterface  addQuartersWithOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addQuarterWithOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subQuartersWithOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subQuarterWithOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addQuartersWithoutOverflow(int $value = 1)                                         Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterWithoutOverflow()                                                        Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersWithoutOverflow(int $value = 1)                                         Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterWithoutOverflow()                                                        Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuartersWithNoOverflow(int $value = 1)                                          Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterWithNoOverflow()                                                         Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersWithNoOverflow(int $value = 1)                                          Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterWithNoOverflow()                                                         Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuartersNoOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterNoOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersNoOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterNoOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addWeeks(int $value = 1)                                                           Add weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addWeek()                                                                          Add one week to the instance (using date interval).
 * @method        CarbonInterface  subWeeks(int $value = 1)                                                           Sub weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subWeek()                                                                          Sub one week to the instance (using date interval).
 * @method        CarbonInterface  addWeekdays(int $value = 1)                                                        Add weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addWeekday()                                                                       Add one weekday to the instance (using date interval).
 * @method        CarbonInterface  subWeekdays(int $value = 1)                                                        Sub weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subWeekday()                                                                       Sub one weekday to the instance (using date interval).
 * @method        CarbonInterface  addRealMicros(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMicro()                                                                     Add one microsecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicros(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicro()                                                                     Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod     microsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonInterface  addRealMicroseconds(int $value = 1)                                                Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMicrosecond()                                                               Add one microsecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicroseconds(int $value = 1)                                                Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicrosecond()                                                               Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod     microsecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonInterface  addRealMillis(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMilli()                                                                     Add one millisecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillis(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMilli()                                                                     Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod     millisUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonInterface  addRealMilliseconds(int $value = 1)                                                Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMillisecond()                                                               Add one millisecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMilliseconds(int $value = 1)                                                Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillisecond()                                                               Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod     millisecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonInterface  addRealSeconds(int $value = 1)                                                     Add seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealSecond()                                                                    Add one second to the instance (using timestamp).
 * @method        CarbonInterface  subRealSeconds(int $value = 1)                                                     Sub seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealSecond()                                                                    Sub one second to the instance (using timestamp).
 * @method        CarbonPeriod     secondsUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
 * @method        CarbonInterface  addRealMinutes(int $value = 1)                                                     Add minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMinute()                                                                    Add one minute to the instance (using timestamp).
 * @method        CarbonInterface  subRealMinutes(int $value = 1)                                                     Sub minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMinute()                                                                    Sub one minute to the instance (using timestamp).
 * @method        CarbonPeriod     minutesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
 * @method        CarbonInterface  addRealHours(int $value = 1)                                                       Add hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealHour()                                                                      Add one hour to the instance (using timestamp).
 * @method        CarbonInterface  subRealHours(int $value = 1)                                                       Sub hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealHour()                                                                      Sub one hour to the instance (using timestamp).
 * @method        CarbonPeriod     hoursUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
 * @method        CarbonInterface  addRealDays(int $value = 1)                                                        Add days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealDay()                                                                       Add one day to the instance (using timestamp).
 * @method        CarbonInterface  subRealDays(int $value = 1)                                                        Sub days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealDay()                                                                       Sub one day to the instance (using timestamp).
 * @method        CarbonPeriod     daysUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
 * @method        CarbonInterface  addRealWeeks(int $value = 1)                                                       Add weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealWeek()                                                                      Add one week to the instance (using timestamp).
 * @method        CarbonInterface  subRealWeeks(int $value = 1)                                                       Sub weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealWeek()                                                                      Sub one week to the instance (using timestamp).
 * @method        CarbonPeriod     weeksUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
 * @method        CarbonInterface  addRealMonths(int $value = 1)                                                      Add months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMonth()                                                                     Add one month to the instance (using timestamp).
 * @method        CarbonInterface  subRealMonths(int $value = 1)                                                      Sub months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMonth()                                                                     Sub one month to the instance (using timestamp).
 * @method        CarbonPeriod     monthsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
 * @method        CarbonInterface  addRealQuarters(int $value = 1)                                                    Add quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealQuarter()                                                                   Add one quarter to the instance (using timestamp).
 * @method        CarbonInterface  subRealQuarters(int $value = 1)                                                    Sub quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealQuarter()                                                                   Sub one quarter to the instance (using timestamp).
 * @method        CarbonPeriod     quartersUntil($endDate = null, int $factor = 1)                                    Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
 * @method        CarbonInterface  addRealYears(int $value = 1)                                                       Add years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealYear()                                                                      Add one year to the instance (using timestamp).
 * @method        CarbonInterface  subRealYears(int $value = 1)                                                       Sub years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealYear()                                                                      Sub one year to the instance (using timestamp).
 * @method        CarbonPeriod     yearsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
 * @method        CarbonInterface  addRealDecades(int $value = 1)                                                     Add decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealDecade()                                                                    Add one decade to the instance (using timestamp).
 * @method        CarbonInterface  subRealDecades(int $value = 1)                                                     Sub decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealDecade()                                                                    Sub one decade to the instance (using timestamp).
 * @method        CarbonPeriod     decadesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
 * @method        CarbonInterface  addRealCenturies(int $value = 1)                                                   Add centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealCentury()                                                                   Add one century to the instance (using timestamp).
 * @method        CarbonInterface  subRealCenturies(int $value = 1)                                                   Sub centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealCentury()                                                                   Sub one century to the instance (using timestamp).
 * @method        CarbonPeriod     centuriesUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
 * @method        CarbonInterface  addRealMillennia(int $value = 1)                                                   Add millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMillennium()                                                                Add one millennium to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillennia(int $value = 1)                                                   Sub millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillennium()                                                                Sub one millennium to the instance (using timestamp).
 * @method        CarbonPeriod     millenniaUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
 * @method        CarbonInterface  roundYear(float $precision = 1, string $function = "round")                        Round the current instance year with given precision using the given function.
 * @method        CarbonInterface  roundYears(float $precision = 1, string $function = "round")                       Round the current instance year with given precision using the given function.
 * @method        CarbonInterface  floorYear(float $precision = 1)                                                    Truncate the current instance year with given precision.
 * @method        CarbonInterface  floorYears(float $precision = 1)                                                   Truncate the current instance year with given precision.
 * @method        CarbonInterface  ceilYear(float $precision = 1)                                                     Ceil the current instance year with given precision.
 * @method        CarbonInterface  ceilYears(float $precision = 1)                                                    Ceil the current instance year with given precision.
 * @method        CarbonInterface  roundMonth(float $precision = 1, string $function = "round")                       Round the current instance month with given precision using the given function.
 * @method        CarbonInterface  roundMonths(float $precision = 1, string $function = "round")                      Round the current instance month with given precision using the given function.
 * @method        CarbonInterface  floorMonth(float $precision = 1)                                                   Truncate the current instance month with given precision.
 * @method        CarbonInterface  floorMonths(float $precision = 1)                                                  Truncate the current instance month with given precision.
 * @method        CarbonInterface  ceilMonth(float $precision = 1)                                                    Ceil the current instance month with given precision.
 * @method        CarbonInterface  ceilMonths(float $precision = 1)                                                   Ceil the current instance month with given precision.
 * @method        CarbonInterface  roundDay(float $precision = 1, string $function = "round")                         Round the current instance day with given precision using the given function.
 * @method        CarbonInterface  roundDays(float $precision = 1, string $function = "round")                        Round the current instance day with given precision using the given function.
 * @method        CarbonInterface  floorDay(float $precision = 1)                                                     Truncate the current instance day with given precision.
 * @method        CarbonInterface  floorDays(float $precision = 1)                                                    Truncate the current instance day with given precision.
 * @method        CarbonInterface  ceilDay(float $precision = 1)                                                      Ceil the current instance day with given precision.
 * @method        CarbonInterface  ceilDays(float $precision = 1)                                                     Ceil the current instance day with given precision.
 * @method        CarbonInterface  roundHour(float $precision = 1, string $function = "round")                        Round the current instance hour with given precision using the given function.
 * @method        CarbonInterface  roundHours(float $precision = 1, string $function = "round")                       Round the current instance hour with given precision using the given function.
 * @method        CarbonInterface  floorHour(float $precision = 1)                                                    Truncate the current instance hour with given precision.
 * @method        CarbonInterface  floorHours(float $precision = 1)                                                   Truncate the current instance hour with given precision.
 * @method        CarbonInterface  ceilHour(float $precision = 1)                                                     Ceil the current instance hour with given precision.
 * @method        CarbonInterface  ceilHours(float $precision = 1)                                                    Ceil the current instance hour with given precision.
 * @method        CarbonInterface  roundMinute(float $precision = 1, string $function = "round")                      Round the current instance minute with given precision using the given function.
 * @method        CarbonInterface  roundMinutes(float $precision = 1, string $function = "round")                     Round the current instance minute with given precision using the given function.
 * @method        CarbonInterface  floorMinute(float $precision = 1)                                                  Truncate the current instance minute with given precision.
 * @method        CarbonInterface  floorMinutes(float $precision = 1)                                                 Truncate the current instance minute with given precision.
 * @method        CarbonInterface  ceilMinute(float $precision = 1)                                                   Ceil the current instance minute with given precision.
 * @method        CarbonInterface  ceilMinutes(float $precision = 1)                                                  Ceil the current instance minute with given precision.
 * @method        CarbonInterface  roundSecond(float $precision = 1, string $function = "round")                      Round the current instance second with given precision using the given function.
 * @method        CarbonInterface  roundSeconds(float $precision = 1, string $function = "round")                     Round the current instance second with given precision using the given function.
 * @method        CarbonInterface  floorSecond(float $precision = 1)                                                  Truncate the current instance second with given precision.
 * @method        CarbonInterface  floorSeconds(float $precision = 1)                                                 Truncate the current instance second with given precision.
 * @method        CarbonInterface  ceilSecond(float $precision = 1)                                                   Ceil the current instance second with given precision.
 * @method        CarbonInterface  ceilSeconds(float $precision = 1)                                                  Ceil the current instance second with given precision.
 * @method        CarbonInterface  roundMillennium(float $precision = 1, string $function = "round")                  Round the current instance millennium with given precision using the given function.
 * @method        CarbonInterface  roundMillennia(float $precision = 1, string $function = "round")                   Round the current instance millennium with given precision using the given function.
 * @method        CarbonInterface  floorMillennium(float $precision = 1)                                              Truncate the current instance millennium with given precision.
 * @method        CarbonInterface  floorMillennia(float $precision = 1)                                               Truncate the current instance millennium with given precision.
 * @method        CarbonInterface  ceilMillennium(float $precision = 1)                                               Ceil the current instance millennium with given precision.
 * @method        CarbonInterface  ceilMillennia(float $precision = 1)                                                Ceil the current instance millennium with given precision.
 * @method        CarbonInterface  roundCentury(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
 * @method        CarbonInterface  roundCenturies(float $precision = 1, string $function = "round")                   Round the current instance century with given precision using the given function.
 * @method        CarbonInterface  floorCentury(float $precision = 1)                                                 Truncate the current instance century with given precision.
 * @method        CarbonInterface  floorCenturies(float $precision = 1)                                               Truncate the current instance century with given precision.
 * @method        CarbonInterface  ceilCentury(float $precision = 1)                                                  Ceil the current instance century with given precision.
 * @method        CarbonInterface  ceilCenturies(float $precision = 1)                                                Ceil the current instance century with given precision.
 * @method        CarbonInterface  roundDecade(float $precision = 1, string $function = "round")                      Round the current instance decade with given precision using the given function.
 * @method        CarbonInterface  roundDecades(float $precision = 1, string $function = "round")                     Round the current instance decade with given precision using the given function.
 * @method        CarbonInterface  floorDecade(float $precision = 1)                                                  Truncate the current instance decade with given precision.
 * @method        CarbonInterface  floorDecades(float $precision = 1)                                                 Truncate the current instance decade with given precision.
 * @method        CarbonInterface  ceilDecade(float $precision = 1)                                                   Ceil the current instance decade with given precision.
 * @method        CarbonInterface  ceilDecades(float $precision = 1)                                                  Ceil the current instance decade with given precision.
 * @method        CarbonInterface  roundQuarter(float $precision = 1, string $function = "round")                     Round the current instance quarter with given precision using the given function.
 * @method        CarbonInterface  roundQuarters(float $precision = 1, string $function = "round")                    Round the current instance quarter with given precision using the given function.
 * @method        CarbonInterface  floorQuarter(float $precision = 1)                                                 Truncate the current instance quarter with given precision.
 * @method        CarbonInterface  floorQuarters(float $precision = 1)                                                Truncate the current instance quarter with given precision.
 * @method        CarbonInterface  ceilQuarter(float $precision = 1)                                                  Ceil the current instance quarter with given precision.
 * @method        CarbonInterface  ceilQuarters(float $precision = 1)                                                 Ceil the current instance quarter with given precision.
 * @method        CarbonInterface  roundMillisecond(float $precision = 1, string $function = "round")                 Round the current instance millisecond with given precision using the given function.
 * @method        CarbonInterface  roundMilliseconds(float $precision = 1, string $function = "round")                Round the current instance millisecond with given precision using the given function.
 * @method        CarbonInterface  floorMillisecond(float $precision = 1)                                             Truncate the current instance millisecond with given precision.
 * @method        CarbonInterface  floorMilliseconds(float $precision = 1)                                            Truncate the current instance millisecond with given precision.
 * @method        CarbonInterface  ceilMillisecond(float $precision = 1)                                              Ceil the current instance millisecond with given precision.
 * @method        CarbonInterface  ceilMilliseconds(float $precision = 1)                                             Ceil the current instance millisecond with given precision.
 * @method        CarbonInterface  roundMicrosecond(float $precision = 1, string $function = "round")                 Round the current instance microsecond with given precision using the given function.
 * @method        CarbonInterface  roundMicroseconds(float $precision = 1, string $function = "round")                Round the current instance microsecond with given precision using the given function.
 * @method        CarbonInterface  floorMicrosecond(float $precision = 1)                                             Truncate the current instance microsecond with given precision.
 * @method        CarbonInterface  floorMicroseconds(float $precision = 1)                                            Truncate the current instance microsecond with given precision.
 * @method        CarbonInterface  ceilMicrosecond(float $precision = 1)                                              Ceil the current instance microsecond with given precision.
 * @method        CarbonInterface  ceilMicroseconds(float $precision = 1)                                             Ceil the current instance microsecond with given precision.
 * @method        string           shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1) Get the difference (short format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)  Get the difference (long format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 *
 * </autodoc>
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0ba3e3a013aa277a8c876084a35e5498' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '92ac4dceb22ae80e4ec1d078d9469aa8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Boundaries.
 *
 * startOf, endOf and derived method for each unit.
 *
 * Depends on the following properties:
 *
 * @property int $year
 * @property int $month
 * @property int $daysInMonth
 * @property int $quarter
 *
 * Depends on the following methods:
 *
 * @method $this setTime(int $hour, int $minute, int $second = 0, int $microseconds = 0)
 * @method $this setDate(int $year, int $month, int $day)
 * @method $this addMonths(int $value = 1)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7ff23df1e9c9f28cc5a2956f982a3039' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the time to 00:00:00 start of day
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfDay();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5fb35d8791a75978fe100155d65c2b4e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the time to 23:59:59.999999 end of day
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfDay();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5ee33acb8c681ee0e484fbed570d872e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the month and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMonth();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aefca52494aec8832592066bf67ee72d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the month and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMonth();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8803e11ec66d8e9dccb8ce7828ffecb9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the quarter and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfQuarter();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '099beae6f339e9e160e09d7d588159dd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the quarter and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfQuarter();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a5aa0f1becade2a298a4930c8519e619' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the year and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfYear();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0149dbfde7604cdd21b1d8faa4187b9f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the year and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfYear();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd0d4c7a2e2f3a4c93470b49aec7712aa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the decade and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfDecade();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfDecade',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2152315c294231e2600ac6beb60ce742' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the decade and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfDecade();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfDecade',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1999bae64bdc64391c56f12dfc3f2112' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the century and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfCentury();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfCentury',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a43c71edbf37c372e8fe1fdbd2622cd4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the century and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfCentury();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfCentury',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b1b3ff7c21408cd8a80c5bff2d380563' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the millennium and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMillennium();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfMillennium',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c0b30d764286e6935cde243dc0b1e756' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the millennium and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMillennium();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfMillennium',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'afa9fe5d5de569257b6ead4d065b516c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of week (defined in $weekStartsAt) and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->locale(\'ar\')->startOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfWeek(Carbon::SUNDAY) . "\\n";
     * ```
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed4176ccac6df61fb3eefbdabe4fb919' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of week (defined in $weekEndsAt) and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->locale(\'ar\')->endOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfWeek(Carbon::SATURDAY) . "\\n";
     * ```
     *
     * @param int $weekEndsAt optional start allow you to specify the day of week to use to end the week
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'de4767a00dc22db804287c8fef2fc629' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current hour, minutes and seconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfHour();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfHour',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '80a6a61844a7dc68fd1daab75c842380' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current hour, minutes and seconds become 59
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfHour();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfHour',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '801e187b424d09f619e0c7f0bb3db750' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current minute, seconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMinute();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfMinute',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6ab322448575a309428bf7ec1130ff53' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current minute, seconds become 59
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMinute();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfMinute',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '179e297d91e9da91b71e59a7c9ec00de' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current second, microseconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOfSecond()
     *   ->format(\'H:i:s.u\');
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOfSecond',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2fcba56aa036bfc11ed9e1510643d3a0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current second, microseconds become 999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->endOfSecond()
     *   ->format(\'H:i:s.u\');
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOfSecond',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd82d336640007931a77cb5b652e32624' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current given unit.
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOf(\'month\')
     *   ->endOf(\'week\', Carbon::FRIDAY);
     * ```
     *
     * @param string            $unit
     * @param array<int, mixed> $params
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'startOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3e8974a9d686921ac853e26aaad65c33' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current given unit.
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOf(\'month\')
     *   ->endOf(\'week\', Carbon::FRIDAY);
     * ```
     *
     * @param string            $unit
     * @param array<int, mixed> $params
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'endOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2f5bf23131ffeddf1c350dd33bef986c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '465aa6de9924435c466459a7d37f4803' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Comparison.
 *
 * Comparison utils and testers. All the following methods return booleans.
 * nowWithSameTz
 *
 * Depends on the following methods:
 *
 * @method static        resolveCarbon($date)
 * @method static        copy()
 * @method static        nowWithSameTz()
 * @method static static yesterday($timezone = null)
 * @method static static tomorrow($timezone = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cebe7e02c967fe6465a83ed94f4e1693' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(Carbon::parse(\'2018-07-25 12:45:16\')); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see equalTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'eq',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4e4e9b25d08b733cf389db7c2d45417c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(Carbon::parse(\'2018-07-25 12:45:16\')); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'equalTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b7cef5d0435c4d1fe42d0add7ed46f32' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is not equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(Carbon::parse(\'2018-07-25 12:45:16\')); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see notEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'ne',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e66eed1f01f893b1522b552dbf63ce6e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is not equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(Carbon::parse(\'2018-07-25 12:45:16\')); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'notEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b651238ac968a5b6463909304f4c4768' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'gt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '750dcd0428d0a9d5c505762ca093ca8d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'greaterThan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7b19714d241c9e1558b9ed46dd3b65a7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isAfter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '320688c33dbaf8029307be941ba1bc61' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThanOrEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'gte',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3c947e010ab0adc1062a22318c26789c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'greaterThanOrEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'daa767a7ed71bdbc754c433aaa151c08' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'lt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '77237386901c9742aa1ce20df5b73a0a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'lessThan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3fc314fc05df7fbdd3a12768b4b8a35d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isBefore',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f969f7182b13d597689be82c69d8d529' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThanOrEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'lte',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4785e8882158cbdd5d3c559aa644df09' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'lessThanOrEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9bec8cece99d5e21793b27747a0de0dd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others.
     *
     * The third argument allow you to specify if bounds are included or not (true by default)
     * but for when you including/excluding bounds may produce different results in your application,
     * we recommend to use the explicit methods ->betweenIncluded() or ->betweenExcluded() instead.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->between(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-25\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-25\', \'2018-08-01\', false); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     * @param bool                                    $equal Indicates if an equal to comparison should be done
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'between',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1ab63d0aaa85bd35e01c9b50de5978a1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others, bounds included.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-07-25\', \'2018-08-01\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'betweenIncluded',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '77a2af6db3a83183400e93d46d01bd05' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others, bounds excluded.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-07-25\', \'2018-08-01\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'betweenExcluded',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '09232ad5fa75cfb09bcadf5bb5f58d06' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-25\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-25\', \'2018-08-01\', false); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     * @param bool                                    $equal Indicates if an equal to comparison should be done
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isBetween',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9ebd9189f850cf30f2bd7b0d1b2f91cd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a weekday.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-14\')->isWeekday(); // false
     * Carbon::parse(\'2019-07-15\')->isWeekday(); // true
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2252c9fcc96f349d733b653348d5e374' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a weekend day.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-14\')->isWeekend(); // true
     * Carbon::parse(\'2019-07-15\')->isWeekend(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isWeekend',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '61d1f4ad47929b4420b54b5fcdf5bd09' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is yesterday.
     *
     * @example
     * ```
     * Carbon::yesterday()->isYesterday(); // true
     * Carbon::tomorrow()->isYesterday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isYesterday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b8e617d1de89d62d11047d6e2aef9432' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is today.
     *
     * @example
     * ```
     * Carbon::today()->isToday(); // true
     * Carbon::tomorrow()->isToday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isToday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '56c748b8fad27b0f134e9852cc3911b2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is tomorrow.
     *
     * @example
     * ```
     * Carbon::tomorrow()->isTomorrow(); // true
     * Carbon::yesterday()->isTomorrow(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isTomorrow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5d412001cf118d8014a5ada201b3cf08' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the future, ie. greater (after) than now.
     *
     * @example
     * ```
     * Carbon::now()->addHours(5)->isFuture(); // true
     * Carbon::now()->subHours(5)->isFuture(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isFuture',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '487f46f29320aa7399ca8ba516137a0f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the past, ie. less (before) than now.
     *
     * @example
     * ```
     * Carbon::now()->subHours(5)->isPast(); // true
     * Carbon::now()->addHours(5)->isPast(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isPast',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e2539516eac8ec9655404b1c77834221' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a leap year.
     *
     * @example
     * ```
     * Carbon::parse(\'2020-01-01\')->isLeapYear(); // true
     * Carbon::parse(\'2019-01-01\')->isLeapYear(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isLeapYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5ac4d34adb5531c1114a03ee45ec8a72' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a long year
     *
     * @example
     * ```
     * Carbon::parse(\'2015-01-01\')->isLongYear(); // true
     * Carbon::parse(\'2016-01-01\')->isLongYear(); // false
     * ```
     *
     * @see https://en.wikipedia.org/wiki/ISO_8601#Week_dates
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isLongYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ef2e325972db33a5cee8e0d4a0d62e32' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Compares the formatted values of the two dates.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-06-13\')->isSameAs(\'Y-d\', Carbon::parse(\'2019-12-13\')); // true
     * Carbon::parse(\'2019-06-13\')->isSameAs(\'Y-d\', Carbon::parse(\'2019-06-14\')); // false
     * ```
     *
     * @param string                                        $format date formats to compare.
     * @param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date   instance to compare with or null to use current day.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isSameAs',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7d68612e656724d1811a760692709f13' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the current unit given.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-13\')->isSameUnit(\'year\', Carbon::parse(\'2019-12-25\')); // true
     * Carbon::parse(\'2018-12-13\')->isSameUnit(\'year\', Carbon::parse(\'2019-12-25\')); // false
     * ```
     *
     * @param string                                 $unit singular unit string
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date instance to compare with or null to use current day.
     *
     * @throws BadComparisonUnitException
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isSameUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'af4f25c3891bfc56f6fe6fd9d3df641f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the current unit given.
     *
     * @example
     * ```
     * Carbon::now()->isCurrentUnit(\'hour\'); // true
     * Carbon::now()->subHours(2)->isCurrentUnit(\'hour\'); // false
     * ```
     *
     * @param string $unit The unit to test.
     *
     * @throws BadMethodCallException
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isCurrentUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '983f6a38d1e41faba9d889b1220bc161' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the passed in date is in the same quarter as the instance quarter (and year if needed).
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2019-03-01\')); // true
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2019-04-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2018-03-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2018-03-01\'), false); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date       The instance to compare with or null to use current day.
     * @param bool                                          $ofSameYear Check if it is the same month in the same year.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isSameQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c9d03cd937618383ac95e89c553dba5b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the passed in date is in the same month as the instance´s month.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2019-01-01\')); // true
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2019-02-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2018-01-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2018-01-01\'), false); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date       The instance to compare with or null to use the current date.
     * @param bool                                   $ofSameYear Check if it is the same month in the same year.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isSameMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '558b587dd5fb3e2bc765564688914479' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if this day is a specific day of the week.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(Carbon::WEDNESDAY); // true
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(Carbon::FRIDAY); // false
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(\'Wednesday\'); // true
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(\'Friday\'); // false
     * ```
     *
     * @param int $dayOfWeek
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isDayOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '99e1099391eb3d53d8e3d675880934de' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if its the birthday. Compares the date/month values of the two dates.
     *
     * @example
     * ```
     * Carbon::now()->subYears(5)->isBirthday(); // true
     * Carbon::now()->subYears(5)->subDay()->isBirthday(); // false
     * Carbon::parse(\'2019-06-05\')->isBirthday(Carbon::parse(\'2001-06-05\')); // true
     * Carbon::parse(\'2019-06-05\')->isBirthday(Carbon::parse(\'2001-06-06\')); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date The instance to compare with or null to use current day.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isBirthday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b87cff622d7566227c3b3f8117d931d8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if today is the last day of the Month
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28\')->isLastOfMonth(); // true
     * Carbon::parse(\'2019-03-28\')->isLastOfMonth(); // false
     * Carbon::parse(\'2019-03-30\')->isLastOfMonth(); // false
     * Carbon::parse(\'2019-03-31\')->isLastOfMonth(); // true
     * Carbon::parse(\'2019-04-30\')->isLastOfMonth(); // true
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isLastOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd70ccc01c6443ea0fc92dfd2dfec3777' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is start of day / midnight.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 00:00:00\')->isStartOfDay(); // true
     * Carbon::parse(\'2019-02-28 00:00:00.999999\')->isStartOfDay(); // true
     * Carbon::parse(\'2019-02-28 00:00:01\')->isStartOfDay(); // false
     * Carbon::parse(\'2019-02-28 00:00:00.000000\')->isStartOfDay(true); // true
     * Carbon::parse(\'2019-02-28 00:00:00.000012\')->isStartOfDay(true); // false
     * ```
     *
     * @param bool $checkMicroseconds check time at microseconds precision
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isStartOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c486b42e925703d951c3d18efb31c09d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is end of day.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 23:59:59.999999\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:59.123456\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:59\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:58.999999\')->isEndOfDay(); // false
     * Carbon::parse(\'2019-02-28 23:59:59.999999\')->isEndOfDay(true); // true
     * Carbon::parse(\'2019-02-28 23:59:59.123456\')->isEndOfDay(true); // false
     * Carbon::parse(\'2019-02-28 23:59:59\')->isEndOfDay(true); // false
     * ```
     *
     * @param bool $checkMicroseconds check time at microseconds precision
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isEndOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8c7847e0371e10ca51aa0942e698be45' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is start of day / midnight.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 00:00:00\')->isMidnight(); // true
     * Carbon::parse(\'2019-02-28 00:00:00.999999\')->isMidnight(); // true
     * Carbon::parse(\'2019-02-28 00:00:01\')->isMidnight(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isMidnight',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8dc518361d2a0bf40767fdd6e839843c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is midday.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 11:59:59.999999\')->isMidday(); // false
     * Carbon::parse(\'2019-02-28 12:00:00\')->isMidday(); // true
     * Carbon::parse(\'2019-02-28 12:00:00.999999\')->isMidday(); // true
     * Carbon::parse(\'2019-02-28 12:00:01\')->isMidday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isMidday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4610ca4445b62fa4035d8b304ad30d19' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format.
     *
     * @example
     * ```
     * Carbon::hasFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::hasFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'hasFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6ecb12c8116f7c24408231813fbc9b76' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format.
     *
     * @example
     * ```
     * Carbon::hasFormatWithModifiers(\'31/08/2015\', \'d#m#Y\'); // true
     * Carbon::hasFormatWithModifiers(\'31/08/2015\', \'m#d#Y\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'hasFormatWithModifiers',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cab621b0bce7df11572cdad69464e35c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format and valid to create a
     * new instance.
     *
     * @example
     * ```
     * Carbon::canBeCreatedFromFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::canBeCreatedFromFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'canBeCreatedFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '390a2125f95dff523593dd99a67079ea' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current date matches the given string.
     *
     * @example
     * ```
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2018\')); // false
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019-06\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'06-02\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019-06-02\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'Sunday\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'June\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23:45\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23:00\')); // false
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12h\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 15:23:45\')->is(\'3pm\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 15:23:45\')->is(\'3am\')); // false
     * ```
     *
     * @param string $tester day name, month name, hour, date, etc. as string
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'is',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '798bdcba2e4af57c557e1c8201a1a90c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format with
     * given list of pattern replacements.
     *
     * @example
     * ```
     * Carbon::hasFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::hasFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     * @param array  $replacements
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'matchFormatPattern',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ba32ed4ccbf0ee1fa4e4c58b92903c5b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2703ede86b7d69c8b0a7742713cac9e0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Converter.
 *
 * Change date into different string formats and types and
 * handle the string cast.
 *
 * Depends on the following methods:
 *
 * @method static copy()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8199e6f612acd0d3a814c242ef6409bf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use for __toString method when type juggling occurs.
     *
     * @var string|Closure|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2d434ff7c7209d037b1b22d51f4c9a15' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Reset the format used to the default when type juggling a Carbon instance to a string
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'resetToStringFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6ec0f27ff3e494043df76c489a13d4d4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather let Carbon object being casted to string with DEFAULT_TO_STRING_FORMAT, and
     *             use other method or custom format passed to format() method if you need to dump an other string
     *             format.
     *
     * Set the default format used when type juggling a Carbon instance to a string
     *
     * @param string|Closure|null $format
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setToStringFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2022eb26aaaab8719567979e4ded0138' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the formatted date string on success or FALSE on failure.
     *
     * @see https://php.net/manual/en/datetime.format.php
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'format',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '952a271092aed02b4a8e86de609ba89a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @see https://php.net/manual/en/datetime.format.php
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'rawFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '58812cade38680ec8697e35e1ef5a3f4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as a string using the set format
     *
     * @example
     * ```
     * echo Carbon::now(); // Carbon instances can be casted to string
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__toString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c3f42b31d60320b71c6661baa1b33856' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date
     *
     * @example
     * ```
     * echo Carbon::now()->toDateString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toDateString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd5e61d79cad5821c64a561f02dbead12' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as a readable date
     *
     * @example
     * ```
     * echo Carbon::now()->toFormattedDateString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toFormattedDateString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0f762f8622a7194542ee275878fcf237' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as time
     *
     * @example
     * ```
     * echo Carbon::now()->toTimeString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4e38cd9ad0e7c74e8d088b454ca6f6ca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date and time
     *
     * @example
     * ```
     * echo Carbon::now()->toDateTimeString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toDateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '31f4c3eb4f3d6fa44c699fcfd6fec27c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a format from H:i to H:i:s.u according to given unit precision.
     *
     * @param string $unitPrecision "minute", "second", "millisecond" or "microsecond"
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTimeFormatByPrecision',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '817517d17497ad6bce860c0e8c3ec5d0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date and time T-separated with no timezone
     *
     * @example
     * ```
     * echo Carbon::now()->toDateTimeLocalString();
     * echo "\\n";
     * echo Carbon::now()->toDateTimeLocalString(\'minute\'); // You can specify precision among: minute, second, millisecond and microsecond
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toDateTimeLocalString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0c1ef1fd721c35e0a32e78acd6361d7a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance with day, date and time
     *
     * @example
     * ```
     * echo Carbon::now()->toDayDateTimeString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toDayDateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cc9075ed71248283362ea1527405ea9a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as ATOM
     *
     * @example
     * ```
     * echo Carbon::now()->toAtomString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toAtomString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da4ad3157341135f06c037c4f17d2ce1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as COOKIE
     *
     * @example
     * ```
     * echo Carbon::now()->toCookieString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toCookieString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '849a9770740ec6f066d612ce154dc262' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as ISO8601
     *
     * @example
     * ```
     * echo Carbon::now()->toIso8601String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toIso8601String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'adbf5e57d3667700601c98e5ee878131' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC822
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc822String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toRfc822String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4237195ded1aa9be75b723b0e63b8eba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Convert the instance to UTC and return as Zulu ISO8601
     *
     * @example
     * ```
     * echo Carbon::now()->toIso8601ZuluString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toIso8601ZuluString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '98017fb2211bb4adabd2c9b39837f421' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC850
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc850String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toRfc850String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'edbb5cecdce661aea9792e6f2d91f209' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC1036
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc1036String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toRfc1036String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '75432e0b32e2673fb75c4b133a36f7e7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC1123
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc1123String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toRfc1123String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '08487a282f7ae17d357037579cac048d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC2822
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc2822String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toRfc2822String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '648edbb5a9cec31f3f626fb1e20e12fc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC3339
     *
     * @param bool $extended
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc3339String() . "\\n";
     * echo Carbon::now()->toRfc3339String(true) . "\\n";
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toRfc3339String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '98681ad811d659784b14f76207574f88' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RSS
     *
     * @example
     * ```
     * echo Carbon::now()->toRssString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toRssString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8a7443e8399897bc1e50232399089438' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as W3C
     *
     * @example
     * ```
     * echo Carbon::now()->toW3cString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toW3cString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0f035b500de813ef530d68fa4bd25b64' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC7231
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc7231String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toRfc7231String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c3d103ff72488db01466b12df0e94edf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get default array representation.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toArray());
     * ```
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toArray',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5c2ed2bd8586efb198afd06905d52158' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get default object representation.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toObject());
     * ```
     *
     * @return object
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toObject',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd122892d1a6846fc460103377ebb95e3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns english human readable complete date string.
     *
     * @example
     * ```
     * echo Carbon::now()->toString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '819e8afd5674b6bafd6880d65ab0172a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z, if $keepOffset truthy, offset will be kept:
     * 1977-04-22T01:00:00-05:00).
     *
     * @example
     * ```
     * echo Carbon::now(\'America/Toronto\')->toISOString() . "\\n";
     * echo Carbon::now(\'America/Toronto\')->toISOString(true) . "\\n";
     * ```
     *
     * @param bool $keepOffset Pass true to keep the date offset. Else forced to UTC.
     *
     * @return null|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toISOString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c6a10049c0400c0f0e1cc53d9eaf0a3e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z) with UTC timezone.
     *
     * @example
     * ```
     * echo Carbon::now(\'America/Toronto\')->toJSON();
     * ```
     *
     * @return null|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toJSON',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ab1f4fc42d51ee24e376cb908c12a622' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return native DateTime PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDateTime());
     * ```
     *
     * @return DateTime
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f918da9e45f1642d16e344c26ea748f8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return native toDateTimeImmutable PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDateTimeImmutable());
     * ```
     *
     * @return DateTimeImmutable
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toDateTimeImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '019a16964b17df31bcaad7a483e32b82' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias toDateTime
     *
     * Return native DateTime PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDate());
     * ```
     *
     * @return DateTime
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5721d0c6beab81283d5970d64ac849f5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
     *
     * @param \\DateTimeInterface|Carbon|CarbonImmutable|int|null $end      period end date or recurrences count if int
     * @param int|\\DateInterval|string|null                      $interval period default interval or number of the given $unit
     * @param string|null                                        $unit     if specified, $interval must be an integer
     *
     * @return CarbonPeriod
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toPeriod',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '651eb7787d1df1cded1604465343a54b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
     *
     * @param \\DateTimeInterface|Carbon|CarbonImmutable|null $end      period end date
     * @param int|\\DateInterval|string|null                  $interval period default interval or number of the given $unit
     * @param string|null                                    $unit     if specified, $interval must be an integer
     *
     * @return CarbonPeriod
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'range',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ee557644ea41ed7c84660cc337570c8f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '82993239fb13f42f0db6ba12754feda1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Creator.
 *
 * Static creators.
 *
 * Depends on the following methods:
 *
 * @method static Carbon|CarbonImmutable getTestNow()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7cc3a5e0356af89f3c49c26a48181f06' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '41e41ecbc576999d3e65b347dd70bbd4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * True when parent::__construct has been called.
     *
     * @var string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd9d6fab7b881f38f5d04829fd88be559' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The errors that can occur.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c7d9ff7739002c077e56e54cb2f61a40' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new Carbon instance.
     *
     * Please see the testing aids section (specifically static::setTestNow())
     * for more on the possibility of this constructor returning a test instance.
     *
     * @param string|null              $time
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__construct',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b5f9b3a47e5fda2b96b7ae2031180fc1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get timezone from a datetime instance.
     *
     * @param DateTimeInterface        $date
     * @param DateTimeZone|string|null $tz
     *
     * @return DateTimeInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'constructTimezoneFromDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9eb5c8dab94c6d3618e5c7079935cb83' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Update constructedObjectId on cloned.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__clone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '43ecc042feba99f0ea3f72f55eb99338' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a DateTime one.
     *
     * @param DateTimeInterface $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'instance',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aab046bea5716ff5187231d4eb942065' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a string.
     *
     * This is an alias for the constructor that allows better fluent syntax
     * as it allows you to do Carbon::parse(\'Monday next week\')->fn() rather
     * than (new Carbon(\'Monday next week\'))->fn().
     *
     * @param string|DateTimeInterface|null $time
     * @param DateTimeZone|string|null      $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'rawParse',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'feaeb63e7774e99028e374192ddc65f7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a string.
     *
     * This is an alias for the constructor that allows better fluent syntax
     * as it allows you to do Carbon::parse(\'Monday next week\')->fn() rather
     * than (new Carbon(\'Monday next week\'))->fn().
     *
     * @param string|DateTimeInterface|null $time
     * @param DateTimeZone|string|null      $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'parse',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e37f68d6215270ea1ad15a774409036' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.).
     *
     * @param string                   $time   date/time string in the given language (may also contain English).
     * @param string|null              $locale if locale is null or not specified, current global locale will be
     *                                         used instead.
     * @param DateTimeZone|string|null $tz     optional timezone for the new instance.
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'parseFromLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c922ed1b8bcf0cf193c535047664e863' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a Carbon instance for the current date and time.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'now',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '468a2df3312a6dba502b4c25a607d2aa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for today.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'today',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3aad4f68d15b83f99ca9cee25c59f9a3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for tomorrow.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'tomorrow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5f1be1d7f17ece95ba695da5f5e5cb5c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for yesterday.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'yesterday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '861f06ba2d89d8bd1a1a49197883f62d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for the greatest supported date.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'maxValue',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '41f120a99413e9d8428250199de76396' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for the lowest supported date.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'minValue',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e843ece136817fdff4effbf6b1d82ebe' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new Carbon instance from a specific date and time.
     *
     * If any of $year, $month or $day are set to null their now() values will
     * be used.
     *
     * If $hour is null it will be set to its now() value and the default
     * values for $minute and $second will be their now() values.
     *
     * If $hour is not null then the default values for $minute and $second
     * will be 0.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'create',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6f844fc9037fcfea0907bc0a090a026b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new safe Carbon instance from a specific date and time.
     *
     * If any of $year, $month or $day are set to null their now() values will
     * be used.
     *
     * If $hour is null it will be set to its now() value and the default
     * values for $minute and $second will be their now() values.
     *
     * If $hour is not null then the default values for $minute and $second
     * will be 0.
     *
     * If one of the set values is not valid, an InvalidDateException
     * will be thrown.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidDateException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createSafe',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5a41ecc1dcae709450a8daae7a0e0921' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a date. The time portion is set to now.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed3cd482c5f32a30e4ba7e6ea0e1a6f2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a date. The time portion is set to midnight.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createMidnightDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8a1cabd4e6d2a4222ca0588493807c0b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a time. The date portion is set to today.
     *
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'df40b433f7aa73c1481fb5e75eabae14' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a time string. The date portion is set to today.
     *
     * @param string                   $time
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b0bb677e0794d5cbe64322714341f672' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param string                         $format     Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $originalTz
     *
     * @return DateTimeInterface|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromFormatAndTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '42183a71baaf7aed0de6ec0d35ce0d48' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format.
     *
     * @param string                         $format Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'rawCreateFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '925d425f023dbf670d3bee509f324726' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\Carbon\\CarbonImmutable|\\Carbon\\Carbon|null $mock */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'rawCreateFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b35d41f8b476478a559c2656b2d3f3a4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format.
     *
     * @param string                         $format Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eb8748174cb456efcb288900a4c98847' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific ISO format (same replacements as ->isoFormat()).
     *
     * @param string                                             $format     Datetime format
     * @param string                                             $time
     * @param DateTimeZone|string|false|null                     $tz         optional timezone
     * @param string|null                                        $locale     locale to be used for LTS, LT, LL, LLL, etc. macro-formats (en by fault, unneeded if no such macro-format in use)
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator optional custom translator to use for macro-formats
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromIsoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe96643f401e04228f7367dc9a54f030' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format and a string in a given language.
     *
     * @param string                         $format Datetime format
     * @param string                         $locale
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromLocaleFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eb78214e277643bb453e717572db5920' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific ISO format and a string in a given language.
     *
     * @param string                         $format Datetime ISO format
     * @param string                         $locale
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromLocaleIsoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b0c69e457bc64f4090fadcb847096473' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Make a Carbon instance from given variable if possible.
     *
     * Always return a new instance. Parse only strings and only these likely to be dates (skip intervals
     * and recurrences). Throw an exception for invalid format, but otherwise return null.
     *
     * @param mixed $var
     *
     * @throws InvalidFormatException
     *
     * @return static|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'make',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aa5f4cfacb452a1dac37e6edc7aedd98' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set last errors.
     *
     * @param array $lastErrors
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setLastErrors',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7d53db1952b9b32881c16d59f680f3f4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * {@inheritdoc}
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getLastErrors',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '70bcb6e64b06160e2641397f64359e92' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3b2c6e0ab904983d6f580c5fb08a6cc7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Difference.
 *
 * Depends on the following methods:
 *
 * @method bool lessThan($date)
 * @method static copy()
 * @method static resolveCarbon($date = null)
 * @method static Translator translator()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c3a5eb38d9ca4668822d64e344e5b6f8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @codeCoverageIgnore
     *
     * @param CarbonInterval $diff
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'fixNegativeMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '845a0e08b30459a77729f87deb93bd9e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param DateInterval $diff
     * @param bool         $absolute
     *
     * @return CarbonInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'fixDiffInterval',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '673610f0a272960bed52992c4ad30c42' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference as a DateInterval instance.
     * Return relative interval (negative if
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return DateInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diff',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5686759c88fa576aa572ba963c163ef8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference as a CarbonInterval instance.
     * Return absolute interval (always positive) unless you pass false to the second argument.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return CarbonInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffAsCarbonInterval',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3980e13fe1ce66aa9b80013d7405849b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in years
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed1f4adf8b00141840577795981d259c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in quarters rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInQuarters',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '967f9da7f44844e61b93cfae50833919' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fc6e96b88db614585ca40aee5df382bd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1c8fa6b43f67e5675930f3bde959cce6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8fab0b0b9c13f08f2115ad9f6744d5b9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days using a filter closure rounded down.
     *
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInDaysFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '001598c5aff93b14865bd8ab3a8ec4f8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours using a filter closure rounded down.
     *
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInHoursFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '21f3bbd772b954795269a21b962daba9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference by the given interval using a filter closure.
     *
     * @param CarbonInterval                                         $ci       An interval to traverse by
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '01f930b9d7647d2abeef16e800b7fe4c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weekdays rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInWeekdays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ff6ab29d037c300dd2d0cd0b33c172bb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weekend days using a filter rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2e3e0d187ddf28f78ca0ef0c19cd5329' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd0660a79db5dabc29550b9b73d80ea96' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInRealHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '34d29920c1fa7f80b90c6646f309594c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fc9f0229b056ccd5e2fe2453166843ea' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInRealMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2cceeac106a1e83405e0f51405e6d772' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ffc48f9be5b88eddbd72ee860918a193' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in microseconds.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '19091f1f8565d0c8c573fcd59af179e2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in milliseconds rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInMilliseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1f286937bc881e2a284907824c82e339' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1ead6b30e7a3e018df77ac7b7080201a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '37d5c98ec1826caa00ae3548ae283009' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in microseconds using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInRealMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '984354284de1eb674497f097fcf0c710' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInRealMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1951dc90cc97eb37c8dbe3a368b88a78' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in milliseconds rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffInRealMilliseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4ce4d441f1303d34f8166b98ce2a74eb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '63f721b1ac03632f6d8695c036d0e353' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5b4fed5cf8bbcaddd0cc337af030a660' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c1508a337a3c124fa6f79fcbf4214da2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ff02958e9df25fb40b534cdf95eea8dc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c8beeae9605ff76dbae96466669e4462' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5b22c2dd3e74007421478eae2dbc5efc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a814acd02acd825f366b36bf63a33961' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfMonthAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '63d89d5422cf06569b0261de7a3b94ca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in year as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '26abeb0500e2fdd9f6171ff0836001c6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bd03d3c5839cead7c2776b22855ea5a8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfYearAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '61653bc694fe3088d00985cc1a3718d0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1a3517c229a39782f1aca91f2508ee81' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b50d5fffb187c485feb09c9124293ed7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '52e5d00957ed22b8aa79078cf5f4ff62' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b665f5efa9c45a82454d256a10d593c8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3a2c38e5150d4abf1278375ab49c8d07' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '477e86960a9d9737a4fd1cdf2affcc48' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b251397a960c24fc0414124fb1c3f8fe' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfMonthAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9b541de0857959af2cd5cc4cdee402e0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in year as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed55331086bd9ab3da83e5dfd8f3c6cc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '625b7f1d6b70bb39ee842803dad8102a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfYearAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '628154d3d1082fda345d559ce659a155' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The number of seconds since midnight.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'secondsSinceMidnight',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fec4d4e9bc0bac1cde434db618336366' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The number of seconds until 23:59:59.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'secondsUntilEndOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eaab3a1984a6a4676d273273f8da1f0d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @example
     * ```
     * echo Carbon::tomorrow()->diffForHumans() . "\\n";
     * echo Carbon::tomorrow()->diffForHumans([\'parts\' => 2]) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans([\'parts\' => 3, \'join\' => true]) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday()) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday(), [\'short\' => true]) . "\\n";
     * ```
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'diffForHumans',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd618f0f4605255b6aeb30a13ae6fe844' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias diffForHumans
     *
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'from',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2116e15cceb6f4acbab06ffcec3968fc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias diffForHumans
     *
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'since',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '89e88bb2865410a23fe8d2682ec86bc7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given (or now if null given) to current instance.
     *
     * When comparing a value in the past to default now:
     * 1 hour from now
     * 5 months from now
     *
     * When comparing a value in the future to default now:
     * 1 hour ago
     * 5 months ago
     *
     * When comparing a value in the past to another value:
     * 1 hour after
     * 5 months after
     *
     * When comparing a value in the future to another value:
     * 1 hour before
     * 5 months before
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'to',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a9158fe682c59e5c7eeaecda3f57cb73' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias to
     *
     * Get the difference in a human readable format in the current locale from an other
     * instance given (or now if null given) to current instance.
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'until',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '068f6d96dd545f0fb7441578d50bd5c5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current
     * instance to now.
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'fromNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd69880e0ef96f73903b0abbc2383552d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given to now
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single part)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0486397907d678de9c10e8c4ba37cb5e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given to now
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single part)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'ago',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3bfd3ec48343e2c5e86d4607dcfe0dd6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'timespan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd1a7e5af5d25e6e25c38795681f0503e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns either the close date "Friday 15h30", or a calendar date "10/09/2017" is farthest than 7 days from now.
     *
     * @param Carbon|\\DateTimeInterface|string|null $referenceTime
     * @param array                                 $formats
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0413869bffa1215bac07152081aa51a1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $current */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7954f9cb35d8cdb568f3b2b2623cc4e7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $other */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe3ee2423dbb3dc1bf61574475e718dd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b4e50e167a67564d49ff85e1cf9d40ca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Macros.
 *
 * Allows users to register macros within the Carbon class.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6469518d6c79c88a3cb6215662c4a8c4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '13ef0515dd00bd4c9c9757b1b4654ca5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Mixin.
 *
 * Allows mixing in entire classes with multiple macros.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '23ceb619666bdf58e86987a7b39fd31d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Stack of macro instance contexts.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7cd6c583b8209b2f01bc81813a254c3a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Mix another object into the class.
     *
     * @example
     * ```
     * Carbon::mixin(new class {
     *   public function addMoon() {
     *     return function () {
     *       return $this->addDays(30);
     *     };
     *   }
     *   public function subMoon() {
     *     return function () {
     *       return $this->subDays(30);
     *     };
     *   }
     * });
     * $fullMoon = Carbon::create(\'2018-12-22\');
     * $nextFullMoon = $fullMoon->addMoon();
     * $blackMoon = Carbon::create(\'2019-01-06\');
     * $previousBlackMoon = $blackMoon->subMoon();
     * echo "$nextFullMoon\\n";
     * echo "$previousBlackMoon\\n";
     * ```
     *
     * @param object|string $mixin
     *
     * @throws ReflectionException
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'mixin',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a9fa9cb1b7f440ed200aa3d3467a143a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param object|string $mixin
     *
     * @throws ReflectionException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'loadMixinClass',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '335fa30f0eee11340f15c6eb631d21a7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param string $trait
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'loadMixinTrait',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a16fc9fb47db515a3c0a64ecb8066e79' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @phpstan-ignore-next-line */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'loadMixinTrait',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4722d3ecc7ffccaad9193dcf572a34c0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Stack a Carbon context from inside calls of self::this() and execute a given action.
     *
     * @param static|null $context
     * @param callable    $callable
     *
     * @throws Throwable
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'bindMacroContext',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3776111762bf9d31eff78f47e565db10' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the current context from inside a macro callee or a null if static.
     *
     * @return static|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'context',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '465b4477e0ab8f05de7675500e8b5d27' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the current context from inside a macro callee or a new one if static.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'this',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c68512467e7ec79772c7adea6017544f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The registered macros.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4aa9823d7c45e9872f9c159123c6b5d5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The registered generic macros.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '00b3a47fb48738f4452f8303ba64adb8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Register a custom macro.
     *
     * @example
     * ```
     * $userSettings = [
     *   \'locale\' => \'pt\',
     *   \'timezone\' => \'America/Sao_Paulo\',
     * ];
     * Carbon::macro(\'userFormat\', function () use ($userSettings) {
     *   return $this->copy()->locale($userSettings[\'locale\'])->tz($userSettings[\'timezone\'])->calendar();
     * });
     * echo Carbon::yesterday()->hours(11)->userFormat();
     * ```
     *
     * @param string          $name
     * @param object|callable $macro
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'macro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '95ebd4c162190d560d89c6fa79b60c42' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Remove all macros and generic macros.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'resetMacros',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bcd1a22ec21b770bd0c5eb1f04850aa2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Register a custom macro.
     *
     * @param object|callable $macro
     * @param int             $priority marco with higher priority is tried first
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'genericMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eccd095bf54bf551b829d56b5876d43e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if macro is registered globally.
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'hasMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bd4be41c255490c67e67f15d3703bcd4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the raw callable macro registered globally for a given name.
     *
     * @param string $name
     *
     * @return callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8146e381d71e76d71c94967bd4659c13' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if macro is registered globally or locally.
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'hasLocalMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '469c74cdfa03ceb99850efec5cf738bb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the raw callable macro registered globally or locally for a given name.
     *
     * @param string $name
     *
     * @return callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getLocalMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a4ebcb38b9e6c8790a5e7df15a68330b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f36ad536bb3485f51784c0f42d4090e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Modifiers.
 *
 * Returns dates relative to current date using modifier short-hand.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fabbf96fb1335919c2eaa27edfa8ae0c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Midday/noon hour.
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '188d71e93af3427533f5076ea49f07a0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * get midday/noon hour
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getMidDayAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0185b26849535ce9a4b5cb0284f0dc23' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather consider mid-day is always 12pm, then if you need to test if it\'s an other
     *             hour, test it explicitly:
     *                 $date->format(\'G\') == 13
     *             or to set explicitly to a given hour:
     *                 $date->setTime(13, 0, 0, 0)
     *
     * Set midday/noon hour
     *
     * @param int $hour midday hour
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setMidDayAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5bd156c2e8ff0c72d1d9d3888027a653' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to midday, default to self::$midDayAt
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'midDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c21969cfd897113b382d6b414631a3dc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the next occurrence of a given modifier such as a day of
     * the week. If no modifier is provided, modify to the next occurrence
     * of the current day of the week. Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param string|int|null $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'next',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cf155675d1b54a85441bbf3632248245' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward or backward to the next week- or weekend-day.
     *
     * @param bool $weekday
     * @param bool $forward
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'nextOrPreviousDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6abed21a4a76b3aea74b7ac3a760738c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'nextOrPreviousDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c543ecbf7d73c35c55bd5dbf665ceaef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward to the next weekday.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'nextWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9483e32b8e6241d7eaaa54bb03b1dbfa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go backward to the previous weekday.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'previousWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '37311870fe273ba10d6bc3111cce045b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward to the next weekend day.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'nextWeekendDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '235f5729f95565d27e0946000b22896f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go backward to the previous weekend day.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'previousWeekendDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2def9738e49f173f84e9d6cdc4cbd087' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the previous occurrence of a given modifier such as a day of
     * the week. If no dayOfWeek is provided, modify to the previous occurrence
     * of the current day of the week. Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param string|int|null $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'previous',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '808691533d57accfa38a1a48b5a2a396' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current month. If no dayOfWeek is provided, modify to the
     * first day of the current month.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'firstOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae3bbcfa5b282e3f3b8e580d8f9cb1b5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current month. If no dayOfWeek is provided, modify to the
     * last day of the current month.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'lastOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f777ea54e0146e1bace7fa2a8de2ba5f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current month. If the calculated occurrence is outside the scope
     * of the current month, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'nthOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '95ecaca0dacecd551003228d9fbe0d2e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current quarter. If no dayOfWeek is provided, modify to the
     * first day of the current quarter.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'firstOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a2c1ebe796c4a5c0812c61ffb00620a5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current quarter. If no dayOfWeek is provided, modify to the
     * last day of the current quarter.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'lastOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd7c0caf3ffffa1c8cc1a89390b652458' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current quarter. If the calculated occurrence is outside the scope
     * of the current quarter, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'nthOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '18df51174c96bfa7c5946478afe05529' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current year. If no dayOfWeek is provided, modify to the
     * first day of the current year.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'firstOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b1356aeeae4ea10ec95f830a6990ca02' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current year. If no dayOfWeek is provided, modify to the
     * last day of the current year.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'lastOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a03a032ac3ac12b16fa2da8823edad41' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current year. If the calculated occurrence is outside the scope
     * of the current year, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'nthOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f68ec9f5b8448616a141532e18b052e8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify the current instance to the average of a given instance (default now) and the current instance
     * (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'average',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '002c30bc597d2a23d40899d5d16ef7d0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the closest date from the instance (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'closest',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5e93e3af9abbef717a95fa2d7ba9445b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the farthest date from the instance (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'farthest',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7ca6c9e8a9e7b7fcac9535347cadf786' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the minimum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'min',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '192a015b16481a1b9e2aeb9bad9836fd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the minimum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see min()
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'minimum',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5c8bf2659549a6a0f3b021cba56eef7b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the maximum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'max',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cf98ccec9a5f592acdff9961612764c8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the maximum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see max()
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'maximum',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bfe22f09981a292ccbd13e46fef83ffb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Calls \\DateTime::modify if mutable or \\DateTimeImmutable::modify else.
     *
     * @see https://php.net/manual/en/datetime.modify.php
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'modify',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '504755c9e79448769064865d0e00fe2e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Similar to native modify() method of DateTime but can handle more grammars.
     *
     * @example
     * ```
     * echo Carbon::now()->change(\'next 2pm\');
     * ```
     *
     * @link https://php.net/manual/en/datetime.modify.php
     *
     * @param string $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'change',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '55b1be0ad1eb78dd97a0eed209d08e11' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '090e49b97bafb949d4938ea985d2a0be' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Mutability.
 *
 * Utils to know if the current object is mutable or immutable and convert it.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fa7c9fb114b746e94af7cf95e4b8164d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Cast.
 *
 * Utils to cast into an other class.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidcastexception' => 'Carbon\\Exceptions\\InvalidCastException',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b139029bf9d2d91ebf70d6b4e42686ad' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Cast the current instance into the given class.
     *
     * @param string $className The $className::instance() method will be called to cast the current object.
     *
     * @return DateTimeInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidcastexception' => 'Carbon\\Exceptions\\InvalidCastException',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'cast',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ceddb8ff9c14a34599c252a966890cb6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is mutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8cd1085389fdb7098d6be8aa8d5b6245' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is immutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f0f2b4030bffeeb57d7f9677b71ae3f9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a mutable copy of the instance.
     *
     * @return Carbon
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cdcadf757b189964a4823030d272bd19' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9783ac829d38f363d8c5c685b1308a49' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a immutable copy of the instance.
     *
     * @return CarbonImmutable
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9055b0d5f194664fead5650715417c89' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonImmutable $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'toImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '25946414764e39497c080b7f7f19dc5b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '252c7ef44a7d391eab60e68a53ac64c6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Options.
 *
 * Embed base methods to change settings of Carbon classes.
 *
 * Depends on the following methods:
 *
 * @method \\Carbon\\Carbon|\\Carbon\\CarbonImmutable shiftTimezone($timezone) Set the timezone
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '06395ae63c0c9798e461d3f8b9d2174c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3bfb43b369f29abdeead33a955093713' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Localization.
 *
 * Embed default and locale translators and translation base methods.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '43a9e5248d210d039287d7aacf7d8cc6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Default translator.
     *
     * @var \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a7682e065c604376504a9739780ab36e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Specific translator of the current instance.
     *
     * @var \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b5598e933f503ed3736fe2bc21b3617c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Options for diffForHumans().
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8f2d5ade129634d6129b0dc6529a43d1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOptions
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setHumanDiffOptions',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4819d4a2a40af7b954057c606f9d6641' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOption
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'enableHumanDiffOption',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f32fc93674011fe9731c64b38757e15a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOption
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'disableHumanDiffOption',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9683690f6ea16e9736a7bbedcc718657' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return default humanDiff() options (merged flags as integer).
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getHumanDiffOptions',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec4172b2e4112ef2230a36cf2754a835' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the default translator instance in use.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0d1bdedc3792fcd019b6598521767368' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the default translator instance to use.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e8750e80a1cd04b11d340702e6ba3888' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return true if the current instance has its own translator.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'hasLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9b9732ec6cbc1a20537024d18de7c760' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translator of the current instance or the default if none set.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2d56783775a4e6c3c456cd18af890d5e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the translator for the current instance.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return $this
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9811add54ab46104c8f89686d133689d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns raw translation message for a given key.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator the translator to use
     * @param string                                             $key        key to find
     * @param string|null                                        $locale     current locale used if null
     * @param string|null                                        $default    default value if translation returns the key
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslationMessageWith',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4a71f9afa56db0c277da119a2b8999c6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns raw translation message for a given key.
     *
     * @param string                                             $key        key to find
     * @param string|null                                        $locale     current locale used if null
     * @param string|null                                        $default    default value if translation returns the key
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator an optional translator to use
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslationMessage',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '41c88328f7d300f37e1917f0e571a068' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate using translation string or callback available.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     * @param string                                             $key
     * @param array                                              $parameters
     * @param null                                               $number
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'translateWith',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ee71aa23afcacdcc4677c6d7f9cb5f32' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate using translation string or callback available.
     *
     * @param string                                             $key
     * @param array                                              $parameters
     * @param null                                               $number
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'translate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '70abaa776af29935bf58b0edae6aa020' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the alternative number for a given integer if available in the current locale.
     *
     * @param int $number
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'translateNumber',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0f96e2da620a55ffd2398ee0ff89ac19' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a time string from a locale to an other.
     *
     * @param string      $timeString date/time/duration string to translate (may also contain English)
     * @param string|null $from       input locale of the $timeString parameter (`Carbon::getLocale()` by default)
     * @param string|null $to         output locale of the result returned (`"en"` by default)
     * @param int         $mode       specify what to translate with options:
     *                                - CarbonInterface::TRANSLATE_ALL (default)
     *                                - CarbonInterface::TRANSLATE_MONTHS
     *                                - CarbonInterface::TRANSLATE_DAYS
     *                                - CarbonInterface::TRANSLATE_UNITS
     *                                - CarbonInterface::TRANSLATE_MERIDIEM
     *                                You can use pipe to group: CarbonInterface::TRANSLATE_MONTHS | CarbonInterface::TRANSLATE_DAYS
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'translateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7454804d87895cef586f12d67a60b5e9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a time string from the current locale (`$date->locale()`) to an other.
     *
     * @param string      $timeString time string to translate
     * @param string|null $to         output locale of the result returned ("en" by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'translateTimeStringTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cff9057a9fa14bdb8d10387e1ab621d0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the locale for the current instance.
     *
     * @param string|null $locale
     * @param string      ...$fallbackLocales
     *
     * @return $this|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'locale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '578f243d2fafd2f2701c8e82b3c8d3ec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the current translator locale.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7212de0c1d3ce256e5f40ee680e8f644' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the current translator locale and indicate if the source locale file exists.
     * Pass \'auto\' as locale to use closest language from the current LC_TIME locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '527ba26915d2f733a3c246fd4452580c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the fallback locale.
     *
     * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
     *
     * @param string $locale
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setFallbackLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '03eb6b31ea3ac7962ffa644cb3e72be0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the fallback locale.
     *
     * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
     *
     * @return string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getFallbackLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '952c2ac5124253335803ed84c7aa2c2b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the current locale to the given, execute the passed function, reset the locale to previous one,
     * then return the result of the closure (or null if the closure was void).
     *
     * @param string   $locale locale ex. en
     * @param callable $func
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'executeWithLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f42a5997a7e838e6e441ffe040e80ed9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has short-units support.
     * Support is considered enabled if either year, day or hour has a short variant translated.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'localeHasShortUnits',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd44399ab49d3206355a2d1315a0511c5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after).
     * Support is considered enabled if the 4 sentences are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'localeHasDiffSyntax',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '96509a9524b33d84c1a6f972f965abd1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow).
     * Support is considered enabled if the 3 words are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'localeHasDiffOneDayWords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd7f58b5542aaa3cabe1fa6f0c539c3a7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow).
     * Support is considered enabled if the 2 words are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'localeHasDiffTwoDayWords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '63a51bacce08d6db423c6e1bf2a2c6c3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X).
     * Support is considered enabled if the 4 sentences are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'localeHasPeriodSyntax',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '314f3e6e6e39d9f9c53a29db3425382b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the list of internally available locales and already loaded custom locales.
     * (It will ignore custom translator dynamic loading.)
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getAvailableLocales',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '109264b37d139f085dd7ac9d4852ce54' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of Language object for each available locale. This object allow you to get the ISO name, native
     * name, region and variant of the locale.
     *
     * @return Language[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getAvailableLocalesInfo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c09298b821257a48acccdd81524f7566' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Initialize the default translator instance if necessary.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'translator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5b0360a293900c92fa72e3842bf017ce' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the locale of a given translator.
     *
     * If null or omitted, current local translator is used.
     * If no local translator is in use, current global translator is used.
     *
     * @param null $translator
     *
     * @return string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslatorLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c2eebcd1fb5af8286498b272a6d642f5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Throw an error if passed object is not LocaleAwareInterface.
     *
     * @param LocaleAwareInterface|null $translator
     *
     * @return LocaleAwareInterface|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getLocaleAwareTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '892e0120b7785436ccbc340a3334de87' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the word cleaned from its translation codes.
     *
     * @param string $word
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'cleanWordFromTranslationString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b896a15df7c8d86d13071ba67344c7be' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a list of words.
     *
     * @param string[] $keys     keys to translate.
     * @param string[] $messages messages bag handling translations.
     * @param string   $key      \'to\' (to get the translation) or \'from\' (to get the detection RegExp pattern).
     *
     * @return string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'translateWordsByKeys',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bc206ab8039494bd055dfdf840a0f12a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get an array of translations based on the current date.
     *
     * @param callable $translation
     * @param int      $length
     * @param string   $timeString
     *
     * @return string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslationArray',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '728c019d841d0d3311464fdf8fcc339e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Customizable PHP_INT_SIZE override.
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cd19156f7c8101cc9dae0eb672faf1ad' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * First day of week.
     *
     * @var int|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e3316d88c57c7a30edc6573c8c1db754' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Last day of week.
     *
     * @var int|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2d295dbb54dac780793526982e677952' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Days of weekend.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9659f4fe5471ecedebcadd93873e51e1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format regex patterns.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '87bf7439c16cdbf534cd2369dcd04094' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format modifiers (such as available in createFromFormat) regex patterns.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '26b80b6d2123faed96d68a36e3df129a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if months should be calculated with overflow.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ba0454a8212c9864a8070d7eb8f2109f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if years should be calculated with overflow.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1efe8074b1aa3fe7421e3bcde73bf8a8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if the strict mode is in use.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2603dbbe9c6fff4d1f3df7a959fc49dd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of format.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8cc0df4a2d597380d688b35acbe88377' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of createFromFormat.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '83df745b078d090d9d70ef34f48e06ca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of parse.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1df33533c1cf8cfdc665d7e0678756a8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if months should be calculated with overflow.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5e26155be3e5e72ac515dfb7dc1616de' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if years should be calculated with overflow.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8f1dfa6fe907a1e5eae3cd028e17446b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if the strict mode is in use.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7c3f739d2566a1a5ace4d3ef929c0533' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Options for diffForHumans and forHumans methods.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '312bc582b21266a1af9387e19d03244c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use on string cast.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8e59f9463d26ff4c97d561d4e0465efb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use on JSON serialization.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '21b7c94a81228020ad2a32ac193fcac7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Instance-specific macros.
     *
     * @var array|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '14ae569ae853f4f9f1b52166d79854cd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Instance-specific generic macros.
     *
     * @var array|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da9ba73d4cd80697b865dbcd7e8d628f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * Enable the strict mode (or disable with passing false).
     *
     * @param bool $strictModeEnabled
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'useStrictMode',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4c12a58c246bebf1e557036eada44977' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the strict mode is globally in use, false else.
     * (It can be overridden in specific instances.)
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isStrictModeEnabled',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '04c233860a58e2c73ee81e949d140a3b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Indicates if months should be calculated with overflow.
     *
     * @param bool $monthsOverflow
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'useMonthsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b685a171d8cc12872d1551428ad7557d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Reset the month overflow behavior.
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'resetMonthsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '15cd4637c187d8f15f3c2193955b89fa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the month overflow global behavior (can be overridden in specific instances).
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'shouldOverflowMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c95ce0b1de47506cd729fe37b3337fa4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Indicates if years should be calculated with overflow.
     *
     * @param bool $yearsOverflow
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'useYearsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8ddc40f99dc96cc6ba87f7405fc532e8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Reset the month overflow behavior.
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'resetYearsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd563d1b489c98af7d79b24c390d4f1f9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the month overflow global behavior (can be overridden in specific instances).
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'shouldOverflowYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bac7861d796f6e74d5b95c0abdc3ef08' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set specific options.
     *  - strictMode: true|false|null
     *  - monthOverflow: true|false|null
     *  - yearOverflow: true|false|null
     *  - humanDiffOptions: int|null
     *  - toStringFormat: string|Closure|null
     *  - toJsonFormat: string|Closure|null
     *  - locale: string|null
     *  - timezone: \\DateTimeZone|string|int|null
     *  - macros: array|null
     *  - genericMacros: array|null
     *
     * @param array $settings
     *
     * @return $this|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'settings',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0f31bd6f275d159cb44f30aa81d72faf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns current local settings.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getSettings',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7b62def61a9c0a5abb025aafa7d6dc06' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Show truthy properties on var_dump().
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__debugInfo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '052155ab5669795fdb9176bd7fbdacaa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0de2cb6dcd487e00a6d464f04e1ef2f3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Rounding.
 *
 * Round, ceil, floor units.
 *
 * Depends on the following methods:
 *
 * @method static copy()
 * @method static startOfWeek(int $weekStartsAt = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c881e803d26961f90a7b93968c63c098' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '278a8de9e1f4979dd507d6e4658f200b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait to call rounding methods to interval or the interval of a period.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterval' => 'Carbon\\CarbonInterval',
          'invalidintervalexception' => 'Carbon\\Exceptions\\InvalidIntervalException',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fdcc05df05809f11a872b8c07443cae0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance at the given unit with given precision if specified and the given function.
     *
     * @param string    $unit
     * @param float|int $precision
     * @param string    $function
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'roundUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd79c42eac9ddbae2ee776d1213166b8d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $result */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'roundUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6f37a55917682439ae749934f352fecd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Truncate the current instance at the given unit with given precision if specified.
     *
     * @param string    $unit
     * @param float|int $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floorUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b0962f55a7ca26bdd691122e8f3bb85d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance at the given unit with given precision if specified.
     *
     * @param string    $unit
     * @param float|int $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'ceilUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da11eeedb6c13f52fc7f35cf92c490df' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     * @param string                              $function
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'round',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6c4e5494c5c262e718d5ffb2089b46b0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floor',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f12fb0af3dfab9212af24bad8dfdeed3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'ceil',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7a80009d3f47a66afcbc6473ef76e99d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'roundWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a4d722102f8c42cc85e6e3b0c4027d42' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Truncate the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'floorWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0cde234318ae9446d643fcdfc3333175' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'ceilWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd063823aa62af29f43ff616d75f88a7d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '177e425f3d2e588d04134680d620af73' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Serialization.
 *
 * Serialization and JSON stuff.
 *
 * Depends on the following properties:
 *
 * @property int $year
 * @property int $month
 * @property int $daysInMonth
 * @property int $quarter
 *
 * Depends on the following methods:
 *
 * @method string|static locale(string $locale = null, string ...$fallbackLocales)
 * @method string        toJSON()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b2ee2154745811d4fa636e5d32729eb7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The custom Carbon JSON serializer.
     *
     * @var callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fa70f1a6e5ec18b35a50beaf864f56e2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of key to use for dump/serialization.
     *
     * @var string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8189dacee4f5f92e572e38ddb203b9f0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Locale to dump comes here before serialization.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '048dcfc7b46be9d9dbb220f3c183b3a7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a serialized string of the instance.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'serialize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b7a926d2ca375a09f149602b2364557e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create an instance from a serialized string.
     *
     * @param string $value
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'fromSerialized',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a211a9afb5ef4714963e5207d0ce4e91' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The __set_state handler.
     *
     * @param string|array $dump
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__set_state',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4ced18eacd54673fa5478ed7fb9e70f2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\DateTimeInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__set_state',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eb70bcd42fda2ade763d1d718364bbf9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the list of properties to dump on serialize() called on.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__sleep',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c694026675df6c65e27103e3874d89a7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set locale if specified on unserialize() called.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__wakeup',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6762f4e5800831825f770e6cc48d49f0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Prepare the object for JSON serialization.
     *
     * @return array|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'jsonSerialize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0fa5db9b14f2ac7a5d46636dc90ba445' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather transform Carbon object before the serialization.
     *
     * JSON serialize all Carbon instances using the given callback.
     *
     * @param callable $callback
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'serializeUsing',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ef81db28466d6656128d003a2dc5097e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Cleanup properties attached to the public scope of DateTime when a dump of the date is requested.
     * foreach ($date as $_) {}
     * serializer($date)
     * var_export($date)
     * get_object_vars($date)
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'cleanupDumpProperties',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '36fd8ad2f0dabd4e45ca15a1d0739bdc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '47d5a229600d8f55f9fcdd15bf4dad01' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * A test Carbon instance to be returned when now instances are created.
     *
     * @var static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7a574b3710d56c79b93daab385d337ed' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a Carbon instance (real or mock) to be returned when a "now"
     * instance is created.  The provided instance will be returned
     * specifically under the following conditions:
     *   - A call to the static now() method, ex. Carbon::now()
     *   - When a null (or blank string) is passed to the constructor or parse(), ex. new Carbon(null)
     *   - When the string "now" is passed to the constructor or parse(), ex. new Carbon(\'now\')
     *   - When a string containing the desired time is passed to Carbon::parse().
     *
     * Note the timezone parameter was left out of the examples above and
     * has no affect as the mock value will be returned regardless of its value.
     *
     * To clear the test instance call this method using the default
     * parameter of null.
     *
     * /!\\ Use this method for unit tests only.
     *
     * @param Closure|static|string|false|null $testNow real or mock Carbon instance
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '22af0613c4a13bb99ef3a8cfbb3910f2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Temporarily sets a static date to be used within the callback.
     * Using setTestNow to set the date, executing the callback, then
     * clearing the test instance.
     *
     * /!\\ Use this method for unit tests only.
     *
     * @param Closure|static|string|false|null $testNow real or mock Carbon instance
     * @param Closure|null $callback
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'withTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e95ea4de31d54d1658e2d70b6dafc0c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the Carbon instance (real or mock) to be returned when a "now"
     * instance is created.
     *
     * @return Closure|static the current instance used for testing
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '457c34a726951614b0a9fabaa1a93330' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determine if there is a valid test instance set. A valid test instance
     * is anything that is not null.
     *
     * @return bool true if there is a test instance, otherwise false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'hasTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a9f80f331eeefa0da3f75d93d743522c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the given timezone and set it to the test instance if not null.
     * If null, get the timezone from the test instance and return it.
     *
     * @param string|\\DateTimeZone    $tz
     * @param \\Carbon\\CarbonInterface $testInstance
     *
     * @return string|\\DateTimeZone
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'handleMockTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3ca3bb7602b295857f352fa9dd61a30f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the mocked date passed in setTestNow() and if it\'s a Closure, execute it.
     *
     * @param string|\\DateTimeZone $tz
     *
     * @return \\Carbon\\CarbonImmutable|\\Carbon\\Carbon|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getMockedTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1901cf225e68312f1570c04ed2cc5e33' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\Carbon\\CarbonImmutable|\\Carbon\\Carbon $testInstance */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'mockConstructorParameters',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '32bbddd7ccdf339a1f4477c5ec35aff2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '323e007a8a8bacedb65bc5534b4c48b9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Timestamp.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'edff82a93461cfd41eb96d9bebc7815e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp and set the timezone (use default one if not specified).
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string          $timestamp
     * @param \\DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a48c0b2a5cc482d2c85d24bd2450e8ff' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from an timestamp keeping the timezone to UTC.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $timestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromTimestampUTC',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b869fdc3c851415cafe2f9c939191455' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp in milliseconds.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $timestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromTimestampMsUTC',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3a983fa1acf806ed38e243d7224c099' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp in milliseconds.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string          $timestamp
     * @param \\DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'createFromTimestampMs',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aca46226e57946d51e94a0380b3e001c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timestamp.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $unixTimestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'timestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6b5027af9eff86acb8e8f0d73eff32d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a timestamp rounded with the given precision (6 by default).
     *
     * @example getPreciseTimestamp()   1532087464437474 (microsecond maximum precision)
     * @example getPreciseTimestamp(6)  1532087464437474
     * @example getPreciseTimestamp(5)  153208746443747  (1/100000 second precision)
     * @example getPreciseTimestamp(4)  15320874644375   (1/10000 second precision)
     * @example getPreciseTimestamp(3)  1532087464437    (millisecond precision)
     * @example getPreciseTimestamp(2)  153208746444     (1/100 second precision)
     * @example getPreciseTimestamp(1)  15320874644      (1/10 second precision)
     * @example getPreciseTimestamp(0)  1532087464       (second precision)
     * @example getPreciseTimestamp(-1) 153208746        (10 second precision)
     * @example getPreciseTimestamp(-2) 15320875         (100 second precision)
     *
     * @param int $precision
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getPreciseTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '77a1aeb8df55763b47a8b465a77d866a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the milliseconds timestamps used amongst other by Date javascript objects.
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'valueOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b756372ddb74ff6c080d6f41d34caca6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias getTimestamp
     *
     * Returns the UNIX timestamp for the current date.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'unix',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c1a2cfab0b4f96e47cb061737285c67c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return an array with integer part digits and decimals digits split from one or more positive numbers
     * (such as timestamps) as string with the given number of decimals (6 by default).
     *
     * By splitting integer and decimal, this method obtain a better precision than
     * number_format when the input is a string.
     *
     * @param float|int|string $numbers  one or more numbers
     * @param int              $decimals number of decimals precision (6 by default)
     *
     * @return array 0-index is integer part, 1-index is decimal part digits
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getIntegerAndDecimalParts',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ba7af8c6b7a37ae5fd4f58193b5514c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '19d826ba8ee2d3ad8397be842b5fdd23' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Units.
 *
 * Add, subtract and set units.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '56bd17b2a8611089610302ce72d1230e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add seconds to the instance using timestamp. Positive $value travels
     * forward while negative $value travels into the past.
     *
     * @param string $unit
     * @param int    $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'addRealUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8e95ac1531579d4492d51628f42ac422' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if a property can be changed via setter.
     *
     * @param string $unit
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isModifiableUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '335d5c8f849ab6daf53cb17e5a225ed2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Call native PHP DateTime/DateTimeImmutable add() method.
     *
     * @param DateInterval $interval
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'rawAdd',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f8f38c0ab5b8b372417f96be6eb63ff7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add given units or interval to the current instance.
     *
     * @example $date->add(\'hour\', 3)
     * @example $date->add(15, \'days\')
     * @example $date->add(CarbonInterval::days(4))
     *
     * @param string|DateInterval|Closure|CarbonConverterInterface $unit
     * @param int                                                  $value
     * @param bool|null                                            $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'add',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e4edc7f6caa612f7e1eacafe2768b05' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add given units to the current instance.
     *
     * @param string    $unit
     * @param int       $value
     * @param bool|null $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'addUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '693cf3d8a6f100787dec46551a8002ca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var static $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'addUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd9ba0181cf580eeb36a347e5c9e0d7d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units to the current instance.
     *
     * @param string    $unit
     * @param int       $value
     * @param bool|null $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'subUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '380e48d8006392832b84f5de88c9909b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Call native PHP DateTime/DateTimeImmutable sub() method.
     *
     * @param DateInterval $interval
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'rawSub',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '543bda1ae1c2bad60aa1330a487dc32b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units or interval to the current instance.
     *
     * @example $date->sub(\'hour\', 3)
     * @example $date->sub(15, \'days\')
     * @example $date->sub(CarbonInterval::days(4))
     *
     * @param string|DateInterval|Closure|CarbonConverterInterface $unit
     * @param int                                                  $value
     * @param bool|null                                            $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'sub',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '98f1bacb268d76a70dbb07e90697a696' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units or interval to the current instance.
     *
     * @see sub()
     *
     * @param string|DateInterval $unit
     * @param int                 $value
     * @param bool|null           $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'subtract',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c537ddd60841dc4579997205b2d4a275' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd7a659d787863b7a36bbc3af90a27277' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Week.
 *
 * week and ISO week number, year and count in year.
 *
 * Depends on the following properties:
 *
 * @property int $daysInYear
 * @property int $dayOfWeek
 * @property int $dayOfYear
 * @property int $year
 *
 * Depends on the following methods:
 *
 * @method static addWeeks(int $weeks = 1)
 * @method static copy()
 * @method static dayOfYear(int $dayOfYear)
 * @method string getTranslationMessage(string $key, string $locale = null, string $default = null, $translator = null)
 * @method static next(int|string $day = null)
 * @method static startOfWeek(int $day = 1)
 * @method static subWeeks(int $weeks = 1)
 * @method static year(int $year = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5ec5d76617c7308f11735768eafe890a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set/get the week number of year using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isoWeekYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6e6aa4029404e7d0436290eed6867c56' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set/get the week number of year using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'weekYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3a6c4245fd92aa711b236cc423e326dc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the number of weeks of the current week-year using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isoWeeksInYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '56e6a781f89b63fc7e682e5912356ebe' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the number of weeks of the current week-year using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'weeksInYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fb493c4ce36a84ef67ec4d623d24c2bf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the week number using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $week
     * @param int|null $dayOfWeek
     * @param int|null $dayOfYear
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'week',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f84f1f8d80c5435c89250deabd4f190a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the week number using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $week
     * @param int|null $dayOfWeek
     * @param int|null $dayOfYear
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isoWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3a4e753508ed0920488005111601b5b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Names of days of the week.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4a7961db9d93006756f9c303581a9a8e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Will UTF8 encoding be used to print localized date/time ?
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e2e93e27418b5add84fde920be34f065' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of unit and magic methods associated as doc-comments.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '990ce9fd5dd268a77cc3a3ba03e47a35' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Creates a DateTimeZone from a string, DateTimeZone or integer offset.
     *
     * @param DateTimeZone|string|int|null $object     original value to get CarbonTimeZone from it.
     * @param DateTimeZone|string|int|null $objectDump dump of the object for error messages.
     *
     * @throws InvalidTimeZoneException
     *
     * @return CarbonTimeZone|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'safeCreateDateTimeZone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '50448a75a9c1dad40249774a5af43b09' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the TimeZone associated with the Carbon instance (as CarbonTimeZone).
     *
     * @return CarbonTimeZone
     *
     * @link http://php.net/manual/en/datetime.gettimezone.php
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9448e9720d9215be73761ad4c71f9202' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of minimum and maximums for each unit.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getRangesByUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd197230475d1055b80c475ab9e1d70c8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a copy of the instance.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'copy',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cf0cea943aa25203bcd9cdde83491d00' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias copy
     *
     * Get a copy of the instance.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'clone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f912a63c1d8e75fee278bcaaeeb583c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a present instance in the same timezone.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'nowWithSameTz',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8386d9474055b64c70f35c4a61fbeeff' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Throws an exception if the given object is not a DateTime and does not implement DateTimeInterface.
     *
     * @param mixed        $date
     * @param string|array $other
     *
     * @throws InvalidTypeException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'expectDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5064415939f23419126ccc47a7d80aa3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the Carbon instance passed through, a now instance in the same timezone
     * if null given or parse the input if string given.
     *
     * @param Carbon|DateTimeInterface|string|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'resolveCarbon',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b77f5cec3f33ea1be917e0b5bd6cb867' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the Carbon instance passed through, a now instance in the same timezone
     * if null given or parse the input if string given.
     *
     * @param Carbon|\\Carbon\\CarbonPeriod|\\Carbon\\CarbonInterval|\\DateInterval|\\DatePeriod|DateTimeInterface|string|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'carbonize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f2172677b3e44675112970acfa71a13e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a part of the Carbon object
     *
     * @param string $name
     *
     * @throws UnknownGetterException
     *
     * @return string|int|bool|DateTimeZone|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__get',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '29658c6da42b11f073b491ff8ac04ff8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a part of the Carbon object
     *
     * @param string $name
     *
     * @throws UnknownGetterException
     *
     * @return string|int|bool|DateTimeZone|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'get',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '99388d67d7315be7fc18b04fc6582f60' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if an attribute exists on the object
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__isset',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b0707977eaf40d036eb09f7fcd269e30' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a part of the Carbon object
     *
     * @param string                  $name
     * @param string|int|DateTimeZone $value
     *
     * @throws UnknownSetterException|ReflectionException
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__set',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ac5cfd1bc8899d12e5fd2b3d24e19ef7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a part of the Carbon object
     *
     * @param string|array            $name
     * @param string|int|DateTimeZone $value
     *
     * @throws ImmutableException|UnknownSetterException
     *
     * @return $this
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'set',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cd8d62da13f3e313dbd2dab8707730bf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current week day name (with context for languages with multiple forms).
     *
     * @param string|null $context      whole format string
     * @param string      $keySuffix    "", "_short" or "_min"
     * @param string|null $defaultValue default value if translation missing
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslatedDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '147a48e80c1775769b5890f9735e2936' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current short week day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslatedShortDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4cff6b805dae3c180e241df84ab7ffee' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current abbreviated week day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslatedMinDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '08c41c951a9cceb6eb3565efe24ea93f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current month day name (with context for languages with multiple forms).
     *
     * @param string|null $context      whole format string
     * @param string      $keySuffix    "" or "_short"
     * @param string|null $defaultValue default value if translation missing
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslatedMonthName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '802ef8031100f1f43154401b14236dc9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current short month day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getTranslatedShortMonthName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '66f265f0cb7200b4afd48ff74a15302a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the day of year.
     *
     * @param int|null $value new value for day of year if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'dayOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd769cfe6c29ae563a125f63e0dd63637' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the weekday from 0 (Sunday) to 6 (Saturday).
     *
     * @param int|null $value new value for weekday if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'weekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f7030ed4ed4b5ef96b4dfba5362ceb71' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the ISO weekday from 1 (Monday) to 7 (Sunday).
     *
     * @param int|null $value new value for weekday if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isoWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '52748b6ea2feaadce4d9f811e8b14e35' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        new value for the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ffe012487dfc80878e4b316f022cba64' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var static $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '89198dbb54d389c1c80ccfd303b9935b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        amount to add to the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'addUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b4e5d61362caecb8c72ac60f412691b4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        amount to subtract to the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'subUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c54cb3c8563af2544d6f88e68b3c3a24' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the minutes offset to UTC if no arguments passed, else set the timezone with given minutes shift passed.
     *
     * @param int|null $offset
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'utcOffset',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2fbb3c9d1cdad9a0b59529a026b0b6fd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date with gregorian year, month and day numbers.
     *
     * @see https://php.net/manual/en/datetime.setdate.php
     *
     * @param int $year
     * @param int $month
     * @param int $day
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1764380de8b00ef59bb9c893551ce62c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.
     *
     * @see https://php.net/manual/en/datetime.setisodate.php
     *
     * @param int $year
     * @param int $week
     * @param int $day
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setISODate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ca74e562b9a11f9ac02ee25a193952b0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date and time all together.
     *
     * @param int $year
     * @param int $month
     * @param int $day
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microseconds
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '285622c0a1c506361e2c50a71ed28d25' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the current time of the DateTime object to a different time.
     *
     * @see https://php.net/manual/en/datetime.settime.php
     *
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microseconds
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0c2aeef65f9b83f3311c56928550a873' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timestamp.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $unixTimestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b621ef4f49c3d1cb602b92e3c285c721' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the time by time string.
     *
     * @param string $time
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setTimeFromTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '56f00a78e27bc5b1b3f9993777dc7f77' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias setTimezone
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'timezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cac8b5b942cb5b840f2225b23583419f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the timezone or returns the timezone name if no arguments passed.
     *
     * @param DateTimeZone|string $value
     *
     * @return static|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'tz',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'de07ec7648ab0c05646b7ad272753b53' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone from a string or object.
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0cdcf68f4b70874e7ce94f27b0a7d23f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone from a string or object and add/subtract the offset difference.
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'shiftTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7120a6e9a58793945c45520a300bfc4c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone to UTC.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'utc',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '307870289a4055d757962a8fdd1f089b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the year, month, and date for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date now if null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setDateFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dbea1f1725b2428b819dd128fe1f3e83' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the hour, minute, second and microseconds for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date now if null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setTimeFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6304f0e3a352f6b17415f2494e399483' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date and time for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setDateTimeFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4867427aa73b8001a26e48eda58757d9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the days of the week
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ff15b8e2fc12360d3b70ddbd12af0f99' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the first day of week
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getWeekStartsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ac161a13f8fb1b04d002f81a3bfa0896' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             Use $weekEndsAt optional parameter instead when using endOfWeek method. You can also use the
     *             \'first_day_of_week\' locale setting to change the start of week according to current locale
     *             selected and implicitly the end of week.
     *
     * Set the first day of week
     *
     * @param int|string $day week start day (or \'auto\' to get the first day of week from Carbon::getLocale() culture).
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setWeekStartsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e50ab05c77d93f896ce370ef25751ab1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the last day of week
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getWeekEndsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '046719b6cfda7ebce1f1a7e167c55055' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             Use $weekStartsAt optional parameter instead when using startOfWeek, floorWeek, ceilWeek
     *             or roundWeek method. You can also use the \'first_day_of_week\' locale setting to change the
     *             start of week according to current locale selected and implicitly the end of week.
     *
     * Set the last day of week
     *
     * @param int|string $day week end day (or \'auto\' to get the day before the first day of week
     *                        from Carbon::getLocale() culture).
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setWeekEndsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '46e5942dfb7dc7df35eb51c8d37456f9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get weekend days
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7ca009d2b7ef5e538c01f2b7a4aeff3e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather consider week-end is always saturday and sunday, and if you have some custom
     *             week-end days to handle, give to those days an other name and create a macro for them:
     *
     *             ```
     *             Carbon::macro(\'isDayOff\', function ($date) {
     *                 return $date->isSunday() || $date->isMonday();
     *             });
     *             Carbon::macro(\'isNotDayOff\', function ($date) {
     *                 return !$date->isDayOff();
     *             });
     *             if ($someDate->isDayOff()) ...
     *             if ($someDate->isNotDayOff()) ...
     *             // Add 5 not-off days
     *             $count = 5;
     *             while ($someDate->isDayOff() || ($count-- > 0)) {
     *                 $someDate->addDay();
     *             }
     *             ```
     *
     * Set weekend days
     *
     * @param array $days
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0c9fbd670592158f4cc7f7ba5af2f24d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determine if a time string will produce a relative date.
     *
     * @param string $time
     *
     * @return bool true if time match a relative date, false if absolute or invalid time string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'hasRelativeKeywords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b082e8b0d3414758ab4e0d2671ca0893' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use UTF-8 language packages on every machine.
     *
     * Set if UTF8 will be used for localized date/time.
     *
     * @param bool $utf8
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setUtf8',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '643c581bfc4864b487fc625c58dc7e19' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance with the current locale.  You can set the current
     * locale using setlocale() http://php.net/setlocale.
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'formatLocalized',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'abd1ed33aa8ecf976e5d0fdfd0d5f9de' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of locale formats for ISO formatting.
     *
     * @param string|null $locale current locale used if null
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getIsoFormats',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5268d2d8a71c0285bad749e382e58794' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of calendar formats for ISO formatting.
     *
     * @param string|null $locale current locale used if null
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getCalendarFormats',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9b1085e2c9f5c81cceae1a3f8da482ab' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of locale units for ISO formatting.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getIsoUnits',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fc8a61f4c071f1845dbce9cb67f01147' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a unit of the instance padded with 0 by default or any other string if specified.
     *
     * @param string $unit      Carbon unit name
     * @param int    $length    Length of the output (2 by default)
     * @param string $padString String to use for padding ("0" by default)
     * @param int    $padType   Side(s) to pad (STR_PAD_LEFT by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getPaddedUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b8faa2a0ce3718c3af1d90538ccd5c87' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a property with its ordinal.
     *
     * @param string      $key
     * @param string|null $period
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'ordinal',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ca1e689ba6442a9f36162d128af1a9be' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the meridiem of the current time in the current locale.
     *
     * @param bool $isLower if true, returns lowercase variant if available in the current locale.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'meridiem',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da95732a527685778490c358cc47aa5a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the alternative number for a given date property if available in the current locale.
     *
     * @param string $key date property
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getAltNumber',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5b1fed0ad550d6254f4b49cb5e9d4218' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format in the current language using ISO replacement patterns.
     *
     * @param string      $format
     * @param string|null $originalFormat provide context if a chunk has been passed alone
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'isoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7cacd56669131dc3a58d0ed4fadf314f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of replacements from date() format to isoFormat().
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getFormatsToIsoReplacements',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5b4cdf95d3e4e3408ca5f8538510248c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format as ->format() do (using date replacements patterns from http://php.net/manual/fr/function.date.php)
     * but translate words whenever possible (months, day names, etc.) using the current locale.
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'translatedFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '78a73ba539368449abb76c7fdd34a440' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the offset hour and minute formatted with +/- and a given separator (":" by default).
     * For example, if the time zone is 9 hours 30 minutes, you\'ll get "+09:30", with "@@" as first
     * argument, "+09@@30", with "" as first argument, "+0930". Negative offset will return something
     * like "-12:00".
     *
     * @param string $separator string to place between hours and minutes (":" by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'getOffsetString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '247ef9bca110f758652e926c2c849a04' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Dynamically handle calls to the class.
     *
     * @param string $method     magic method name called
     * @param array  $parameters parameters list
     *
     * @throws BadMethodCallException
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__callStatic',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a0e979e3fbbbede871e613c6bc97ca8d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set specified unit to new given value.
     *
     * @param string $unit  year, month, day, hour, minute, second or microsecond
     * @param int    $value new value for given unit
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'setUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3e482c650fe641eec5de9788437c57c6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns standardized singular of a given singular/plural unit name (in English).
     *
     * @param string $unit
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'singularUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe5e41b276595dd572ad4423f013dd96' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns standardized plural of a given singular/plural unit name (in English).
     *
     * @param string $unit
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => 'pluralUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e39e6a644ef5e993bfa8ff512c6fbafc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Dynamically handle calls to the class.
     *
     * @param string $method     magic method name called
     * @param array  $parameters parameters list
     *
     * @throws UnknownMethodException|BadMethodCallException|ReflectionException|Throwable
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\CarbonImmutable',
         'functionName' => '__call',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
  ),
));