<?php declare(strict_types = 1);

return PHPStan\Cache\CacheItem::__set_state(array(
   'variableKey' => 'C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Carbon.php-1610491687,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Date.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Boundaries.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Comparison.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Converter.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Creator.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Difference.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Macro.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Mixin.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Modifiers.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Mutability.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Cast.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Options.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Localization.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Rounding.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\IntervalRounding.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Serialization.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Test.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Timestamp.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Units.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Week.php-1610491694',
   'data' => 
  array (
    'b0b4344081533efd03d83da1f4dcfb65' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
        ),
         'className' => NULL,
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c85a4aa1b7253bde1a242af85e097f27' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * A simple API extension for DateTime.
 *
 * <autodoc generated by `composer phpdoc`>
 *
 * @property      int                 $year
 * @property      int                 $yearIso
 * @property      int                 $month
 * @property      int                 $day
 * @property      int                 $hour
 * @property      int                 $minute
 * @property      int                 $second
 * @property      int                 $micro
 * @property      int                 $microsecond
 * @property      int|float|string    $timestamp                                                                           seconds since the Unix Epoch
 * @property      string              $englishDayOfWeek                                                                    the day of week in English
 * @property      string              $shortEnglishDayOfWeek                                                               the abbreviated day of week in English
 * @property      string              $englishMonth                                                                        the month in English
 * @property      string              $shortEnglishMonth                                                                   the abbreviated month in English
 * @property      string              $localeDayOfWeek                                                                     the day of week in current locale LC_TIME
 * @property      string              $shortLocaleDayOfWeek                                                                the abbreviated day of week in current locale LC_TIME
 * @property      string              $localeMonth                                                                         the month in current locale LC_TIME
 * @property      string              $shortLocaleMonth                                                                    the abbreviated month in current locale LC_TIME
 * @property      int                 $milliseconds
 * @property      int                 $millisecond
 * @property      int                 $milli
 * @property      int                 $week                                                                                1 through 53
 * @property      int                 $isoWeek                                                                             1 through 53
 * @property      int                 $weekYear                                                                            year according to week format
 * @property      int                 $isoWeekYear                                                                         year according to ISO week format
 * @property      int                 $dayOfYear                                                                           1 through 366
 * @property      int                 $age                                                                                 does a diffInYears() with default parameters
 * @property      int                 $offset                                                                              the timezone offset in seconds from UTC
 * @property      int                 $offsetMinutes                                                                       the timezone offset in minutes from UTC
 * @property      int                 $offsetHours                                                                         the timezone offset in hours from UTC
 * @property      CarbonTimeZone      $timezone                                                                            the current timezone
 * @property      CarbonTimeZone      $tz                                                                                  alias of $timezone
 * @property-read int                 $dayOfWeek                                                                           0 (for Sunday) through 6 (for Saturday)
 * @property-read int                 $dayOfWeekIso                                                                        1 (for Monday) through 7 (for Sunday)
 * @property-read int                 $weekOfYear                                                                          ISO-8601 week number of year, weeks starting on Monday
 * @property-read int                 $daysInMonth                                                                         number of days in the given month
 * @property-read string              $latinMeridiem                                                                       "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
 * @property-read string              $latinUpperMeridiem                                                                  "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
 * @property-read string              $timezoneAbbreviatedName                                                             the current timezone abbreviated name
 * @property-read string              $tzAbbrName                                                                          alias of $timezoneAbbreviatedName
 * @property-read string              $dayName                                                                             long name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string              $shortDayName                                                                        short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string              $minDayName                                                                          very short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string              $monthName                                                                           long name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string              $shortMonthName                                                                      short name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string              $meridiem                                                                            lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read string              $upperMeridiem                                                                       uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read int                 $noZeroHour                                                                          current hour from 1 to 24
 * @property-read int                 $weeksInYear                                                                         51 through 53
 * @property-read int                 $isoWeeksInYear                                                                      51 through 53
 * @property-read int                 $weekOfMonth                                                                         1 through 5
 * @property-read int                 $weekNumberInMonth                                                                   1 through 5
 * @property-read int                 $firstWeekDay                                                                        0 through 6
 * @property-read int                 $lastWeekDay                                                                         0 through 6
 * @property-read int                 $daysInYear                                                                          365 or 366
 * @property-read int                 $quarter                                                                             the quarter of this instance, 1 - 4
 * @property-read int                 $decade                                                                              the decade of this instance
 * @property-read int                 $century                                                                             the century of this instance
 * @property-read int                 $millennium                                                                          the millennium of this instance
 * @property-read bool                $dst                                                                                 daylight savings time indicator, true if DST, false otherwise
 * @property-read bool                $local                                                                               checks if the timezone is local, true if local, false otherwise
 * @property-read bool                $utc                                                                                 checks if the timezone is UTC, true if UTC, false otherwise
 * @property-read string              $timezoneName                                                                        the current timezone name
 * @property-read string              $tzName                                                                              alias of $timezoneName
 * @property-read string              $locale                                                                              locale of the current instance
 *
 * @method        bool                isUtc()                                                                              Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
 * @method        bool                isLocal()                                                                            Check if the current instance has non-UTC timezone.
 * @method        bool                isValid()                                                                            Check if the current instance is a valid date.
 * @method        bool                isDST()                                                                              Check if the current instance is in a daylight saving time.
 * @method        bool                isSunday()                                                                           Checks if the instance day is sunday.
 * @method        bool                isMonday()                                                                           Checks if the instance day is monday.
 * @method        bool                isTuesday()                                                                          Checks if the instance day is tuesday.
 * @method        bool                isWednesday()                                                                        Checks if the instance day is wednesday.
 * @method        bool                isThursday()                                                                         Checks if the instance day is thursday.
 * @method        bool                isFriday()                                                                           Checks if the instance day is friday.
 * @method        bool                isSaturday()                                                                         Checks if the instance day is saturday.
 * @method        bool                isSameYear(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentYear()                                                                      Checks if the instance is in the same year as the current moment.
 * @method        bool                isNextYear()                                                                         Checks if the instance is in the same year as the current moment next year.
 * @method        bool                isLastYear()                                                                         Checks if the instance is in the same year as the current moment last year.
 * @method        bool                isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentWeek()                                                                      Checks if the instance is in the same week as the current moment.
 * @method        bool                isNextWeek()                                                                         Checks if the instance is in the same week as the current moment next week.
 * @method        bool                isLastWeek()                                                                         Checks if the instance is in the same week as the current moment last week.
 * @method        bool                isSameDay(Carbon|DateTimeInterface|string|null $date = null)                         Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentDay()                                                                       Checks if the instance is in the same day as the current moment.
 * @method        bool                isNextDay()                                                                          Checks if the instance is in the same day as the current moment next day.
 * @method        bool                isLastDay()                                                                          Checks if the instance is in the same day as the current moment last day.
 * @method        bool                isSameHour(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentHour()                                                                      Checks if the instance is in the same hour as the current moment.
 * @method        bool                isNextHour()                                                                         Checks if the instance is in the same hour as the current moment next hour.
 * @method        bool                isLastHour()                                                                         Checks if the instance is in the same hour as the current moment last hour.
 * @method        bool                isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentMinute()                                                                    Checks if the instance is in the same minute as the current moment.
 * @method        bool                isNextMinute()                                                                       Checks if the instance is in the same minute as the current moment next minute.
 * @method        bool                isLastMinute()                                                                       Checks if the instance is in the same minute as the current moment last minute.
 * @method        bool                isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentSecond()                                                                    Checks if the instance is in the same second as the current moment.
 * @method        bool                isNextSecond()                                                                       Checks if the instance is in the same second as the current moment next second.
 * @method        bool                isLastSecond()                                                                       Checks if the instance is in the same second as the current moment last second.
 * @method        bool                isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentMicro()                                                                     Checks if the instance is in the same microsecond as the current moment.
 * @method        bool                isNextMicro()                                                                        Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool                isLastMicro()                                                                        Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool                isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)                 Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentMicrosecond()                                                               Checks if the instance is in the same microsecond as the current moment.
 * @method        bool                isNextMicrosecond()                                                                  Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool                isLastMicrosecond()                                                                  Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool                isCurrentMonth()                                                                     Checks if the instance is in the same month as the current moment.
 * @method        bool                isNextMonth()                                                                        Checks if the instance is in the same month as the current moment next month.
 * @method        bool                isLastMonth()                                                                        Checks if the instance is in the same month as the current moment last month.
 * @method        bool                isCurrentQuarter()                                                                   Checks if the instance is in the same quarter as the current moment.
 * @method        bool                isNextQuarter()                                                                      Checks if the instance is in the same quarter as the current moment next quarter.
 * @method        bool                isLastQuarter()                                                                      Checks if the instance is in the same quarter as the current moment last quarter.
 * @method        bool                isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentDecade()                                                                    Checks if the instance is in the same decade as the current moment.
 * @method        bool                isNextDecade()                                                                       Checks if the instance is in the same decade as the current moment next decade.
 * @method        bool                isLastDecade()                                                                       Checks if the instance is in the same decade as the current moment last decade.
 * @method        bool                isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentCentury()                                                                   Checks if the instance is in the same century as the current moment.
 * @method        bool                isNextCentury()                                                                      Checks if the instance is in the same century as the current moment next century.
 * @method        bool                isLastCentury()                                                                      Checks if the instance is in the same century as the current moment last century.
 * @method        bool                isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                  Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool                isCurrentMillennium()                                                                Checks if the instance is in the same millennium as the current moment.
 * @method        bool                isNextMillennium()                                                                   Checks if the instance is in the same millennium as the current moment next millennium.
 * @method        bool                isLastMillennium()                                                                   Checks if the instance is in the same millennium as the current moment last millennium.
 * @method        $this               years(int $value)                                                                    Set current instance year to the given value.
 * @method        $this               year(int $value)                                                                     Set current instance year to the given value.
 * @method        $this               setYears(int $value)                                                                 Set current instance year to the given value.
 * @method        $this               setYear(int $value)                                                                  Set current instance year to the given value.
 * @method        $this               months(int $value)                                                                   Set current instance month to the given value.
 * @method        $this               month(int $value)                                                                    Set current instance month to the given value.
 * @method        $this               setMonths(int $value)                                                                Set current instance month to the given value.
 * @method        $this               setMonth(int $value)                                                                 Set current instance month to the given value.
 * @method        $this               days(int $value)                                                                     Set current instance day to the given value.
 * @method        $this               day(int $value)                                                                      Set current instance day to the given value.
 * @method        $this               setDays(int $value)                                                                  Set current instance day to the given value.
 * @method        $this               setDay(int $value)                                                                   Set current instance day to the given value.
 * @method        $this               hours(int $value)                                                                    Set current instance hour to the given value.
 * @method        $this               hour(int $value)                                                                     Set current instance hour to the given value.
 * @method        $this               setHours(int $value)                                                                 Set current instance hour to the given value.
 * @method        $this               setHour(int $value)                                                                  Set current instance hour to the given value.
 * @method        $this               minutes(int $value)                                                                  Set current instance minute to the given value.
 * @method        $this               minute(int $value)                                                                   Set current instance minute to the given value.
 * @method        $this               setMinutes(int $value)                                                               Set current instance minute to the given value.
 * @method        $this               setMinute(int $value)                                                                Set current instance minute to the given value.
 * @method        $this               seconds(int $value)                                                                  Set current instance second to the given value.
 * @method        $this               second(int $value)                                                                   Set current instance second to the given value.
 * @method        $this               setSeconds(int $value)                                                               Set current instance second to the given value.
 * @method        $this               setSecond(int $value)                                                                Set current instance second to the given value.
 * @method        $this               millis(int $value)                                                                   Set current instance millisecond to the given value.
 * @method        $this               milli(int $value)                                                                    Set current instance millisecond to the given value.
 * @method        $this               setMillis(int $value)                                                                Set current instance millisecond to the given value.
 * @method        $this               setMilli(int $value)                                                                 Set current instance millisecond to the given value.
 * @method        $this               milliseconds(int $value)                                                             Set current instance millisecond to the given value.
 * @method        $this               millisecond(int $value)                                                              Set current instance millisecond to the given value.
 * @method        $this               setMilliseconds(int $value)                                                          Set current instance millisecond to the given value.
 * @method        $this               setMillisecond(int $value)                                                           Set current instance millisecond to the given value.
 * @method        $this               micros(int $value)                                                                   Set current instance microsecond to the given value.
 * @method        $this               micro(int $value)                                                                    Set current instance microsecond to the given value.
 * @method        $this               setMicros(int $value)                                                                Set current instance microsecond to the given value.
 * @method        $this               setMicro(int $value)                                                                 Set current instance microsecond to the given value.
 * @method        $this               microseconds(int $value)                                                             Set current instance microsecond to the given value.
 * @method        $this               microsecond(int $value)                                                              Set current instance microsecond to the given value.
 * @method        $this               setMicroseconds(int $value)                                                          Set current instance microsecond to the given value.
 * @method        $this               setMicrosecond(int $value)                                                           Set current instance microsecond to the given value.
 * @method        $this               addYears(int $value = 1)                                                             Add years (the $value count passed in) to the instance (using date interval).
 * @method        $this               addYear()                                                                            Add one year to the instance (using date interval).
 * @method        $this               subYears(int $value = 1)                                                             Sub years (the $value count passed in) to the instance (using date interval).
 * @method        $this               subYear()                                                                            Sub one year to the instance (using date interval).
 * @method        $this               addYearsWithOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addYearWithOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subYearsWithOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subYearWithOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addYearsWithoutOverflow(int $value = 1)                                              Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addYearWithoutOverflow()                                                             Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subYearsWithoutOverflow(int $value = 1)                                              Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subYearWithoutOverflow()                                                             Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addYearsWithNoOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addYearWithNoOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subYearsWithNoOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subYearWithNoOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addYearsNoOverflow(int $value = 1)                                                   Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addYearNoOverflow()                                                                  Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subYearsNoOverflow(int $value = 1)                                                   Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subYearNoOverflow()                                                                  Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMonths(int $value = 1)                                                            Add months (the $value count passed in) to the instance (using date interval).
 * @method        $this               addMonth()                                                                           Add one month to the instance (using date interval).
 * @method        $this               subMonths(int $value = 1)                                                            Sub months (the $value count passed in) to the instance (using date interval).
 * @method        $this               subMonth()                                                                           Sub one month to the instance (using date interval).
 * @method        $this               addMonthsWithOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addMonthWithOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subMonthsWithOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subMonthWithOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addMonthsWithoutOverflow(int $value = 1)                                             Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMonthWithoutOverflow()                                                            Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMonthsWithoutOverflow(int $value = 1)                                             Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMonthWithoutOverflow()                                                            Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMonthsWithNoOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMonthWithNoOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMonthsWithNoOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMonthWithNoOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMonthsNoOverflow(int $value = 1)                                                  Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMonthNoOverflow()                                                                 Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMonthsNoOverflow(int $value = 1)                                                  Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMonthNoOverflow()                                                                 Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addDays(int $value = 1)                                                              Add days (the $value count passed in) to the instance (using date interval).
 * @method        $this               addDay()                                                                             Add one day to the instance (using date interval).
 * @method        $this               subDays(int $value = 1)                                                              Sub days (the $value count passed in) to the instance (using date interval).
 * @method        $this               subDay()                                                                             Sub one day to the instance (using date interval).
 * @method        $this               addHours(int $value = 1)                                                             Add hours (the $value count passed in) to the instance (using date interval).
 * @method        $this               addHour()                                                                            Add one hour to the instance (using date interval).
 * @method        $this               subHours(int $value = 1)                                                             Sub hours (the $value count passed in) to the instance (using date interval).
 * @method        $this               subHour()                                                                            Sub one hour to the instance (using date interval).
 * @method        $this               addMinutes(int $value = 1)                                                           Add minutes (the $value count passed in) to the instance (using date interval).
 * @method        $this               addMinute()                                                                          Add one minute to the instance (using date interval).
 * @method        $this               subMinutes(int $value = 1)                                                           Sub minutes (the $value count passed in) to the instance (using date interval).
 * @method        $this               subMinute()                                                                          Sub one minute to the instance (using date interval).
 * @method        $this               addSeconds(int $value = 1)                                                           Add seconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               addSecond()                                                                          Add one second to the instance (using date interval).
 * @method        $this               subSeconds(int $value = 1)                                                           Sub seconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               subSecond()                                                                          Sub one second to the instance (using date interval).
 * @method        $this               addMillis(int $value = 1)                                                            Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               addMilli()                                                                           Add one millisecond to the instance (using date interval).
 * @method        $this               subMillis(int $value = 1)                                                            Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               subMilli()                                                                           Sub one millisecond to the instance (using date interval).
 * @method        $this               addMilliseconds(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               addMillisecond()                                                                     Add one millisecond to the instance (using date interval).
 * @method        $this               subMilliseconds(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               subMillisecond()                                                                     Sub one millisecond to the instance (using date interval).
 * @method        $this               addMicros(int $value = 1)                                                            Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               addMicro()                                                                           Add one microsecond to the instance (using date interval).
 * @method        $this               subMicros(int $value = 1)                                                            Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               subMicro()                                                                           Sub one microsecond to the instance (using date interval).
 * @method        $this               addMicroseconds(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               addMicrosecond()                                                                     Add one microsecond to the instance (using date interval).
 * @method        $this               subMicroseconds(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        $this               subMicrosecond()                                                                     Sub one microsecond to the instance (using date interval).
 * @method        $this               addMillennia(int $value = 1)                                                         Add millennia (the $value count passed in) to the instance (using date interval).
 * @method        $this               addMillennium()                                                                      Add one millennium to the instance (using date interval).
 * @method        $this               subMillennia(int $value = 1)                                                         Sub millennia (the $value count passed in) to the instance (using date interval).
 * @method        $this               subMillennium()                                                                      Sub one millennium to the instance (using date interval).
 * @method        $this               addMillenniaWithOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addMillenniumWithOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subMillenniaWithOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subMillenniumWithOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addMillenniaWithoutOverflow(int $value = 1)                                          Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMillenniumWithoutOverflow()                                                       Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMillenniaWithoutOverflow(int $value = 1)                                          Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMillenniumWithoutOverflow()                                                       Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMillenniaWithNoOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMillenniumWithNoOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMillenniaWithNoOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMillenniumWithNoOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMillenniaNoOverflow(int $value = 1)                                               Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addMillenniumNoOverflow()                                                            Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMillenniaNoOverflow(int $value = 1)                                               Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subMillenniumNoOverflow()                                                            Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addCenturies(int $value = 1)                                                         Add centuries (the $value count passed in) to the instance (using date interval).
 * @method        $this               addCentury()                                                                         Add one century to the instance (using date interval).
 * @method        $this               subCenturies(int $value = 1)                                                         Sub centuries (the $value count passed in) to the instance (using date interval).
 * @method        $this               subCentury()                                                                         Sub one century to the instance (using date interval).
 * @method        $this               addCenturiesWithOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addCenturyWithOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subCenturiesWithOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subCenturyWithOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addCenturiesWithoutOverflow(int $value = 1)                                          Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addCenturyWithoutOverflow()                                                          Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subCenturiesWithoutOverflow(int $value = 1)                                          Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subCenturyWithoutOverflow()                                                          Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addCenturiesWithNoOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addCenturyWithNoOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subCenturiesWithNoOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subCenturyWithNoOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addCenturiesNoOverflow(int $value = 1)                                               Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addCenturyNoOverflow()                                                               Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subCenturiesNoOverflow(int $value = 1)                                               Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subCenturyNoOverflow()                                                               Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addDecades(int $value = 1)                                                           Add decades (the $value count passed in) to the instance (using date interval).
 * @method        $this               addDecade()                                                                          Add one decade to the instance (using date interval).
 * @method        $this               subDecades(int $value = 1)                                                           Sub decades (the $value count passed in) to the instance (using date interval).
 * @method        $this               subDecade()                                                                          Sub one decade to the instance (using date interval).
 * @method        $this               addDecadesWithOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addDecadeWithOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subDecadesWithOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subDecadeWithOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addDecadesWithoutOverflow(int $value = 1)                                            Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addDecadeWithoutOverflow()                                                           Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subDecadesWithoutOverflow(int $value = 1)                                            Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subDecadeWithoutOverflow()                                                           Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addDecadesWithNoOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addDecadeWithNoOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subDecadesWithNoOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subDecadeWithNoOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addDecadesNoOverflow(int $value = 1)                                                 Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addDecadeNoOverflow()                                                                Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subDecadesNoOverflow(int $value = 1)                                                 Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subDecadeNoOverflow()                                                                Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addQuarters(int $value = 1)                                                          Add quarters (the $value count passed in) to the instance (using date interval).
 * @method        $this               addQuarter()                                                                         Add one quarter to the instance (using date interval).
 * @method        $this               subQuarters(int $value = 1)                                                          Sub quarters (the $value count passed in) to the instance (using date interval).
 * @method        $this               subQuarter()                                                                         Sub one quarter to the instance (using date interval).
 * @method        $this               addQuartersWithOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addQuarterWithOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subQuartersWithOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               subQuarterWithOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        $this               addQuartersWithoutOverflow(int $value = 1)                                           Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addQuarterWithoutOverflow()                                                          Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subQuartersWithoutOverflow(int $value = 1)                                           Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subQuarterWithoutOverflow()                                                          Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addQuartersWithNoOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addQuarterWithNoOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subQuartersWithNoOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subQuarterWithNoOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addQuartersNoOverflow(int $value = 1)                                                Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addQuarterNoOverflow()                                                               Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subQuartersNoOverflow(int $value = 1)                                                Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               subQuarterNoOverflow()                                                               Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        $this               addWeeks(int $value = 1)                                                             Add weeks (the $value count passed in) to the instance (using date interval).
 * @method        $this               addWeek()                                                                            Add one week to the instance (using date interval).
 * @method        $this               subWeeks(int $value = 1)                                                             Sub weeks (the $value count passed in) to the instance (using date interval).
 * @method        $this               subWeek()                                                                            Sub one week to the instance (using date interval).
 * @method        $this               addWeekdays(int $value = 1)                                                          Add weekdays (the $value count passed in) to the instance (using date interval).
 * @method        $this               addWeekday()                                                                         Add one weekday to the instance (using date interval).
 * @method        $this               subWeekdays(int $value = 1)                                                          Sub weekdays (the $value count passed in) to the instance (using date interval).
 * @method        $this               subWeekday()                                                                         Sub one weekday to the instance (using date interval).
 * @method        $this               addRealMicros(int $value = 1)                                                        Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealMicro()                                                                       Add one microsecond to the instance (using timestamp).
 * @method        $this               subRealMicros(int $value = 1)                                                        Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealMicro()                                                                       Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod        microsUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        $this               addRealMicroseconds(int $value = 1)                                                  Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealMicrosecond()                                                                 Add one microsecond to the instance (using timestamp).
 * @method        $this               subRealMicroseconds(int $value = 1)                                                  Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealMicrosecond()                                                                 Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod        microsecondsUntil($endDate = null, int $factor = 1)                                  Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        $this               addRealMillis(int $value = 1)                                                        Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealMilli()                                                                       Add one millisecond to the instance (using timestamp).
 * @method        $this               subRealMillis(int $value = 1)                                                        Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealMilli()                                                                       Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod        millisUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        $this               addRealMilliseconds(int $value = 1)                                                  Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealMillisecond()                                                                 Add one millisecond to the instance (using timestamp).
 * @method        $this               subRealMilliseconds(int $value = 1)                                                  Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealMillisecond()                                                                 Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod        millisecondsUntil($endDate = null, int $factor = 1)                                  Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        $this               addRealSeconds(int $value = 1)                                                       Add seconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealSecond()                                                                      Add one second to the instance (using timestamp).
 * @method        $this               subRealSeconds(int $value = 1)                                                       Sub seconds (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealSecond()                                                                      Sub one second to the instance (using timestamp).
 * @method        CarbonPeriod        secondsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
 * @method        $this               addRealMinutes(int $value = 1)                                                       Add minutes (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealMinute()                                                                      Add one minute to the instance (using timestamp).
 * @method        $this               subRealMinutes(int $value = 1)                                                       Sub minutes (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealMinute()                                                                      Sub one minute to the instance (using timestamp).
 * @method        CarbonPeriod        minutesUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
 * @method        $this               addRealHours(int $value = 1)                                                         Add hours (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealHour()                                                                        Add one hour to the instance (using timestamp).
 * @method        $this               subRealHours(int $value = 1)                                                         Sub hours (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealHour()                                                                        Sub one hour to the instance (using timestamp).
 * @method        CarbonPeriod        hoursUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
 * @method        $this               addRealDays(int $value = 1)                                                          Add days (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealDay()                                                                         Add one day to the instance (using timestamp).
 * @method        $this               subRealDays(int $value = 1)                                                          Sub days (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealDay()                                                                         Sub one day to the instance (using timestamp).
 * @method        CarbonPeriod        daysUntil($endDate = null, int $factor = 1)                                          Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
 * @method        $this               addRealWeeks(int $value = 1)                                                         Add weeks (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealWeek()                                                                        Add one week to the instance (using timestamp).
 * @method        $this               subRealWeeks(int $value = 1)                                                         Sub weeks (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealWeek()                                                                        Sub one week to the instance (using timestamp).
 * @method        CarbonPeriod        weeksUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
 * @method        $this               addRealMonths(int $value = 1)                                                        Add months (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealMonth()                                                                       Add one month to the instance (using timestamp).
 * @method        $this               subRealMonths(int $value = 1)                                                        Sub months (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealMonth()                                                                       Sub one month to the instance (using timestamp).
 * @method        CarbonPeriod        monthsUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
 * @method        $this               addRealQuarters(int $value = 1)                                                      Add quarters (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealQuarter()                                                                     Add one quarter to the instance (using timestamp).
 * @method        $this               subRealQuarters(int $value = 1)                                                      Sub quarters (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealQuarter()                                                                     Sub one quarter to the instance (using timestamp).
 * @method        CarbonPeriod        quartersUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
 * @method        $this               addRealYears(int $value = 1)                                                         Add years (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealYear()                                                                        Add one year to the instance (using timestamp).
 * @method        $this               subRealYears(int $value = 1)                                                         Sub years (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealYear()                                                                        Sub one year to the instance (using timestamp).
 * @method        CarbonPeriod        yearsUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
 * @method        $this               addRealDecades(int $value = 1)                                                       Add decades (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealDecade()                                                                      Add one decade to the instance (using timestamp).
 * @method        $this               subRealDecades(int $value = 1)                                                       Sub decades (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealDecade()                                                                      Sub one decade to the instance (using timestamp).
 * @method        CarbonPeriod        decadesUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
 * @method        $this               addRealCenturies(int $value = 1)                                                     Add centuries (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealCentury()                                                                     Add one century to the instance (using timestamp).
 * @method        $this               subRealCenturies(int $value = 1)                                                     Sub centuries (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealCentury()                                                                     Sub one century to the instance (using timestamp).
 * @method        CarbonPeriod        centuriesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
 * @method        $this               addRealMillennia(int $value = 1)                                                     Add millennia (the $value count passed in) to the instance (using timestamp).
 * @method        $this               addRealMillennium()                                                                  Add one millennium to the instance (using timestamp).
 * @method        $this               subRealMillennia(int $value = 1)                                                     Sub millennia (the $value count passed in) to the instance (using timestamp).
 * @method        $this               subRealMillennium()                                                                  Sub one millennium to the instance (using timestamp).
 * @method        CarbonPeriod        millenniaUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
 * @method        $this               roundYear(float $precision = 1, string $function = "round")                          Round the current instance year with given precision using the given function.
 * @method        $this               roundYears(float $precision = 1, string $function = "round")                         Round the current instance year with given precision using the given function.
 * @method        $this               floorYear(float $precision = 1)                                                      Truncate the current instance year with given precision.
 * @method        $this               floorYears(float $precision = 1)                                                     Truncate the current instance year with given precision.
 * @method        $this               ceilYear(float $precision = 1)                                                       Ceil the current instance year with given precision.
 * @method        $this               ceilYears(float $precision = 1)                                                      Ceil the current instance year with given precision.
 * @method        $this               roundMonth(float $precision = 1, string $function = "round")                         Round the current instance month with given precision using the given function.
 * @method        $this               roundMonths(float $precision = 1, string $function = "round")                        Round the current instance month with given precision using the given function.
 * @method        $this               floorMonth(float $precision = 1)                                                     Truncate the current instance month with given precision.
 * @method        $this               floorMonths(float $precision = 1)                                                    Truncate the current instance month with given precision.
 * @method        $this               ceilMonth(float $precision = 1)                                                      Ceil the current instance month with given precision.
 * @method        $this               ceilMonths(float $precision = 1)                                                     Ceil the current instance month with given precision.
 * @method        $this               roundDay(float $precision = 1, string $function = "round")                           Round the current instance day with given precision using the given function.
 * @method        $this               roundDays(float $precision = 1, string $function = "round")                          Round the current instance day with given precision using the given function.
 * @method        $this               floorDay(float $precision = 1)                                                       Truncate the current instance day with given precision.
 * @method        $this               floorDays(float $precision = 1)                                                      Truncate the current instance day with given precision.
 * @method        $this               ceilDay(float $precision = 1)                                                        Ceil the current instance day with given precision.
 * @method        $this               ceilDays(float $precision = 1)                                                       Ceil the current instance day with given precision.
 * @method        $this               roundHour(float $precision = 1, string $function = "round")                          Round the current instance hour with given precision using the given function.
 * @method        $this               roundHours(float $precision = 1, string $function = "round")                         Round the current instance hour with given precision using the given function.
 * @method        $this               floorHour(float $precision = 1)                                                      Truncate the current instance hour with given precision.
 * @method        $this               floorHours(float $precision = 1)                                                     Truncate the current instance hour with given precision.
 * @method        $this               ceilHour(float $precision = 1)                                                       Ceil the current instance hour with given precision.
 * @method        $this               ceilHours(float $precision = 1)                                                      Ceil the current instance hour with given precision.
 * @method        $this               roundMinute(float $precision = 1, string $function = "round")                        Round the current instance minute with given precision using the given function.
 * @method        $this               roundMinutes(float $precision = 1, string $function = "round")                       Round the current instance minute with given precision using the given function.
 * @method        $this               floorMinute(float $precision = 1)                                                    Truncate the current instance minute with given precision.
 * @method        $this               floorMinutes(float $precision = 1)                                                   Truncate the current instance minute with given precision.
 * @method        $this               ceilMinute(float $precision = 1)                                                     Ceil the current instance minute with given precision.
 * @method        $this               ceilMinutes(float $precision = 1)                                                    Ceil the current instance minute with given precision.
 * @method        $this               roundSecond(float $precision = 1, string $function = "round")                        Round the current instance second with given precision using the given function.
 * @method        $this               roundSeconds(float $precision = 1, string $function = "round")                       Round the current instance second with given precision using the given function.
 * @method        $this               floorSecond(float $precision = 1)                                                    Truncate the current instance second with given precision.
 * @method        $this               floorSeconds(float $precision = 1)                                                   Truncate the current instance second with given precision.
 * @method        $this               ceilSecond(float $precision = 1)                                                     Ceil the current instance second with given precision.
 * @method        $this               ceilSeconds(float $precision = 1)                                                    Ceil the current instance second with given precision.
 * @method        $this               roundMillennium(float $precision = 1, string $function = "round")                    Round the current instance millennium with given precision using the given function.
 * @method        $this               roundMillennia(float $precision = 1, string $function = "round")                     Round the current instance millennium with given precision using the given function.
 * @method        $this               floorMillennium(float $precision = 1)                                                Truncate the current instance millennium with given precision.
 * @method        $this               floorMillennia(float $precision = 1)                                                 Truncate the current instance millennium with given precision.
 * @method        $this               ceilMillennium(float $precision = 1)                                                 Ceil the current instance millennium with given precision.
 * @method        $this               ceilMillennia(float $precision = 1)                                                  Ceil the current instance millennium with given precision.
 * @method        $this               roundCentury(float $precision = 1, string $function = "round")                       Round the current instance century with given precision using the given function.
 * @method        $this               roundCenturies(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
 * @method        $this               floorCentury(float $precision = 1)                                                   Truncate the current instance century with given precision.
 * @method        $this               floorCenturies(float $precision = 1)                                                 Truncate the current instance century with given precision.
 * @method        $this               ceilCentury(float $precision = 1)                                                    Ceil the current instance century with given precision.
 * @method        $this               ceilCenturies(float $precision = 1)                                                  Ceil the current instance century with given precision.
 * @method        $this               roundDecade(float $precision = 1, string $function = "round")                        Round the current instance decade with given precision using the given function.
 * @method        $this               roundDecades(float $precision = 1, string $function = "round")                       Round the current instance decade with given precision using the given function.
 * @method        $this               floorDecade(float $precision = 1)                                                    Truncate the current instance decade with given precision.
 * @method        $this               floorDecades(float $precision = 1)                                                   Truncate the current instance decade with given precision.
 * @method        $this               ceilDecade(float $precision = 1)                                                     Ceil the current instance decade with given precision.
 * @method        $this               ceilDecades(float $precision = 1)                                                    Ceil the current instance decade with given precision.
 * @method        $this               roundQuarter(float $precision = 1, string $function = "round")                       Round the current instance quarter with given precision using the given function.
 * @method        $this               roundQuarters(float $precision = 1, string $function = "round")                      Round the current instance quarter with given precision using the given function.
 * @method        $this               floorQuarter(float $precision = 1)                                                   Truncate the current instance quarter with given precision.
 * @method        $this               floorQuarters(float $precision = 1)                                                  Truncate the current instance quarter with given precision.
 * @method        $this               ceilQuarter(float $precision = 1)                                                    Ceil the current instance quarter with given precision.
 * @method        $this               ceilQuarters(float $precision = 1)                                                   Ceil the current instance quarter with given precision.
 * @method        $this               roundMillisecond(float $precision = 1, string $function = "round")                   Round the current instance millisecond with given precision using the given function.
 * @method        $this               roundMilliseconds(float $precision = 1, string $function = "round")                  Round the current instance millisecond with given precision using the given function.
 * @method        $this               floorMillisecond(float $precision = 1)                                               Truncate the current instance millisecond with given precision.
 * @method        $this               floorMilliseconds(float $precision = 1)                                              Truncate the current instance millisecond with given precision.
 * @method        $this               ceilMillisecond(float $precision = 1)                                                Ceil the current instance millisecond with given precision.
 * @method        $this               ceilMilliseconds(float $precision = 1)                                               Ceil the current instance millisecond with given precision.
 * @method        $this               roundMicrosecond(float $precision = 1, string $function = "round")                   Round the current instance microsecond with given precision using the given function.
 * @method        $this               roundMicroseconds(float $precision = 1, string $function = "round")                  Round the current instance microsecond with given precision using the given function.
 * @method        $this               floorMicrosecond(float $precision = 1)                                               Truncate the current instance microsecond with given precision.
 * @method        $this               floorMicroseconds(float $precision = 1)                                              Truncate the current instance microsecond with given precision.
 * @method        $this               ceilMicrosecond(float $precision = 1)                                                Ceil the current instance microsecond with given precision.
 * @method        $this               ceilMicroseconds(float $precision = 1)                                               Ceil the current instance microsecond with given precision.
 * @method        string              shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)          Get the difference (short format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string              longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)           Get the difference (long format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string              shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)          Get the difference (short format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string              longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)           Get the difference (long format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string              shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)     Get the difference (short format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string              longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)      Get the difference (long format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string              shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string              longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        static Carbon|false createFromFormat(string $format, string $time, string|DateTimeZone $timezone = null) Parse a string into a new Carbon object according to the specified format.
 * @method        static Carbon       __set_state(array $array)                                                            https://php.net/manual/en/datetime.set-state.php
 *
 * </autodoc>
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'date' => 'Carbon\\Traits\\Date',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a5cbaa4f97dc51ddd16b9c612778b3f5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f14e1cd790e798b756a08edb6b62ea56' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * A simple API extension for DateTime.
 *
 * <autodoc generated by `composer phpdoc`>
 *
 * @property      int              $year
 * @property      int              $yearIso
 * @property      int              $month
 * @property      int              $day
 * @property      int              $hour
 * @property      int              $minute
 * @property      int              $second
 * @property      int              $micro
 * @property      int              $microsecond
 * @property      int|float|string $timestamp                                                                         seconds since the Unix Epoch
 * @property      string           $englishDayOfWeek                                                                  the day of week in English
 * @property      string           $shortEnglishDayOfWeek                                                             the abbreviated day of week in English
 * @property      string           $englishMonth                                                                      the month in English
 * @property      string           $shortEnglishMonth                                                                 the abbreviated month in English
 * @property      string           $localeDayOfWeek                                                                   the day of week in current locale LC_TIME
 * @property      string           $shortLocaleDayOfWeek                                                              the abbreviated day of week in current locale LC_TIME
 * @property      string           $localeMonth                                                                       the month in current locale LC_TIME
 * @property      string           $shortLocaleMonth                                                                  the abbreviated month in current locale LC_TIME
 * @property      int              $milliseconds
 * @property      int              $millisecond
 * @property      int              $milli
 * @property      int              $week                                                                              1 through 53
 * @property      int              $isoWeek                                                                           1 through 53
 * @property      int              $weekYear                                                                          year according to week format
 * @property      int              $isoWeekYear                                                                       year according to ISO week format
 * @property      int              $dayOfYear                                                                         1 through 366
 * @property      int              $age                                                                               does a diffInYears() with default parameters
 * @property      int              $offset                                                                            the timezone offset in seconds from UTC
 * @property      int              $offsetMinutes                                                                     the timezone offset in minutes from UTC
 * @property      int              $offsetHours                                                                       the timezone offset in hours from UTC
 * @property      CarbonTimeZone   $timezone                                                                          the current timezone
 * @property      CarbonTimeZone   $tz                                                                                alias of $timezone
 * @property-read int              $dayOfWeek                                                                         0 (for Sunday) through 6 (for Saturday)
 * @property-read int              $dayOfWeekIso                                                                      1 (for Monday) through 7 (for Sunday)
 * @property-read int              $weekOfYear                                                                        ISO-8601 week number of year, weeks starting on Monday
 * @property-read int              $daysInMonth                                                                       number of days in the given month
 * @property-read string           $latinMeridiem                                                                     "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
 * @property-read string           $latinUpperMeridiem                                                                "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
 * @property-read string           $timezoneAbbreviatedName                                                           the current timezone abbreviated name
 * @property-read string           $tzAbbrName                                                                        alias of $timezoneAbbreviatedName
 * @property-read string           $dayName                                                                           long name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $shortDayName                                                                      short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $minDayName                                                                        very short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $monthName                                                                         long name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $shortMonthName                                                                    short name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $meridiem                                                                          lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read string           $upperMeridiem                                                                     uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read int              $noZeroHour                                                                        current hour from 1 to 24
 * @property-read int              $weeksInYear                                                                       51 through 53
 * @property-read int              $isoWeeksInYear                                                                    51 through 53
 * @property-read int              $weekOfMonth                                                                       1 through 5
 * @property-read int              $weekNumberInMonth                                                                 1 through 5
 * @property-read int              $firstWeekDay                                                                      0 through 6
 * @property-read int              $lastWeekDay                                                                       0 through 6
 * @property-read int              $daysInYear                                                                        365 or 366
 * @property-read int              $quarter                                                                           the quarter of this instance, 1 - 4
 * @property-read int              $decade                                                                            the decade of this instance
 * @property-read int              $century                                                                           the century of this instance
 * @property-read int              $millennium                                                                        the millennium of this instance
 * @property-read bool             $dst                                                                               daylight savings time indicator, true if DST, false otherwise
 * @property-read bool             $local                                                                             checks if the timezone is local, true if local, false otherwise
 * @property-read bool             $utc                                                                               checks if the timezone is UTC, true if UTC, false otherwise
 * @property-read string           $timezoneName                                                                      the current timezone name
 * @property-read string           $tzName                                                                            alias of $timezoneName
 * @property-read string           $locale                                                                            locale of the current instance
 *
 * @method        bool             isUtc()                                                                            Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
 * @method        bool             isLocal()                                                                          Check if the current instance has non-UTC timezone.
 * @method        bool             isValid()                                                                          Check if the current instance is a valid date.
 * @method        bool             isDST()                                                                            Check if the current instance is in a daylight saving time.
 * @method        bool             isSunday()                                                                         Checks if the instance day is sunday.
 * @method        bool             isMonday()                                                                         Checks if the instance day is monday.
 * @method        bool             isTuesday()                                                                        Checks if the instance day is tuesday.
 * @method        bool             isWednesday()                                                                      Checks if the instance day is wednesday.
 * @method        bool             isThursday()                                                                       Checks if the instance day is thursday.
 * @method        bool             isFriday()                                                                         Checks if the instance day is friday.
 * @method        bool             isSaturday()                                                                       Checks if the instance day is saturday.
 * @method        bool             isSameYear(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentYear()                                                                    Checks if the instance is in the same year as the current moment.
 * @method        bool             isNextYear()                                                                       Checks if the instance is in the same year as the current moment next year.
 * @method        bool             isLastYear()                                                                       Checks if the instance is in the same year as the current moment last year.
 * @method        bool             isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentWeek()                                                                    Checks if the instance is in the same week as the current moment.
 * @method        bool             isNextWeek()                                                                       Checks if the instance is in the same week as the current moment next week.
 * @method        bool             isLastWeek()                                                                       Checks if the instance is in the same week as the current moment last week.
 * @method        bool             isSameDay(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentDay()                                                                     Checks if the instance is in the same day as the current moment.
 * @method        bool             isNextDay()                                                                        Checks if the instance is in the same day as the current moment next day.
 * @method        bool             isLastDay()                                                                        Checks if the instance is in the same day as the current moment last day.
 * @method        bool             isSameHour(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentHour()                                                                    Checks if the instance is in the same hour as the current moment.
 * @method        bool             isNextHour()                                                                       Checks if the instance is in the same hour as the current moment next hour.
 * @method        bool             isLastHour()                                                                       Checks if the instance is in the same hour as the current moment last hour.
 * @method        bool             isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMinute()                                                                  Checks if the instance is in the same minute as the current moment.
 * @method        bool             isNextMinute()                                                                     Checks if the instance is in the same minute as the current moment next minute.
 * @method        bool             isLastMinute()                                                                     Checks if the instance is in the same minute as the current moment last minute.
 * @method        bool             isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentSecond()                                                                  Checks if the instance is in the same second as the current moment.
 * @method        bool             isNextSecond()                                                                     Checks if the instance is in the same second as the current moment next second.
 * @method        bool             isLastSecond()                                                                     Checks if the instance is in the same second as the current moment last second.
 * @method        bool             isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMicro()                                                                   Checks if the instance is in the same microsecond as the current moment.
 * @method        bool             isNextMicro()                                                                      Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool             isLastMicro()                                                                      Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool             isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)               Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMicrosecond()                                                             Checks if the instance is in the same microsecond as the current moment.
 * @method        bool             isNextMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool             isLastMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool             isCurrentMonth()                                                                   Checks if the instance is in the same month as the current moment.
 * @method        bool             isNextMonth()                                                                      Checks if the instance is in the same month as the current moment next month.
 * @method        bool             isLastMonth()                                                                      Checks if the instance is in the same month as the current moment last month.
 * @method        bool             isCurrentQuarter()                                                                 Checks if the instance is in the same quarter as the current moment.
 * @method        bool             isNextQuarter()                                                                    Checks if the instance is in the same quarter as the current moment next quarter.
 * @method        bool             isLastQuarter()                                                                    Checks if the instance is in the same quarter as the current moment last quarter.
 * @method        bool             isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentDecade()                                                                  Checks if the instance is in the same decade as the current moment.
 * @method        bool             isNextDecade()                                                                     Checks if the instance is in the same decade as the current moment next decade.
 * @method        bool             isLastDecade()                                                                     Checks if the instance is in the same decade as the current moment last decade.
 * @method        bool             isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                   Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentCentury()                                                                 Checks if the instance is in the same century as the current moment.
 * @method        bool             isNextCentury()                                                                    Checks if the instance is in the same century as the current moment next century.
 * @method        bool             isLastCentury()                                                                    Checks if the instance is in the same century as the current moment last century.
 * @method        bool             isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMillennium()                                                              Checks if the instance is in the same millennium as the current moment.
 * @method        bool             isNextMillennium()                                                                 Checks if the instance is in the same millennium as the current moment next millennium.
 * @method        bool             isLastMillennium()                                                                 Checks if the instance is in the same millennium as the current moment last millennium.
 * @method        CarbonInterface  years(int $value)                                                                  Set current instance year to the given value.
 * @method        CarbonInterface  year(int $value)                                                                   Set current instance year to the given value.
 * @method        CarbonInterface  setYears(int $value)                                                               Set current instance year to the given value.
 * @method        CarbonInterface  setYear(int $value)                                                                Set current instance year to the given value.
 * @method        CarbonInterface  months(int $value)                                                                 Set current instance month to the given value.
 * @method        CarbonInterface  month(int $value)                                                                  Set current instance month to the given value.
 * @method        CarbonInterface  setMonths(int $value)                                                              Set current instance month to the given value.
 * @method        CarbonInterface  setMonth(int $value)                                                               Set current instance month to the given value.
 * @method        CarbonInterface  days(int $value)                                                                   Set current instance day to the given value.
 * @method        CarbonInterface  day(int $value)                                                                    Set current instance day to the given value.
 * @method        CarbonInterface  setDays(int $value)                                                                Set current instance day to the given value.
 * @method        CarbonInterface  setDay(int $value)                                                                 Set current instance day to the given value.
 * @method        CarbonInterface  hours(int $value)                                                                  Set current instance hour to the given value.
 * @method        CarbonInterface  hour(int $value)                                                                   Set current instance hour to the given value.
 * @method        CarbonInterface  setHours(int $value)                                                               Set current instance hour to the given value.
 * @method        CarbonInterface  setHour(int $value)                                                                Set current instance hour to the given value.
 * @method        CarbonInterface  minutes(int $value)                                                                Set current instance minute to the given value.
 * @method        CarbonInterface  minute(int $value)                                                                 Set current instance minute to the given value.
 * @method        CarbonInterface  setMinutes(int $value)                                                             Set current instance minute to the given value.
 * @method        CarbonInterface  setMinute(int $value)                                                              Set current instance minute to the given value.
 * @method        CarbonInterface  seconds(int $value)                                                                Set current instance second to the given value.
 * @method        CarbonInterface  second(int $value)                                                                 Set current instance second to the given value.
 * @method        CarbonInterface  setSeconds(int $value)                                                             Set current instance second to the given value.
 * @method        CarbonInterface  setSecond(int $value)                                                              Set current instance second to the given value.
 * @method        CarbonInterface  millis(int $value)                                                                 Set current instance millisecond to the given value.
 * @method        CarbonInterface  milli(int $value)                                                                  Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMillis(int $value)                                                              Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMilli(int $value)                                                               Set current instance millisecond to the given value.
 * @method        CarbonInterface  milliseconds(int $value)                                                           Set current instance millisecond to the given value.
 * @method        CarbonInterface  millisecond(int $value)                                                            Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMilliseconds(int $value)                                                        Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMillisecond(int $value)                                                         Set current instance millisecond to the given value.
 * @method        CarbonInterface  micros(int $value)                                                                 Set current instance microsecond to the given value.
 * @method        CarbonInterface  micro(int $value)                                                                  Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicros(int $value)                                                              Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicro(int $value)                                                               Set current instance microsecond to the given value.
 * @method        CarbonInterface  microseconds(int $value)                                                           Set current instance microsecond to the given value.
 * @method        CarbonInterface  microsecond(int $value)                                                            Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicroseconds(int $value)                                                        Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicrosecond(int $value)                                                         Set current instance microsecond to the given value.
 * @method        CarbonInterface  addYears(int $value = 1)                                                           Add years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addYear()                                                                          Add one year to the instance (using date interval).
 * @method        CarbonInterface  subYears(int $value = 1)                                                           Sub years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subYear()                                                                          Sub one year to the instance (using date interval).
 * @method        CarbonInterface  addYearsWithOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addYearWithOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subYearsWithOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subYearWithOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addYearsWithoutOverflow(int $value = 1)                                            Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearWithoutOverflow()                                                           Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsWithoutOverflow(int $value = 1)                                            Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearWithoutOverflow()                                                           Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearsWithNoOverflow(int $value = 1)                                             Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearWithNoOverflow()                                                            Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsWithNoOverflow(int $value = 1)                                             Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearWithNoOverflow()                                                            Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearsNoOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearNoOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsNoOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearNoOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonths(int $value = 1)                                                          Add months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMonth()                                                                         Add one month to the instance (using date interval).
 * @method        CarbonInterface  subMonths(int $value = 1)                                                          Sub months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMonth()                                                                         Sub one month to the instance (using date interval).
 * @method        CarbonInterface  addMonthsWithOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMonthWithOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMonthsWithOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMonthWithOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMonthsWithoutOverflow(int $value = 1)                                           Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthWithoutOverflow()                                                          Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsWithoutOverflow(int $value = 1)                                           Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthWithoutOverflow()                                                          Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthsWithNoOverflow(int $value = 1)                                            Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthWithNoOverflow()                                                           Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsWithNoOverflow(int $value = 1)                                            Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthWithNoOverflow()                                                           Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthsNoOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthNoOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsNoOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthNoOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDays(int $value = 1)                                                            Add days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addDay()                                                                           Add one day to the instance (using date interval).
 * @method        CarbonInterface  subDays(int $value = 1)                                                            Sub days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subDay()                                                                           Sub one day to the instance (using date interval).
 * @method        CarbonInterface  addHours(int $value = 1)                                                           Add hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addHour()                                                                          Add one hour to the instance (using date interval).
 * @method        CarbonInterface  subHours(int $value = 1)                                                           Sub hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subHour()                                                                          Sub one hour to the instance (using date interval).
 * @method        CarbonInterface  addMinutes(int $value = 1)                                                         Add minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMinute()                                                                        Add one minute to the instance (using date interval).
 * @method        CarbonInterface  subMinutes(int $value = 1)                                                         Sub minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMinute()                                                                        Sub one minute to the instance (using date interval).
 * @method        CarbonInterface  addSeconds(int $value = 1)                                                         Add seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addSecond()                                                                        Add one second to the instance (using date interval).
 * @method        CarbonInterface  subSeconds(int $value = 1)                                                         Sub seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subSecond()                                                                        Sub one second to the instance (using date interval).
 * @method        CarbonInterface  addMillis(int $value = 1)                                                          Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMilli()                                                                         Add one millisecond to the instance (using date interval).
 * @method        CarbonInterface  subMillis(int $value = 1)                                                          Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMilli()                                                                         Sub one millisecond to the instance (using date interval).
 * @method        CarbonInterface  addMilliseconds(int $value = 1)                                                    Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMillisecond()                                                                   Add one millisecond to the instance (using date interval).
 * @method        CarbonInterface  subMilliseconds(int $value = 1)                                                    Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMillisecond()                                                                   Sub one millisecond to the instance (using date interval).
 * @method        CarbonInterface  addMicros(int $value = 1)                                                          Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMicro()                                                                         Add one microsecond to the instance (using date interval).
 * @method        CarbonInterface  subMicros(int $value = 1)                                                          Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMicro()                                                                         Sub one microsecond to the instance (using date interval).
 * @method        CarbonInterface  addMicroseconds(int $value = 1)                                                    Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMicrosecond()                                                                   Add one microsecond to the instance (using date interval).
 * @method        CarbonInterface  subMicroseconds(int $value = 1)                                                    Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMicrosecond()                                                                   Sub one microsecond to the instance (using date interval).
 * @method        CarbonInterface  addMillennia(int $value = 1)                                                       Add millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMillennium()                                                                    Add one millennium to the instance (using date interval).
 * @method        CarbonInterface  subMillennia(int $value = 1)                                                       Sub millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMillennium()                                                                    Sub one millennium to the instance (using date interval).
 * @method        CarbonInterface  addMillenniaWithOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMillenniumWithOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMillenniaWithOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMillenniumWithOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMillenniaWithoutOverflow(int $value = 1)                                        Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumWithoutOverflow()                                                     Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaWithoutOverflow(int $value = 1)                                        Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumWithoutOverflow()                                                     Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniaWithNoOverflow(int $value = 1)                                         Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumWithNoOverflow()                                                      Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaWithNoOverflow(int $value = 1)                                         Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumWithNoOverflow()                                                      Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniaNoOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumNoOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaNoOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumNoOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturies(int $value = 1)                                                       Add centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addCentury()                                                                       Add one century to the instance (using date interval).
 * @method        CarbonInterface  subCenturies(int $value = 1)                                                       Sub centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subCentury()                                                                       Sub one century to the instance (using date interval).
 * @method        CarbonInterface  addCenturiesWithOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addCenturyWithOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subCenturiesWithOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subCenturyWithOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addCenturiesWithoutOverflow(int $value = 1)                                        Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyWithoutOverflow()                                                        Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesWithoutOverflow(int $value = 1)                                        Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyWithoutOverflow()                                                        Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturiesWithNoOverflow(int $value = 1)                                         Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyWithNoOverflow()                                                         Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesWithNoOverflow(int $value = 1)                                         Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyWithNoOverflow()                                                         Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturiesNoOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyNoOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesNoOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyNoOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecades(int $value = 1)                                                         Add decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addDecade()                                                                        Add one decade to the instance (using date interval).
 * @method        CarbonInterface  subDecades(int $value = 1)                                                         Sub decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subDecade()                                                                        Sub one decade to the instance (using date interval).
 * @method        CarbonInterface  addDecadesWithOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addDecadeWithOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subDecadesWithOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subDecadeWithOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addDecadesWithoutOverflow(int $value = 1)                                          Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeWithoutOverflow()                                                         Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesWithoutOverflow(int $value = 1)                                          Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeWithoutOverflow()                                                         Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadesWithNoOverflow(int $value = 1)                                           Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeWithNoOverflow()                                                          Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesWithNoOverflow(int $value = 1)                                           Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeWithNoOverflow()                                                          Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadesNoOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeNoOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesNoOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeNoOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarters(int $value = 1)                                                        Add quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addQuarter()                                                                       Add one quarter to the instance (using date interval).
 * @method        CarbonInterface  subQuarters(int $value = 1)                                                        Sub quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subQuarter()                                                                       Sub one quarter to the instance (using date interval).
 * @method        CarbonInterface  addQuartersWithOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addQuarterWithOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subQuartersWithOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subQuarterWithOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addQuartersWithoutOverflow(int $value = 1)                                         Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterWithoutOverflow()                                                        Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersWithoutOverflow(int $value = 1)                                         Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterWithoutOverflow()                                                        Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuartersWithNoOverflow(int $value = 1)                                          Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterWithNoOverflow()                                                         Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersWithNoOverflow(int $value = 1)                                          Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterWithNoOverflow()                                                         Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuartersNoOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterNoOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersNoOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterNoOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addWeeks(int $value = 1)                                                           Add weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addWeek()                                                                          Add one week to the instance (using date interval).
 * @method        CarbonInterface  subWeeks(int $value = 1)                                                           Sub weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subWeek()                                                                          Sub one week to the instance (using date interval).
 * @method        CarbonInterface  addWeekdays(int $value = 1)                                                        Add weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addWeekday()                                                                       Add one weekday to the instance (using date interval).
 * @method        CarbonInterface  subWeekdays(int $value = 1)                                                        Sub weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subWeekday()                                                                       Sub one weekday to the instance (using date interval).
 * @method        CarbonInterface  addRealMicros(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMicro()                                                                     Add one microsecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicros(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicro()                                                                     Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod     microsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonInterface  addRealMicroseconds(int $value = 1)                                                Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMicrosecond()                                                               Add one microsecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicroseconds(int $value = 1)                                                Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicrosecond()                                                               Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod     microsecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonInterface  addRealMillis(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMilli()                                                                     Add one millisecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillis(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMilli()                                                                     Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod     millisUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonInterface  addRealMilliseconds(int $value = 1)                                                Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMillisecond()                                                               Add one millisecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMilliseconds(int $value = 1)                                                Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillisecond()                                                               Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod     millisecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonInterface  addRealSeconds(int $value = 1)                                                     Add seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealSecond()                                                                    Add one second to the instance (using timestamp).
 * @method        CarbonInterface  subRealSeconds(int $value = 1)                                                     Sub seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealSecond()                                                                    Sub one second to the instance (using timestamp).
 * @method        CarbonPeriod     secondsUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
 * @method        CarbonInterface  addRealMinutes(int $value = 1)                                                     Add minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMinute()                                                                    Add one minute to the instance (using timestamp).
 * @method        CarbonInterface  subRealMinutes(int $value = 1)                                                     Sub minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMinute()                                                                    Sub one minute to the instance (using timestamp).
 * @method        CarbonPeriod     minutesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
 * @method        CarbonInterface  addRealHours(int $value = 1)                                                       Add hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealHour()                                                                      Add one hour to the instance (using timestamp).
 * @method        CarbonInterface  subRealHours(int $value = 1)                                                       Sub hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealHour()                                                                      Sub one hour to the instance (using timestamp).
 * @method        CarbonPeriod     hoursUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
 * @method        CarbonInterface  addRealDays(int $value = 1)                                                        Add days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealDay()                                                                       Add one day to the instance (using timestamp).
 * @method        CarbonInterface  subRealDays(int $value = 1)                                                        Sub days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealDay()                                                                       Sub one day to the instance (using timestamp).
 * @method        CarbonPeriod     daysUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
 * @method        CarbonInterface  addRealWeeks(int $value = 1)                                                       Add weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealWeek()                                                                      Add one week to the instance (using timestamp).
 * @method        CarbonInterface  subRealWeeks(int $value = 1)                                                       Sub weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealWeek()                                                                      Sub one week to the instance (using timestamp).
 * @method        CarbonPeriod     weeksUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
 * @method        CarbonInterface  addRealMonths(int $value = 1)                                                      Add months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMonth()                                                                     Add one month to the instance (using timestamp).
 * @method        CarbonInterface  subRealMonths(int $value = 1)                                                      Sub months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMonth()                                                                     Sub one month to the instance (using timestamp).
 * @method        CarbonPeriod     monthsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
 * @method        CarbonInterface  addRealQuarters(int $value = 1)                                                    Add quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealQuarter()                                                                   Add one quarter to the instance (using timestamp).
 * @method        CarbonInterface  subRealQuarters(int $value = 1)                                                    Sub quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealQuarter()                                                                   Sub one quarter to the instance (using timestamp).
 * @method        CarbonPeriod     quartersUntil($endDate = null, int $factor = 1)                                    Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
 * @method        CarbonInterface  addRealYears(int $value = 1)                                                       Add years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealYear()                                                                      Add one year to the instance (using timestamp).
 * @method        CarbonInterface  subRealYears(int $value = 1)                                                       Sub years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealYear()                                                                      Sub one year to the instance (using timestamp).
 * @method        CarbonPeriod     yearsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
 * @method        CarbonInterface  addRealDecades(int $value = 1)                                                     Add decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealDecade()                                                                    Add one decade to the instance (using timestamp).
 * @method        CarbonInterface  subRealDecades(int $value = 1)                                                     Sub decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealDecade()                                                                    Sub one decade to the instance (using timestamp).
 * @method        CarbonPeriod     decadesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
 * @method        CarbonInterface  addRealCenturies(int $value = 1)                                                   Add centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealCentury()                                                                   Add one century to the instance (using timestamp).
 * @method        CarbonInterface  subRealCenturies(int $value = 1)                                                   Sub centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealCentury()                                                                   Sub one century to the instance (using timestamp).
 * @method        CarbonPeriod     centuriesUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
 * @method        CarbonInterface  addRealMillennia(int $value = 1)                                                   Add millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMillennium()                                                                Add one millennium to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillennia(int $value = 1)                                                   Sub millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillennium()                                                                Sub one millennium to the instance (using timestamp).
 * @method        CarbonPeriod     millenniaUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
 * @method        CarbonInterface  roundYear(float $precision = 1, string $function = "round")                        Round the current instance year with given precision using the given function.
 * @method        CarbonInterface  roundYears(float $precision = 1, string $function = "round")                       Round the current instance year with given precision using the given function.
 * @method        CarbonInterface  floorYear(float $precision = 1)                                                    Truncate the current instance year with given precision.
 * @method        CarbonInterface  floorYears(float $precision = 1)                                                   Truncate the current instance year with given precision.
 * @method        CarbonInterface  ceilYear(float $precision = 1)                                                     Ceil the current instance year with given precision.
 * @method        CarbonInterface  ceilYears(float $precision = 1)                                                    Ceil the current instance year with given precision.
 * @method        CarbonInterface  roundMonth(float $precision = 1, string $function = "round")                       Round the current instance month with given precision using the given function.
 * @method        CarbonInterface  roundMonths(float $precision = 1, string $function = "round")                      Round the current instance month with given precision using the given function.
 * @method        CarbonInterface  floorMonth(float $precision = 1)                                                   Truncate the current instance month with given precision.
 * @method        CarbonInterface  floorMonths(float $precision = 1)                                                  Truncate the current instance month with given precision.
 * @method        CarbonInterface  ceilMonth(float $precision = 1)                                                    Ceil the current instance month with given precision.
 * @method        CarbonInterface  ceilMonths(float $precision = 1)                                                   Ceil the current instance month with given precision.
 * @method        CarbonInterface  roundDay(float $precision = 1, string $function = "round")                         Round the current instance day with given precision using the given function.
 * @method        CarbonInterface  roundDays(float $precision = 1, string $function = "round")                        Round the current instance day with given precision using the given function.
 * @method        CarbonInterface  floorDay(float $precision = 1)                                                     Truncate the current instance day with given precision.
 * @method        CarbonInterface  floorDays(float $precision = 1)                                                    Truncate the current instance day with given precision.
 * @method        CarbonInterface  ceilDay(float $precision = 1)                                                      Ceil the current instance day with given precision.
 * @method        CarbonInterface  ceilDays(float $precision = 1)                                                     Ceil the current instance day with given precision.
 * @method        CarbonInterface  roundHour(float $precision = 1, string $function = "round")                        Round the current instance hour with given precision using the given function.
 * @method        CarbonInterface  roundHours(float $precision = 1, string $function = "round")                       Round the current instance hour with given precision using the given function.
 * @method        CarbonInterface  floorHour(float $precision = 1)                                                    Truncate the current instance hour with given precision.
 * @method        CarbonInterface  floorHours(float $precision = 1)                                                   Truncate the current instance hour with given precision.
 * @method        CarbonInterface  ceilHour(float $precision = 1)                                                     Ceil the current instance hour with given precision.
 * @method        CarbonInterface  ceilHours(float $precision = 1)                                                    Ceil the current instance hour with given precision.
 * @method        CarbonInterface  roundMinute(float $precision = 1, string $function = "round")                      Round the current instance minute with given precision using the given function.
 * @method        CarbonInterface  roundMinutes(float $precision = 1, string $function = "round")                     Round the current instance minute with given precision using the given function.
 * @method        CarbonInterface  floorMinute(float $precision = 1)                                                  Truncate the current instance minute with given precision.
 * @method        CarbonInterface  floorMinutes(float $precision = 1)                                                 Truncate the current instance minute with given precision.
 * @method        CarbonInterface  ceilMinute(float $precision = 1)                                                   Ceil the current instance minute with given precision.
 * @method        CarbonInterface  ceilMinutes(float $precision = 1)                                                  Ceil the current instance minute with given precision.
 * @method        CarbonInterface  roundSecond(float $precision = 1, string $function = "round")                      Round the current instance second with given precision using the given function.
 * @method        CarbonInterface  roundSeconds(float $precision = 1, string $function = "round")                     Round the current instance second with given precision using the given function.
 * @method        CarbonInterface  floorSecond(float $precision = 1)                                                  Truncate the current instance second with given precision.
 * @method        CarbonInterface  floorSeconds(float $precision = 1)                                                 Truncate the current instance second with given precision.
 * @method        CarbonInterface  ceilSecond(float $precision = 1)                                                   Ceil the current instance second with given precision.
 * @method        CarbonInterface  ceilSeconds(float $precision = 1)                                                  Ceil the current instance second with given precision.
 * @method        CarbonInterface  roundMillennium(float $precision = 1, string $function = "round")                  Round the current instance millennium with given precision using the given function.
 * @method        CarbonInterface  roundMillennia(float $precision = 1, string $function = "round")                   Round the current instance millennium with given precision using the given function.
 * @method        CarbonInterface  floorMillennium(float $precision = 1)                                              Truncate the current instance millennium with given precision.
 * @method        CarbonInterface  floorMillennia(float $precision = 1)                                               Truncate the current instance millennium with given precision.
 * @method        CarbonInterface  ceilMillennium(float $precision = 1)                                               Ceil the current instance millennium with given precision.
 * @method        CarbonInterface  ceilMillennia(float $precision = 1)                                                Ceil the current instance millennium with given precision.
 * @method        CarbonInterface  roundCentury(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
 * @method        CarbonInterface  roundCenturies(float $precision = 1, string $function = "round")                   Round the current instance century with given precision using the given function.
 * @method        CarbonInterface  floorCentury(float $precision = 1)                                                 Truncate the current instance century with given precision.
 * @method        CarbonInterface  floorCenturies(float $precision = 1)                                               Truncate the current instance century with given precision.
 * @method        CarbonInterface  ceilCentury(float $precision = 1)                                                  Ceil the current instance century with given precision.
 * @method        CarbonInterface  ceilCenturies(float $precision = 1)                                                Ceil the current instance century with given precision.
 * @method        CarbonInterface  roundDecade(float $precision = 1, string $function = "round")                      Round the current instance decade with given precision using the given function.
 * @method        CarbonInterface  roundDecades(float $precision = 1, string $function = "round")                     Round the current instance decade with given precision using the given function.
 * @method        CarbonInterface  floorDecade(float $precision = 1)                                                  Truncate the current instance decade with given precision.
 * @method        CarbonInterface  floorDecades(float $precision = 1)                                                 Truncate the current instance decade with given precision.
 * @method        CarbonInterface  ceilDecade(float $precision = 1)                                                   Ceil the current instance decade with given precision.
 * @method        CarbonInterface  ceilDecades(float $precision = 1)                                                  Ceil the current instance decade with given precision.
 * @method        CarbonInterface  roundQuarter(float $precision = 1, string $function = "round")                     Round the current instance quarter with given precision using the given function.
 * @method        CarbonInterface  roundQuarters(float $precision = 1, string $function = "round")                    Round the current instance quarter with given precision using the given function.
 * @method        CarbonInterface  floorQuarter(float $precision = 1)                                                 Truncate the current instance quarter with given precision.
 * @method        CarbonInterface  floorQuarters(float $precision = 1)                                                Truncate the current instance quarter with given precision.
 * @method        CarbonInterface  ceilQuarter(float $precision = 1)                                                  Ceil the current instance quarter with given precision.
 * @method        CarbonInterface  ceilQuarters(float $precision = 1)                                                 Ceil the current instance quarter with given precision.
 * @method        CarbonInterface  roundMillisecond(float $precision = 1, string $function = "round")                 Round the current instance millisecond with given precision using the given function.
 * @method        CarbonInterface  roundMilliseconds(float $precision = 1, string $function = "round")                Round the current instance millisecond with given precision using the given function.
 * @method        CarbonInterface  floorMillisecond(float $precision = 1)                                             Truncate the current instance millisecond with given precision.
 * @method        CarbonInterface  floorMilliseconds(float $precision = 1)                                            Truncate the current instance millisecond with given precision.
 * @method        CarbonInterface  ceilMillisecond(float $precision = 1)                                              Ceil the current instance millisecond with given precision.
 * @method        CarbonInterface  ceilMilliseconds(float $precision = 1)                                             Ceil the current instance millisecond with given precision.
 * @method        CarbonInterface  roundMicrosecond(float $precision = 1, string $function = "round")                 Round the current instance microsecond with given precision using the given function.
 * @method        CarbonInterface  roundMicroseconds(float $precision = 1, string $function = "round")                Round the current instance microsecond with given precision using the given function.
 * @method        CarbonInterface  floorMicrosecond(float $precision = 1)                                             Truncate the current instance microsecond with given precision.
 * @method        CarbonInterface  floorMicroseconds(float $precision = 1)                                            Truncate the current instance microsecond with given precision.
 * @method        CarbonInterface  ceilMicrosecond(float $precision = 1)                                              Ceil the current instance microsecond with given precision.
 * @method        CarbonInterface  ceilMicroseconds(float $precision = 1)                                             Ceil the current instance microsecond with given precision.
 * @method        string           shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1) Get the difference (short format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)  Get the difference (long format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 *
 * </autodoc>
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6d644f76900475a45e974e6da32c4a5e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3fc2b6118fd688c7a2e6cbe9bdf07c51' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Boundaries.
 *
 * startOf, endOf and derived method for each unit.
 *
 * Depends on the following properties:
 *
 * @property int $year
 * @property int $month
 * @property int $daysInMonth
 * @property int $quarter
 *
 * Depends on the following methods:
 *
 * @method $this setTime(int $hour, int $minute, int $second = 0, int $microseconds = 0)
 * @method $this setDate(int $year, int $month, int $day)
 * @method $this addMonths(int $value = 1)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cfbc417717695f77eace34cf0fa9a77b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the time to 00:00:00 start of day
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfDay();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '10e695165ae3e2207c0eecc56d65728b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the time to 23:59:59.999999 end of day
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfDay();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'de40b1a17aa68f9d9a7d755cf5710c8c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the month and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMonth();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3067a58a3067d4ae982466ec272e3bcf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the month and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMonth();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '24c6d6b7aeb0f0534297e679dfb4c761' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the quarter and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfQuarter();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c64488237960bfc47f613d1fc2d8d6cc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the quarter and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfQuarter();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '81c94646e9be58b095c2c14a1d9d7180' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the year and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfYear();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7c7af7519a01d28394b312cfc5fe6d44' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the year and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfYear();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd940062460147118c7d4195fad6ff018' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the decade and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfDecade();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfDecade',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed54518de59c264151389deadafd86a9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the decade and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfDecade();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfDecade',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bc4d9c966dd0de06dc7c48596c8f5d21' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the century and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfCentury();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfCentury',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e5df3d59a950d7d3e3eedbde052bc09b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the century and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfCentury();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfCentury',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c8426c39be07717470e443e988a4dca9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the millennium and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMillennium();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfMillennium',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cba662a9dd9fc6ae1f3f241c15d88bfe' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the millennium and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMillennium();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfMillennium',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3aafb32dc9b23f01879e894a16e32bbc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of week (defined in $weekStartsAt) and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->locale(\'ar\')->startOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfWeek(Carbon::SUNDAY) . "\\n";
     * ```
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6533c4281ead917371a565656aa66d26' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of week (defined in $weekEndsAt) and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->locale(\'ar\')->endOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfWeek(Carbon::SATURDAY) . "\\n";
     * ```
     *
     * @param int $weekEndsAt optional start allow you to specify the day of week to use to end the week
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8ebbb7d2830be4119732a29fd37aa9b3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current hour, minutes and seconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfHour();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfHour',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3caca493b225b6f1717e6a74945974c4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current hour, minutes and seconds become 59
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfHour();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfHour',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '48418329c2743da10809707a26241c28' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current minute, seconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMinute();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfMinute',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '38ba2d814bdc4ba3effd1eccfe8e4144' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current minute, seconds become 59
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMinute();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfMinute',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f9cbbdb1a786c248247213c2ef0047a1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current second, microseconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOfSecond()
     *   ->format(\'H:i:s.u\');
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOfSecond',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '12282f34ab1a713cec45c19cedfd344c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current second, microseconds become 999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->endOfSecond()
     *   ->format(\'H:i:s.u\');
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOfSecond',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fea13b38891764213a6a61ff7c9422b4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current given unit.
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOf(\'month\')
     *   ->endOf(\'week\', Carbon::FRIDAY);
     * ```
     *
     * @param string            $unit
     * @param array<int, mixed> $params
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'startOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '84d41c98a4231c9d9b4b15688bb7a927' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current given unit.
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOf(\'month\')
     *   ->endOf(\'week\', Carbon::FRIDAY);
     * ```
     *
     * @param string            $unit
     * @param array<int, mixed> $params
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'endOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '59ae80c1126d47dc2aba19931c27ad35' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '84645db5caa635df69ae4c265ce130b8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Comparison.
 *
 * Comparison utils and testers. All the following methods return booleans.
 * nowWithSameTz
 *
 * Depends on the following methods:
 *
 * @method static        resolveCarbon($date)
 * @method static        copy()
 * @method static        nowWithSameTz()
 * @method static static yesterday($timezone = null)
 * @method static static tomorrow($timezone = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3477c8fa5e571b61ee32a97de343945' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(Carbon::parse(\'2018-07-25 12:45:16\')); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see equalTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'eq',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9c791cdca8a020f80a358bf392df2d5c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(Carbon::parse(\'2018-07-25 12:45:16\')); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'equalTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e172031b87ec9381f16135221f9533cb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is not equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(Carbon::parse(\'2018-07-25 12:45:16\')); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see notEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'ne',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '39bf2cbfa9bc4e45eb2e149e40822e7b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is not equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(Carbon::parse(\'2018-07-25 12:45:16\')); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'notEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3ae62de27b299c3f3c8a668073f74cc6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'gt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3fbee7cbf527f27e9d1f6ff84c9ad77b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'greaterThan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3a8653cf908fbd1b15acab874edcab2a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isAfter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e88c89838491b77299b46973e0a4cf54' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThanOrEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'gte',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4f06e618998ce21c4fb1e2adaa55892e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'greaterThanOrEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '810b5c3e108d13fed4c24ce66ac207d8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'lt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e844558dd67027e7a16316934e1c2fa0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'lessThan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e6a5dd57dc5cfdd4c59e67d31c50cb2e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isBefore',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3bf0863bc2c2ac4c423f023c2b2aab20' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThanOrEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'lte',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b45e6faf28afc03c00436c58c5ea58d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'lessThanOrEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '24c811506d12491eb0593affa08bcbcb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others.
     *
     * The third argument allow you to specify if bounds are included or not (true by default)
     * but for when you including/excluding bounds may produce different results in your application,
     * we recommend to use the explicit methods ->betweenIncluded() or ->betweenExcluded() instead.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->between(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-25\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-25\', \'2018-08-01\', false); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     * @param bool                                    $equal Indicates if an equal to comparison should be done
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'between',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5a743ef1e30514f3580c7e510f8f9251' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others, bounds included.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-07-25\', \'2018-08-01\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'betweenIncluded',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'af266613797804ad80e4dc26ac15d01f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others, bounds excluded.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-07-25\', \'2018-08-01\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'betweenExcluded',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8603abf891e214dc0e7be3232cb32303' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-25\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-25\', \'2018-08-01\', false); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     * @param bool                                    $equal Indicates if an equal to comparison should be done
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isBetween',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '212b88af23026f7ad3d2f1e5198c6510' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a weekday.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-14\')->isWeekday(); // false
     * Carbon::parse(\'2019-07-15\')->isWeekday(); // true
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bf202c8d496c832ece1d344383eb4f9e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a weekend day.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-14\')->isWeekend(); // true
     * Carbon::parse(\'2019-07-15\')->isWeekend(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isWeekend',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ac10d63b6e260816da689de539eff7a7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is yesterday.
     *
     * @example
     * ```
     * Carbon::yesterday()->isYesterday(); // true
     * Carbon::tomorrow()->isYesterday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isYesterday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ac43699cde7a79180d28a2bbe5561d6b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is today.
     *
     * @example
     * ```
     * Carbon::today()->isToday(); // true
     * Carbon::tomorrow()->isToday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isToday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '688fa22ed79eda940a712bf8e37a11dc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is tomorrow.
     *
     * @example
     * ```
     * Carbon::tomorrow()->isTomorrow(); // true
     * Carbon::yesterday()->isTomorrow(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isTomorrow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5df01221e4a25e1731b53f702b7bcdf5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the future, ie. greater (after) than now.
     *
     * @example
     * ```
     * Carbon::now()->addHours(5)->isFuture(); // true
     * Carbon::now()->subHours(5)->isFuture(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isFuture',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9bdb8fd1628684f2dcc20dc0a38b0a9a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the past, ie. less (before) than now.
     *
     * @example
     * ```
     * Carbon::now()->subHours(5)->isPast(); // true
     * Carbon::now()->addHours(5)->isPast(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isPast',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '012d7f58703f4a43b79ccc8b8fd74f1c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a leap year.
     *
     * @example
     * ```
     * Carbon::parse(\'2020-01-01\')->isLeapYear(); // true
     * Carbon::parse(\'2019-01-01\')->isLeapYear(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isLeapYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e01f6543d5508f65ca1e59d23e299a48' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a long year
     *
     * @example
     * ```
     * Carbon::parse(\'2015-01-01\')->isLongYear(); // true
     * Carbon::parse(\'2016-01-01\')->isLongYear(); // false
     * ```
     *
     * @see https://en.wikipedia.org/wiki/ISO_8601#Week_dates
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isLongYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '97e94503aa19f56e6aa5b6f7154537fa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Compares the formatted values of the two dates.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-06-13\')->isSameAs(\'Y-d\', Carbon::parse(\'2019-12-13\')); // true
     * Carbon::parse(\'2019-06-13\')->isSameAs(\'Y-d\', Carbon::parse(\'2019-06-14\')); // false
     * ```
     *
     * @param string                                        $format date formats to compare.
     * @param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date   instance to compare with or null to use current day.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isSameAs',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1d36f423e318e817a79cfe1047a09774' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the current unit given.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-13\')->isSameUnit(\'year\', Carbon::parse(\'2019-12-25\')); // true
     * Carbon::parse(\'2018-12-13\')->isSameUnit(\'year\', Carbon::parse(\'2019-12-25\')); // false
     * ```
     *
     * @param string                                 $unit singular unit string
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date instance to compare with or null to use current day.
     *
     * @throws BadComparisonUnitException
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isSameUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b4a2836b984485099c6d7e23b474d77a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the current unit given.
     *
     * @example
     * ```
     * Carbon::now()->isCurrentUnit(\'hour\'); // true
     * Carbon::now()->subHours(2)->isCurrentUnit(\'hour\'); // false
     * ```
     *
     * @param string $unit The unit to test.
     *
     * @throws BadMethodCallException
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isCurrentUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a29b20a714ee20d6370326149eef576f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the passed in date is in the same quarter as the instance quarter (and year if needed).
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2019-03-01\')); // true
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2019-04-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2018-03-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2018-03-01\'), false); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date       The instance to compare with or null to use current day.
     * @param bool                                          $ofSameYear Check if it is the same month in the same year.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isSameQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5df7ae8a1d7308b0754b5bd53b477f7c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the passed in date is in the same month as the instance´s month.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2019-01-01\')); // true
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2019-02-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2018-01-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2018-01-01\'), false); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date       The instance to compare with or null to use the current date.
     * @param bool                                   $ofSameYear Check if it is the same month in the same year.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isSameMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fc84fa1ab614c8f5a3e65840700b6c9d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if this day is a specific day of the week.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(Carbon::WEDNESDAY); // true
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(Carbon::FRIDAY); // false
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(\'Wednesday\'); // true
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(\'Friday\'); // false
     * ```
     *
     * @param int $dayOfWeek
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isDayOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8dfe88d420569fd6ae99821565e46536' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if its the birthday. Compares the date/month values of the two dates.
     *
     * @example
     * ```
     * Carbon::now()->subYears(5)->isBirthday(); // true
     * Carbon::now()->subYears(5)->subDay()->isBirthday(); // false
     * Carbon::parse(\'2019-06-05\')->isBirthday(Carbon::parse(\'2001-06-05\')); // true
     * Carbon::parse(\'2019-06-05\')->isBirthday(Carbon::parse(\'2001-06-06\')); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date The instance to compare with or null to use current day.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isBirthday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b203f7379da398dea815d25d65b8aed5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if today is the last day of the Month
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28\')->isLastOfMonth(); // true
     * Carbon::parse(\'2019-03-28\')->isLastOfMonth(); // false
     * Carbon::parse(\'2019-03-30\')->isLastOfMonth(); // false
     * Carbon::parse(\'2019-03-31\')->isLastOfMonth(); // true
     * Carbon::parse(\'2019-04-30\')->isLastOfMonth(); // true
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isLastOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '15547575458bc9c08a82527e2e9266bf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is start of day / midnight.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 00:00:00\')->isStartOfDay(); // true
     * Carbon::parse(\'2019-02-28 00:00:00.999999\')->isStartOfDay(); // true
     * Carbon::parse(\'2019-02-28 00:00:01\')->isStartOfDay(); // false
     * Carbon::parse(\'2019-02-28 00:00:00.000000\')->isStartOfDay(true); // true
     * Carbon::parse(\'2019-02-28 00:00:00.000012\')->isStartOfDay(true); // false
     * ```
     *
     * @param bool $checkMicroseconds check time at microseconds precision
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isStartOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ac3ba9d804cdfbf33f77b7362f2061ea' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is end of day.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 23:59:59.999999\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:59.123456\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:59\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:58.999999\')->isEndOfDay(); // false
     * Carbon::parse(\'2019-02-28 23:59:59.999999\')->isEndOfDay(true); // true
     * Carbon::parse(\'2019-02-28 23:59:59.123456\')->isEndOfDay(true); // false
     * Carbon::parse(\'2019-02-28 23:59:59\')->isEndOfDay(true); // false
     * ```
     *
     * @param bool $checkMicroseconds check time at microseconds precision
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isEndOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2cc0a5075f5f95ae4e26f143ae72af9e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is start of day / midnight.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 00:00:00\')->isMidnight(); // true
     * Carbon::parse(\'2019-02-28 00:00:00.999999\')->isMidnight(); // true
     * Carbon::parse(\'2019-02-28 00:00:01\')->isMidnight(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isMidnight',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a7cd6dcf5ddf1705673eb473c270ae0b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is midday.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 11:59:59.999999\')->isMidday(); // false
     * Carbon::parse(\'2019-02-28 12:00:00\')->isMidday(); // true
     * Carbon::parse(\'2019-02-28 12:00:00.999999\')->isMidday(); // true
     * Carbon::parse(\'2019-02-28 12:00:01\')->isMidday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isMidday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ef1e4d1c5501f68ad5c4ee4a5c7aed76' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format.
     *
     * @example
     * ```
     * Carbon::hasFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::hasFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'hasFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd36f3472666a54a071df6899131606a6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format.
     *
     * @example
     * ```
     * Carbon::hasFormatWithModifiers(\'31/08/2015\', \'d#m#Y\'); // true
     * Carbon::hasFormatWithModifiers(\'31/08/2015\', \'m#d#Y\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'hasFormatWithModifiers',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '70ba903fd43bfa4016cd4e8839419b54' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format and valid to create a
     * new instance.
     *
     * @example
     * ```
     * Carbon::canBeCreatedFromFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::canBeCreatedFromFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'canBeCreatedFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c673d0b6e2eb4c52a7926b566397084a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current date matches the given string.
     *
     * @example
     * ```
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2018\')); // false
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019-06\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'06-02\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019-06-02\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'Sunday\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'June\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23:45\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23:00\')); // false
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12h\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 15:23:45\')->is(\'3pm\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 15:23:45\')->is(\'3am\')); // false
     * ```
     *
     * @param string $tester day name, month name, hour, date, etc. as string
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'is',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3d0bdd38b4c62302bf1cbb8c4328c35d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format with
     * given list of pattern replacements.
     *
     * @example
     * ```
     * Carbon::hasFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::hasFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     * @param array  $replacements
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'matchFormatPattern',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '765db97799e688bdfd39530012eccbc4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3ad38b5ece9ba58a23b6dfe6edb26dfa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Converter.
 *
 * Change date into different string formats and types and
 * handle the string cast.
 *
 * Depends on the following methods:
 *
 * @method static copy()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6550d9b532107eeb45833261211e2e71' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use for __toString method when type juggling occurs.
     *
     * @var string|Closure|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0d802ecd0c6c975357f0bf18c478a47f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Reset the format used to the default when type juggling a Carbon instance to a string
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'resetToStringFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '520d8f3d637bc17c0675f754f334a724' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather let Carbon object being casted to string with DEFAULT_TO_STRING_FORMAT, and
     *             use other method or custom format passed to format() method if you need to dump an other string
     *             format.
     *
     * Set the default format used when type juggling a Carbon instance to a string
     *
     * @param string|Closure|null $format
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setToStringFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5797d6ec0cabb7898fd71edc366f27a9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the formatted date string on success or FALSE on failure.
     *
     * @see https://php.net/manual/en/datetime.format.php
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'format',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e363f28b542c92639c63cd08f57b15e3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @see https://php.net/manual/en/datetime.format.php
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'rawFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b8bbb18dda2852252d56a4468ecbb3d3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as a string using the set format
     *
     * @example
     * ```
     * echo Carbon::now(); // Carbon instances can be casted to string
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__toString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3acb9b09c0fcb96accf754ab73196ac' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date
     *
     * @example
     * ```
     * echo Carbon::now()->toDateString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toDateString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c6140d11ef2a24951cc48899293003d8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as a readable date
     *
     * @example
     * ```
     * echo Carbon::now()->toFormattedDateString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toFormattedDateString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ca9761ed871b918776faab711f1b9df9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as time
     *
     * @example
     * ```
     * echo Carbon::now()->toTimeString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4944fe1d0bddfe5fe88cfb244931fd14' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date and time
     *
     * @example
     * ```
     * echo Carbon::now()->toDateTimeString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toDateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a0b9e3d1b3d91ce835a7d289f2dc9027' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a format from H:i to H:i:s.u according to given unit precision.
     *
     * @param string $unitPrecision "minute", "second", "millisecond" or "microsecond"
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTimeFormatByPrecision',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '711fc21d04ddf382b7960476b29f5711' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date and time T-separated with no timezone
     *
     * @example
     * ```
     * echo Carbon::now()->toDateTimeLocalString();
     * echo "\\n";
     * echo Carbon::now()->toDateTimeLocalString(\'minute\'); // You can specify precision among: minute, second, millisecond and microsecond
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toDateTimeLocalString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8c5990f5c0066a849a1de0e46f449f6c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance with day, date and time
     *
     * @example
     * ```
     * echo Carbon::now()->toDayDateTimeString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toDayDateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '30e3f8e5562b0f817988a45b83011a18' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as ATOM
     *
     * @example
     * ```
     * echo Carbon::now()->toAtomString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toAtomString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3134af6eeebb2d1a50cce7a22f697b6f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as COOKIE
     *
     * @example
     * ```
     * echo Carbon::now()->toCookieString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toCookieString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5521608227f19581ee03b678b31d6d1c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as ISO8601
     *
     * @example
     * ```
     * echo Carbon::now()->toIso8601String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toIso8601String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dfacbaeeb554297770912f75bff51967' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC822
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc822String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toRfc822String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6728df8ac0edfb74e3fdaae48d95e2fc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Convert the instance to UTC and return as Zulu ISO8601
     *
     * @example
     * ```
     * echo Carbon::now()->toIso8601ZuluString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toIso8601ZuluString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bf193c149431a205fd8fb3f62df11b19' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC850
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc850String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toRfc850String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f1f1e101174d5b2b8e328f6b5533165e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC1036
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc1036String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toRfc1036String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '152569b521071cbd14d5ef19186de96e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC1123
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc1123String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toRfc1123String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd7afb79a1c2a1ca1023a8e8bfea29584' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC2822
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc2822String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toRfc2822String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b396e06673b199874862d5fff34eadc5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC3339
     *
     * @param bool $extended
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc3339String() . "\\n";
     * echo Carbon::now()->toRfc3339String(true) . "\\n";
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toRfc3339String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1f81b4a30ac739252989893f4205b747' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RSS
     *
     * @example
     * ```
     * echo Carbon::now()->toRssString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toRssString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9c32f26420b80369d458a79abdd40395' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as W3C
     *
     * @example
     * ```
     * echo Carbon::now()->toW3cString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toW3cString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f54c22daf776a0a4a012335d2191d024' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC7231
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc7231String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toRfc7231String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '58011dc01c7eb45e0d9f888dfaa02cdb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get default array representation.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toArray());
     * ```
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toArray',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3d95e4714685c1c2e208c092fddd0689' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get default object representation.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toObject());
     * ```
     *
     * @return object
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toObject',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c45acef338c2197a33bb2791cb3b66af' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns english human readable complete date string.
     *
     * @example
     * ```
     * echo Carbon::now()->toString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1d191f9485998512dd5aec30f97c4d34' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z, if $keepOffset truthy, offset will be kept:
     * 1977-04-22T01:00:00-05:00).
     *
     * @example
     * ```
     * echo Carbon::now(\'America/Toronto\')->toISOString() . "\\n";
     * echo Carbon::now(\'America/Toronto\')->toISOString(true) . "\\n";
     * ```
     *
     * @param bool $keepOffset Pass true to keep the date offset. Else forced to UTC.
     *
     * @return null|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toISOString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6d65a97ebccb1a53b0a0f416347109c8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z) with UTC timezone.
     *
     * @example
     * ```
     * echo Carbon::now(\'America/Toronto\')->toJSON();
     * ```
     *
     * @return null|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toJSON',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da831dc74b5c7bc469b5db36649d272e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return native DateTime PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDateTime());
     * ```
     *
     * @return DateTime
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '08e01d43ca64c26b3d6e69f55ee5929c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return native toDateTimeImmutable PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDateTimeImmutable());
     * ```
     *
     * @return DateTimeImmutable
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toDateTimeImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2d88116a14721f6e2834232a8d0d8cd2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias toDateTime
     *
     * Return native DateTime PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDate());
     * ```
     *
     * @return DateTime
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8033546ecc83e24049e843d994c5c72a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
     *
     * @param \\DateTimeInterface|Carbon|CarbonImmutable|int|null $end      period end date or recurrences count if int
     * @param int|\\DateInterval|string|null                      $interval period default interval or number of the given $unit
     * @param string|null                                        $unit     if specified, $interval must be an integer
     *
     * @return CarbonPeriod
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toPeriod',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '669df92156b43f0895f9c89a0bb8c259' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
     *
     * @param \\DateTimeInterface|Carbon|CarbonImmutable|null $end      period end date
     * @param int|\\DateInterval|string|null                  $interval period default interval or number of the given $unit
     * @param string|null                                    $unit     if specified, $interval must be an integer
     *
     * @return CarbonPeriod
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'range',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '78a563fa7edf2a588f98ca426754e96f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8b9cedccfaf4e108d88b3ec734a0b633' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Creator.
 *
 * Static creators.
 *
 * Depends on the following methods:
 *
 * @method static Carbon|CarbonImmutable getTestNow()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'db2dd31ae501cb6bf6c2803eb56548ef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '118a63c032c645016bcc5a96d62522d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * True when parent::__construct has been called.
     *
     * @var string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bbc97672cceaa6e5679406ab77440811' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The errors that can occur.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd317655fbaf1d0d75289ea6c75581f7d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new Carbon instance.
     *
     * Please see the testing aids section (specifically static::setTestNow())
     * for more on the possibility of this constructor returning a test instance.
     *
     * @param string|null              $time
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__construct',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '44398e72f8a5718c38821f5f3c9206eb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get timezone from a datetime instance.
     *
     * @param DateTimeInterface        $date
     * @param DateTimeZone|string|null $tz
     *
     * @return DateTimeInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'constructTimezoneFromDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4ce284ab4efcde6b72bb71c933c12493' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Update constructedObjectId on cloned.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__clone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3e4c2d8a839ef0839b67b13ad8b40473' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a DateTime one.
     *
     * @param DateTimeInterface $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'instance',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '83b156b812c646b86ed87bdb030bfaa3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a string.
     *
     * This is an alias for the constructor that allows better fluent syntax
     * as it allows you to do Carbon::parse(\'Monday next week\')->fn() rather
     * than (new Carbon(\'Monday next week\'))->fn().
     *
     * @param string|DateTimeInterface|null $time
     * @param DateTimeZone|string|null      $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'rawParse',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3ef8c6f1168ac2371bc6308184e13c55' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a string.
     *
     * This is an alias for the constructor that allows better fluent syntax
     * as it allows you to do Carbon::parse(\'Monday next week\')->fn() rather
     * than (new Carbon(\'Monday next week\'))->fn().
     *
     * @param string|DateTimeInterface|null $time
     * @param DateTimeZone|string|null      $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'parse',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '017bac8ed4a9c03833f59dbe6a3de398' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.).
     *
     * @param string                   $time   date/time string in the given language (may also contain English).
     * @param string|null              $locale if locale is null or not specified, current global locale will be
     *                                         used instead.
     * @param DateTimeZone|string|null $tz     optional timezone for the new instance.
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'parseFromLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f905230573ab14d09698c1642e3dc10b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a Carbon instance for the current date and time.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'now',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cff01fbb89b93135076aab962bfa296e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for today.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'today',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '648a432daf59e00e165cccad6073324d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for tomorrow.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'tomorrow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '94ea37563c4890cd894a9d72ec7c5e82' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for yesterday.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'yesterday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a6c810ef85e3f91f20b1dfd9eac207b2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for the greatest supported date.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'maxValue',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f73b09ed65e308acbba7997a1ce0b99' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for the lowest supported date.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'minValue',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1add271ae0490e36c0d30d5ccdc772e9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new Carbon instance from a specific date and time.
     *
     * If any of $year, $month or $day are set to null their now() values will
     * be used.
     *
     * If $hour is null it will be set to its now() value and the default
     * values for $minute and $second will be their now() values.
     *
     * If $hour is not null then the default values for $minute and $second
     * will be 0.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'create',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b4df7f91b8b090d7d3e4d658eb1b5cf5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new safe Carbon instance from a specific date and time.
     *
     * If any of $year, $month or $day are set to null their now() values will
     * be used.
     *
     * If $hour is null it will be set to its now() value and the default
     * values for $minute and $second will be their now() values.
     *
     * If $hour is not null then the default values for $minute and $second
     * will be 0.
     *
     * If one of the set values is not valid, an InvalidDateException
     * will be thrown.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidDateException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createSafe',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd16ac8b3b2551ec4897ea9eebc3a77f8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a date. The time portion is set to now.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '82558645a594d944ac7e353889dd4be8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a date. The time portion is set to midnight.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createMidnightDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9db386134bdfc1be4a8c6258a304fb4d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a time. The date portion is set to today.
     *
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3da1bdf97a048654b6b802bfd40630a1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a time string. The date portion is set to today.
     *
     * @param string                   $time
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b3b532dee7266558956966d08f62f76f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param string                         $format     Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $originalTz
     *
     * @return DateTimeInterface|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromFormatAndTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1c99e0c53c27608be46ba7cdcd3394a5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format.
     *
     * @param string                         $format Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'rawCreateFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4fa6a15b6b1431ad126c545b6f9ebaf5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\Carbon\\CarbonImmutable|\\Carbon\\Carbon|null $mock */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'rawCreateFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '59996f29bda7c491ac6de6da5ae2d9e0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format.
     *
     * @param string                         $format Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a0eea4550adc7d45cf1e11641b17d066' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific ISO format (same replacements as ->isoFormat()).
     *
     * @param string                                             $format     Datetime format
     * @param string                                             $time
     * @param DateTimeZone|string|false|null                     $tz         optional timezone
     * @param string|null                                        $locale     locale to be used for LTS, LT, LL, LLL, etc. macro-formats (en by fault, unneeded if no such macro-format in use)
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator optional custom translator to use for macro-formats
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromIsoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3ffff1e17567c1fc615cdc4de27266d3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format and a string in a given language.
     *
     * @param string                         $format Datetime format
     * @param string                         $locale
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromLocaleFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da30e9d332796fcdb32660dbf7448e34' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific ISO format and a string in a given language.
     *
     * @param string                         $format Datetime ISO format
     * @param string                         $locale
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromLocaleIsoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '31d09f08b7c83c3771e5c7774c7a90a8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Make a Carbon instance from given variable if possible.
     *
     * Always return a new instance. Parse only strings and only these likely to be dates (skip intervals
     * and recurrences). Throw an exception for invalid format, but otherwise return null.
     *
     * @param mixed $var
     *
     * @throws InvalidFormatException
     *
     * @return static|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'make',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2f37e5c4b156d6cf2aca345b3b3c4917' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set last errors.
     *
     * @param array $lastErrors
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setLastErrors',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '96bd23629873ec80be532c58bda05c33' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * {@inheritdoc}
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getLastErrors',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ca666ab615d6544472c71b49c7acf69e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a49c6eaae01328b3ce3915772ed91529' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Difference.
 *
 * Depends on the following methods:
 *
 * @method bool lessThan($date)
 * @method static copy()
 * @method static resolveCarbon($date = null)
 * @method static Translator translator()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '417ac7d6fafe6d023c8b91ac7e23d87e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @codeCoverageIgnore
     *
     * @param CarbonInterval $diff
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'fixNegativeMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6e7e7f0a7780464ee8874fb43cbd91bf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param DateInterval $diff
     * @param bool         $absolute
     *
     * @return CarbonInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'fixDiffInterval',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7688bee50c60c967e77c5553e4bc51f3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference as a DateInterval instance.
     * Return relative interval (negative if
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return DateInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diff',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7fcbe227f7085d72cc832b3b9b93fc24' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference as a CarbonInterval instance.
     * Return absolute interval (always positive) unless you pass false to the second argument.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return CarbonInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffAsCarbonInterval',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e775335d8124bca1b4ce1304ea113567' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in years
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ddb627ea83892f46f97bb7614245e4d5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in quarters rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInQuarters',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f52f9738d0c6972aa39d4d764998171f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e9d6a2e2fcdd2a3dcd51c5b8e86be6b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a2d0ed8d8e54dd047c15b697df5415d2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd6ad4369c42ae548cb3e4ee967bcc659' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days using a filter closure rounded down.
     *
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInDaysFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd3083efc72f105d95a640d353769b2e3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours using a filter closure rounded down.
     *
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInHoursFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '90b2da66ec15493ac67ea13980d11ff7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference by the given interval using a filter closure.
     *
     * @param CarbonInterval                                         $ci       An interval to traverse by
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3d0bda6fa41fed2aae7c82dff9091a54' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weekdays rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInWeekdays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed16d0cb5e75aef3917b5eba73f49a86' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weekend days using a filter rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd1e83cb59ebc4971f68f933110d3510a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '16e8a241537f12bf3611c919fb1dfa88' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInRealHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3f86e812e1cfa9acc64384fe317a53cf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dc51ad4eed6c4b36dee31e340f7fb62c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInRealMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a8128876c1336708b6653c1c436dee17' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '48df6ed81e1a6e0c3e82c4edc3b7e087' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in microseconds.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '532feec4f02342f6722c51f3fd1863f5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in milliseconds rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInMilliseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b5ff43f547f5f15b530c5a0f94bd3cdd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '27eb0ff233da4fc747b6f7b3a4b09fdd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '69a6005bdafd8f71455680101963cc88' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in microseconds using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInRealMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cd20a3947bbab2be1288fd83c59d36a7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInRealMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f1ec00656b5f81a42562038f61b07442' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in milliseconds rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffInRealMilliseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0ea114325416675d7e4699cc38a2eaff' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5461308808d8d38c442b9d256a16ba43' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '05789093d3c949f6f78da3bff903b23f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c176aac2552712fa77c73cc54842d235' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3f7c2360b1a76319255d23a272ee259e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1a09d44887153761cd5cd42465d04bb1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '16ff46acb510412d3d6bea5fe6373e63' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '89950b1d7eb06ab187a3a09a7a5ac87b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfMonthAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c3092397dcef002f6b12f26c85f7f896' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in year as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '285d376a5d5c2f66758757a234169898' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed012d72b998c61e08693ff4bb711190' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfYearAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f4af3a4a358fa4b6685c27cc817cc3eb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2c1ebba3da36d668fddaace7e2516a1a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b75043cd77dfdcdd42e998851bc711e1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c5ae96eef3a1bfbc91702781cd03a94e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c81e3f389990396a73511fc34ea66d5a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd2ab54c8aa8ffb32c3d410de410ec811' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e6d3ba1733e8519099aa9ca2c4e619d4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'db4c54edfc5a7e79fa15cf4f4bf0c662' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfMonthAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8febb7228c6203e7da4fadad8df11cb7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in year as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '44892c7edde6d3f6e26bcf32095ddc8d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9de8384c05a06c08d696e89a8f569ac6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfYearAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8e34bc4458a21ea72a57fd01440c19c5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The number of seconds since midnight.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'secondsSinceMidnight',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9a044dac330eacd463d414f42435ca92' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The number of seconds until 23:59:59.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'secondsUntilEndOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '962783d19164c6a8939ded526daa6724' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @example
     * ```
     * echo Carbon::tomorrow()->diffForHumans() . "\\n";
     * echo Carbon::tomorrow()->diffForHumans([\'parts\' => 2]) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans([\'parts\' => 3, \'join\' => true]) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday()) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday(), [\'short\' => true]) . "\\n";
     * ```
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'diffForHumans',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2570b5ff6d56b854afd997964f3f0225' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias diffForHumans
     *
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'from',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '88c87e4f9739c8a8d9c7bdadbfee0e18' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias diffForHumans
     *
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'since',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ff1265816f8113886c3e2b84140e3ad1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given (or now if null given) to current instance.
     *
     * When comparing a value in the past to default now:
     * 1 hour from now
     * 5 months from now
     *
     * When comparing a value in the future to default now:
     * 1 hour ago
     * 5 months ago
     *
     * When comparing a value in the past to another value:
     * 1 hour after
     * 5 months after
     *
     * When comparing a value in the future to another value:
     * 1 hour before
     * 5 months before
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'to',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e2ca67c44d424b2c90db741d803cb37e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias to
     *
     * Get the difference in a human readable format in the current locale from an other
     * instance given (or now if null given) to current instance.
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'until',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f600b26eaba1d56e8e738c4553a6b290' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current
     * instance to now.
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'fromNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8ad10c8fffcda3623a5ebfcae8b20783' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given to now
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single part)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '68c4dea7d5557572eab7d0a2ef0678e3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given to now
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single part)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'ago',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '10b78c21f7e73ac200854cfc63725f35' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'timespan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3205c05cadf8616903b6b0de5b056ad2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns either the close date "Friday 15h30", or a calendar date "10/09/2017" is farthest than 7 days from now.
     *
     * @param Carbon|\\DateTimeInterface|string|null $referenceTime
     * @param array                                 $formats
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f2a3f1f4cb5d9f6addeae0eb9b92a366' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $current */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da0924ecdb6bb0991bcb7e3c9296b6f6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $other */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '371fc16c2f2f5b5b5ebb229c044ab339' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '29239c2e5cb481a34b0d10f6c8e6adc8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Macros.
 *
 * Allows users to register macros within the Carbon class.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3abf7e2b6b5b234c78bd6208545689a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0b4b3e478434c1957c360f5acc24ca98' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Mixin.
 *
 * Allows mixing in entire classes with multiple macros.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '927769c6825a311fbb78fa2a34b5ba8a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Stack of macro instance contexts.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '77b519adf8cda04e228639e9786e84eb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Mix another object into the class.
     *
     * @example
     * ```
     * Carbon::mixin(new class {
     *   public function addMoon() {
     *     return function () {
     *       return $this->addDays(30);
     *     };
     *   }
     *   public function subMoon() {
     *     return function () {
     *       return $this->subDays(30);
     *     };
     *   }
     * });
     * $fullMoon = Carbon::create(\'2018-12-22\');
     * $nextFullMoon = $fullMoon->addMoon();
     * $blackMoon = Carbon::create(\'2019-01-06\');
     * $previousBlackMoon = $blackMoon->subMoon();
     * echo "$nextFullMoon\\n";
     * echo "$previousBlackMoon\\n";
     * ```
     *
     * @param object|string $mixin
     *
     * @throws ReflectionException
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'mixin',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dd2f9692272184a85ea697393e4b1dba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param object|string $mixin
     *
     * @throws ReflectionException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'loadMixinClass',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e211f8ea5d07957db741e707c83d4f64' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param string $trait
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'loadMixinTrait',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c1f8979e72cd4f44d0af8bf70e7d9d89' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @phpstan-ignore-next-line */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'loadMixinTrait',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '353b3c84e5ee8afe94715bce853e6624' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Stack a Carbon context from inside calls of self::this() and execute a given action.
     *
     * @param static|null $context
     * @param callable    $callable
     *
     * @throws Throwable
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'bindMacroContext',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e36ec82f6d427b41661fa78156a41ce8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the current context from inside a macro callee or a null if static.
     *
     * @return static|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'context',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3ab9cfc18b1442cbaf954f91a493d77a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the current context from inside a macro callee or a new one if static.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'this',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '066099cff66574f88f2343e23d590805' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The registered macros.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '70ff272e534cf339ab8868751cd8e079' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The registered generic macros.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b4dab860608d9ddb172e7fa726842d14' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Register a custom macro.
     *
     * @example
     * ```
     * $userSettings = [
     *   \'locale\' => \'pt\',
     *   \'timezone\' => \'America/Sao_Paulo\',
     * ];
     * Carbon::macro(\'userFormat\', function () use ($userSettings) {
     *   return $this->copy()->locale($userSettings[\'locale\'])->tz($userSettings[\'timezone\'])->calendar();
     * });
     * echo Carbon::yesterday()->hours(11)->userFormat();
     * ```
     *
     * @param string          $name
     * @param object|callable $macro
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'macro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5538871ad83e4807efef530a1d20f643' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Remove all macros and generic macros.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'resetMacros',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bef4b64b09e087d926ecaae6948211ec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Register a custom macro.
     *
     * @param object|callable $macro
     * @param int             $priority marco with higher priority is tried first
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'genericMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '84ddbbd0e875c9e8cc8c6e7bce5b2f69' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if macro is registered globally.
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'hasMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4bec3176c6fbf1d40974a70e100b5ef3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the raw callable macro registered globally for a given name.
     *
     * @param string $name
     *
     * @return callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '30dd3e9bffd0eaf88fd060c041e2d27a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if macro is registered globally or locally.
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'hasLocalMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '354a306f28c8f820023285021f82b147' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the raw callable macro registered globally or locally for a given name.
     *
     * @param string $name
     *
     * @return callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getLocalMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5f80fbd4c11b0b3e42f9f3b0bbc5b638' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3cda88729712ab5d8473c4ed2cdbd94c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Modifiers.
 *
 * Returns dates relative to current date using modifier short-hand.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '114d3ad1fa3e0ad06517cc360678c8b9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Midday/noon hour.
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c44fbbc6453dca2967c5bea3d6b4de7c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * get midday/noon hour
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getMidDayAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '63fbb5bdc13efa3d74d9170f8afde3a1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather consider mid-day is always 12pm, then if you need to test if it\'s an other
     *             hour, test it explicitly:
     *                 $date->format(\'G\') == 13
     *             or to set explicitly to a given hour:
     *                 $date->setTime(13, 0, 0, 0)
     *
     * Set midday/noon hour
     *
     * @param int $hour midday hour
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setMidDayAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ab80c03d6cc3a9eaff8232be88c22e15' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to midday, default to self::$midDayAt
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'midDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0da6cec8593bda2ee7f2f1b82649eddf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the next occurrence of a given modifier such as a day of
     * the week. If no modifier is provided, modify to the next occurrence
     * of the current day of the week. Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param string|int|null $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'next',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7e867ea3c8e7d8715dc903b550f330c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward or backward to the next week- or weekend-day.
     *
     * @param bool $weekday
     * @param bool $forward
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'nextOrPreviousDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ca6dc83dea9e96848ef10068adf4b549' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'nextOrPreviousDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '33b0037702aaaf2f9bc40512963095f5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward to the next weekday.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'nextWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b20c35bde7583fe07c13b91b6b347b8e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go backward to the previous weekday.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'previousWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '398d9c502541663a6b7253a40ed53efa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward to the next weekend day.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'nextWeekendDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd8b9ae3dfc2a323c6b0baf6a50cdcd02' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go backward to the previous weekend day.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'previousWeekendDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'efee3ed0306ab612c8ff2c2ee1ed9ed7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the previous occurrence of a given modifier such as a day of
     * the week. If no dayOfWeek is provided, modify to the previous occurrence
     * of the current day of the week. Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param string|int|null $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'previous',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '47f5a9d8006e1fb046f94cd52eebb1ef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current month. If no dayOfWeek is provided, modify to the
     * first day of the current month.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'firstOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c367ac7e70c3d651578bd62da52a15a6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current month. If no dayOfWeek is provided, modify to the
     * last day of the current month.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'lastOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7ee8a99b197bbca5501d5f183958615e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current month. If the calculated occurrence is outside the scope
     * of the current month, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'nthOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2760084dc8ad577ddce6f574b5cdb297' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current quarter. If no dayOfWeek is provided, modify to the
     * first day of the current quarter.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'firstOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9fdc5e9344f6e5ea52dd06732e57a251' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current quarter. If no dayOfWeek is provided, modify to the
     * last day of the current quarter.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'lastOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cfdb48a3224625f18f80580c890ff849' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current quarter. If the calculated occurrence is outside the scope
     * of the current quarter, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'nthOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '947c1bf3b69b749767f0fafeec813eb9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current year. If no dayOfWeek is provided, modify to the
     * first day of the current year.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'firstOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '72de0fcad04c415a33afd3814384d406' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current year. If no dayOfWeek is provided, modify to the
     * last day of the current year.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'lastOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9967811a9291762ad9bdd95c20216092' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current year. If the calculated occurrence is outside the scope
     * of the current year, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'nthOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '78ef6b7491ed1e2179cd3b733a351bfd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify the current instance to the average of a given instance (default now) and the current instance
     * (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'average',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b06ca61ef9e1b6bcde969434aa428879' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the closest date from the instance (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'closest',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a44440daf03301d32013ffa6d10f886b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the farthest date from the instance (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'farthest',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dc13aa455a174cb05a9f720b89dfc9ad' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the minimum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'min',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c9da6b394b4147fab66ea87b17e2e3b4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the minimum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see min()
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'minimum',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f28dbc0c783f64141afe434dfbec4e6a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the maximum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'max',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c9e90c1b512bd2a58fbb852f9fd3c33d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the maximum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see max()
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'maximum',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b95b12e5b017e3bf5d32f7f221e9d29b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Calls \\DateTime::modify if mutable or \\DateTimeImmutable::modify else.
     *
     * @see https://php.net/manual/en/datetime.modify.php
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'modify',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fa1c2ed57592423ab5d1a257fc20b5ae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Similar to native modify() method of DateTime but can handle more grammars.
     *
     * @example
     * ```
     * echo Carbon::now()->change(\'next 2pm\');
     * ```
     *
     * @link https://php.net/manual/en/datetime.modify.php
     *
     * @param string $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'change',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd9943d017c755c3e43ae5503d588d4ef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '03085b89f9629c3d4c71678500297253' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Mutability.
 *
 * Utils to know if the current object is mutable or immutable and convert it.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e56a919e6ae44156db97696493e14bb4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Cast.
 *
 * Utils to cast into an other class.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidcastexception' => 'Carbon\\Exceptions\\InvalidCastException',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '027bf15340d7693a52306be762cd34df' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Cast the current instance into the given class.
     *
     * @param string $className The $className::instance() method will be called to cast the current object.
     *
     * @return DateTimeInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidcastexception' => 'Carbon\\Exceptions\\InvalidCastException',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'cast',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7ed47455230d16aa4d58d780f96b8428' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is mutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ba69e827db13c2b30548d4af469ab9e1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is immutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '420b0d11fc1510cad5e379aeccaf03bb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a mutable copy of the instance.
     *
     * @return Carbon
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'de5fcb8b5c1f68db3ce75dd424bff261' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '128458013d5cb6770b4b6db5c334f19d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a immutable copy of the instance.
     *
     * @return CarbonImmutable
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '43205dede0ea22e820a83146ec377f09' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonImmutable $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'toImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '109fc1e401659ad0d296cdec1fd7b191' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ff1d79f27873e7e938c9ae5d22bddee7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Options.
 *
 * Embed base methods to change settings of Carbon classes.
 *
 * Depends on the following methods:
 *
 * @method \\Carbon\\Carbon|\\Carbon\\CarbonImmutable shiftTimezone($timezone) Set the timezone
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e792fcb5ea90099b2bbead86b25c1088' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c75c30eed90696b40450152210a68510' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Localization.
 *
 * Embed default and locale translators and translation base methods.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dd5c9e8f8d679ac3cbb1d7b5b0a7b547' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Default translator.
     *
     * @var \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3cae5559a0cd0ea4d3be18224c8195d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Specific translator of the current instance.
     *
     * @var \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '48ece36ef73cd9ebe072473c7fb3a0fd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Options for diffForHumans().
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b2e0ab752bff8019284381594d014e01' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOptions
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setHumanDiffOptions',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6669681f2684ed5e9eb7652fba9c3d9c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOption
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'enableHumanDiffOption',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a9be72a9dd34b97e54d97ee42510d81a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOption
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'disableHumanDiffOption',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5291505fdcd47c8861726b55787cdab9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return default humanDiff() options (merged flags as integer).
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getHumanDiffOptions',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '02fd86b7583b0e37adcda3f9d9006a4b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the default translator instance in use.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9fd892f04de8ada698caa05710c4813a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the default translator instance to use.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '97499e0c14461ae8a85b33ae828254d0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return true if the current instance has its own translator.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'hasLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '084772f2e9f0f90cec3becf4f2f48cff' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translator of the current instance or the default if none set.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ab8bcd1e7905e2330bb01d178bcd1652' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the translator for the current instance.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return $this
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5d3969731c4ea55cf3c7936fa94d22f3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns raw translation message for a given key.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator the translator to use
     * @param string                                             $key        key to find
     * @param string|null                                        $locale     current locale used if null
     * @param string|null                                        $default    default value if translation returns the key
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslationMessageWith',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'db92d638ecdb2cdb8ed35ff832652174' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns raw translation message for a given key.
     *
     * @param string                                             $key        key to find
     * @param string|null                                        $locale     current locale used if null
     * @param string|null                                        $default    default value if translation returns the key
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator an optional translator to use
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslationMessage',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e0ea68aba5ae514dfd6f446c5b7cdbbd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate using translation string or callback available.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     * @param string                                             $key
     * @param array                                              $parameters
     * @param null                                               $number
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'translateWith',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dbe384e7638631e6ca28599f05feedbc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate using translation string or callback available.
     *
     * @param string                                             $key
     * @param array                                              $parameters
     * @param null                                               $number
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'translate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6def6c530c8a08e1cd8899babb571a20' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the alternative number for a given integer if available in the current locale.
     *
     * @param int $number
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'translateNumber',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '023d6181956d654c85b21e5ce565de96' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a time string from a locale to an other.
     *
     * @param string      $timeString date/time/duration string to translate (may also contain English)
     * @param string|null $from       input locale of the $timeString parameter (`Carbon::getLocale()` by default)
     * @param string|null $to         output locale of the result returned (`"en"` by default)
     * @param int         $mode       specify what to translate with options:
     *                                - CarbonInterface::TRANSLATE_ALL (default)
     *                                - CarbonInterface::TRANSLATE_MONTHS
     *                                - CarbonInterface::TRANSLATE_DAYS
     *                                - CarbonInterface::TRANSLATE_UNITS
     *                                - CarbonInterface::TRANSLATE_MERIDIEM
     *                                You can use pipe to group: CarbonInterface::TRANSLATE_MONTHS | CarbonInterface::TRANSLATE_DAYS
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'translateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'be5b0f051064c3ba15133a732900d35d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a time string from the current locale (`$date->locale()`) to an other.
     *
     * @param string      $timeString time string to translate
     * @param string|null $to         output locale of the result returned ("en" by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'translateTimeStringTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f56bd981345e72c80191fea6cd5aa432' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the locale for the current instance.
     *
     * @param string|null $locale
     * @param string      ...$fallbackLocales
     *
     * @return $this|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'locale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e5793a9432a333057851102f1164a49b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the current translator locale.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cbbd52198de55f8494025c04eb1e681c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the current translator locale and indicate if the source locale file exists.
     * Pass \'auto\' as locale to use closest language from the current LC_TIME locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec632b9b574f7ec4728456ac060cc88a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the fallback locale.
     *
     * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
     *
     * @param string $locale
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setFallbackLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '38ed6caed1d1d0b631f3a4644f633268' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the fallback locale.
     *
     * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
     *
     * @return string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getFallbackLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c4df1010b3c9138420cf097acce64806' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the current locale to the given, execute the passed function, reset the locale to previous one,
     * then return the result of the closure (or null if the closure was void).
     *
     * @param string   $locale locale ex. en
     * @param callable $func
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'executeWithLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae1e19e805e34db1a052f4bb0d445493' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has short-units support.
     * Support is considered enabled if either year, day or hour has a short variant translated.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'localeHasShortUnits',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '42d0cc351888832f464ff71270ea9838' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after).
     * Support is considered enabled if the 4 sentences are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'localeHasDiffSyntax',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '22b228d9013b09bb6f31586bfa756994' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow).
     * Support is considered enabled if the 3 words are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'localeHasDiffOneDayWords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fbc56ac97def6a305513fcf719e964ec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow).
     * Support is considered enabled if the 2 words are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'localeHasDiffTwoDayWords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ceebbde64c0ffbf64de8ddc614291462' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X).
     * Support is considered enabled if the 4 sentences are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'localeHasPeriodSyntax',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1e62c57563ec963b5bf694bd410c2c4a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the list of internally available locales and already loaded custom locales.
     * (It will ignore custom translator dynamic loading.)
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getAvailableLocales',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'faade45997c8a641616644d5a616a37e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of Language object for each available locale. This object allow you to get the ISO name, native
     * name, region and variant of the locale.
     *
     * @return Language[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getAvailableLocalesInfo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '113093c5d8dfdedbaa2ac4483479f0d2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Initialize the default translator instance if necessary.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'translator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '98660a22f6539099e5e72622435f1a2a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the locale of a given translator.
     *
     * If null or omitted, current local translator is used.
     * If no local translator is in use, current global translator is used.
     *
     * @param null $translator
     *
     * @return string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslatorLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4a822363d1d26eb9086cfae71b8760df' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Throw an error if passed object is not LocaleAwareInterface.
     *
     * @param LocaleAwareInterface|null $translator
     *
     * @return LocaleAwareInterface|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getLocaleAwareTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '12a6bc82b0598214a28f31da5de3cfcc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the word cleaned from its translation codes.
     *
     * @param string $word
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'cleanWordFromTranslationString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c9cf79542e664f8df5e24970b0b32ef5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a list of words.
     *
     * @param string[] $keys     keys to translate.
     * @param string[] $messages messages bag handling translations.
     * @param string   $key      \'to\' (to get the translation) or \'from\' (to get the detection RegExp pattern).
     *
     * @return string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'translateWordsByKeys',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae934c5b0ff9127154c97f1bd02d5554' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get an array of translations based on the current date.
     *
     * @param callable $translation
     * @param int      $length
     * @param string   $timeString
     *
     * @return string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslationArray',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd29b53c6c758b6b479fa28cbc5df1a00' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Customizable PHP_INT_SIZE override.
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2320b91190d006613fb0ceb965b1236a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * First day of week.
     *
     * @var int|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '829124eed3f209ad1d9bcf1ca171308d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Last day of week.
     *
     * @var int|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '44478c8832d5e9892e1cca4aa53df99f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Days of weekend.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bc3d19cffdbd480c4beb2e7518eb5e44' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format regex patterns.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e1337ba87fc1f3e9e2ef23b37b318b82' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format modifiers (such as available in createFromFormat) regex patterns.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b45b73dd25ecdcb158eeebbe77e4c9ca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if months should be calculated with overflow.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bc0cc1a88f2af1d94741a72576a7f647' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if years should be calculated with overflow.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e48e67ff49de8d923da45eb76581c4ce' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if the strict mode is in use.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2579b43f866cefdc74525b5c9699c6cf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of format.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '90aba20f95b55370d040a8d4bbbab8c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of createFromFormat.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bd184a0837f3a17a3bfc65f4cc0ee866' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of parse.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd6bfcbea54d810246aa78fcb81afb686' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if months should be calculated with overflow.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a8ed41243c4f9158354b60c5296a63bc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if years should be calculated with overflow.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '82d005845bd2b01c45345088c008d39c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if the strict mode is in use.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bb3afb6816181780d75b4d49dde78262' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Options for diffForHumans and forHumans methods.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '41cbf911f139eef5c11131e0336958b6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use on string cast.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a75dea7b42e9e70c3d06ee3f6f3880d1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use on JSON serialization.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e75844315391df44c268a9f2658773e8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Instance-specific macros.
     *
     * @var array|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3509b6606320340e7ab8b5c0e91c7db0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Instance-specific generic macros.
     *
     * @var array|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dd5d26b50cfa458007f9f82bf512d531' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * Enable the strict mode (or disable with passing false).
     *
     * @param bool $strictModeEnabled
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'useStrictMode',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd9f30caa324d4ac99c6929ab935d4349' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the strict mode is globally in use, false else.
     * (It can be overridden in specific instances.)
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isStrictModeEnabled',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '439a78cf5e7960059dd57f3b75ab1655' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Indicates if months should be calculated with overflow.
     *
     * @param bool $monthsOverflow
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'useMonthsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '350b9ec000df39112983d8546dd6e67b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Reset the month overflow behavior.
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'resetMonthsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e7016672f673145bd9c2ea614b41acba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the month overflow global behavior (can be overridden in specific instances).
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'shouldOverflowMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c8523ed79037e6c357589b27be1ed0b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Indicates if years should be calculated with overflow.
     *
     * @param bool $yearsOverflow
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'useYearsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a50e94a1e513eb3c30c158acfa8958e0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Reset the month overflow behavior.
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'resetYearsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e3076da13739187cc61deec23ea48a7f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the month overflow global behavior (can be overridden in specific instances).
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'shouldOverflowYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '485c5db46cd461e2ba00160e3ec72fdc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set specific options.
     *  - strictMode: true|false|null
     *  - monthOverflow: true|false|null
     *  - yearOverflow: true|false|null
     *  - humanDiffOptions: int|null
     *  - toStringFormat: string|Closure|null
     *  - toJsonFormat: string|Closure|null
     *  - locale: string|null
     *  - timezone: \\DateTimeZone|string|int|null
     *  - macros: array|null
     *  - genericMacros: array|null
     *
     * @param array $settings
     *
     * @return $this|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'settings',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '34cb5fba62b709dfd927e478a9369a39' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns current local settings.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getSettings',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e86da27c916ed4eed21d2db60466a915' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Show truthy properties on var_dump().
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__debugInfo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f4048cebcc73c36d11770f74fb0dcdeb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '10e4555d13e5693507559a2270538da1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Rounding.
 *
 * Round, ceil, floor units.
 *
 * Depends on the following methods:
 *
 * @method static copy()
 * @method static startOfWeek(int $weekStartsAt = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '26e5230a323eb4af9f6521a7b7b2f6ec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ad5a6cf6e74b7f69f758a55da192ea42' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait to call rounding methods to interval or the interval of a period.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterval' => 'Carbon\\CarbonInterval',
          'invalidintervalexception' => 'Carbon\\Exceptions\\InvalidIntervalException',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '15e36249541bfa33716386abcd89624e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance at the given unit with given precision if specified and the given function.
     *
     * @param string    $unit
     * @param float|int $precision
     * @param string    $function
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'roundUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cf6dfb96f86cbe3bd9a4608562541575' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $result */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'roundUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ef8a62debfa07a90cb487141c5251ca9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Truncate the current instance at the given unit with given precision if specified.
     *
     * @param string    $unit
     * @param float|int $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floorUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'abc58b412c2be23cde6d43c4311371fd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance at the given unit with given precision if specified.
     *
     * @param string    $unit
     * @param float|int $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'ceilUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e6a0229def6257985e70cc80bc4a078b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     * @param string                              $function
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'round',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2ddcd0caacc766a18fa642449bf82d9f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floor',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '364b8061753c29dc1a6afdd66733b17b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'ceil',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '507c1f7da868b89d59ee6b440ae96360' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'roundWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a2354180328d33e9a6add4cd3a34b1e9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Truncate the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'floorWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ceea715ff4334cf9d4a7ec9814efbbc4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'ceilWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f47428ed134c1b9e07fa0ef018357c78' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3937ea339d2aa917ece71a8bdff68670' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Serialization.
 *
 * Serialization and JSON stuff.
 *
 * Depends on the following properties:
 *
 * @property int $year
 * @property int $month
 * @property int $daysInMonth
 * @property int $quarter
 *
 * Depends on the following methods:
 *
 * @method string|static locale(string $locale = null, string ...$fallbackLocales)
 * @method string        toJSON()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a2122f85fa08309c1873fb23a24a642f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The custom Carbon JSON serializer.
     *
     * @var callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8de08791d7c45cced5501c04eaa5ee56' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of key to use for dump/serialization.
     *
     * @var string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f9b5fc06e9b70ac36e52910dbbf6354d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Locale to dump comes here before serialization.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5c1c78b7da4f92c478891b654450d706' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a serialized string of the instance.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'serialize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c52af1f817e618477729a9faccfaac45' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create an instance from a serialized string.
     *
     * @param string $value
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'fromSerialized',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '518877d38300e2563fdd61bef11efa50' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The __set_state handler.
     *
     * @param string|array $dump
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__set_state',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd0aebb25d69afcc00311d7bbb0970575' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\DateTimeInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__set_state',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c0a0b22ebf8251f36add748af6d2362b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the list of properties to dump on serialize() called on.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__sleep',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ce16fe1fa12a0271089466706a6986f7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set locale if specified on unserialize() called.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__wakeup',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1c426b42f0bd4e974bd4a6092a33fa98' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Prepare the object for JSON serialization.
     *
     * @return array|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'jsonSerialize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3825a0ab0d75434098298befeaadf09c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather transform Carbon object before the serialization.
     *
     * JSON serialize all Carbon instances using the given callback.
     *
     * @param callable $callback
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'serializeUsing',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '69f1245aaeba8458bb19eaea4ef86f3b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Cleanup properties attached to the public scope of DateTime when a dump of the date is requested.
     * foreach ($date as $_) {}
     * serializer($date)
     * var_export($date)
     * get_object_vars($date)
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'cleanupDumpProperties',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '585943aed0e33ed3d86c1470f15a19a6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2efce6c01aa105954a9d41b507f95b22' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * A test Carbon instance to be returned when now instances are created.
     *
     * @var static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b84b7999d74737d8d87c84895e469e8c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a Carbon instance (real or mock) to be returned when a "now"
     * instance is created.  The provided instance will be returned
     * specifically under the following conditions:
     *   - A call to the static now() method, ex. Carbon::now()
     *   - When a null (or blank string) is passed to the constructor or parse(), ex. new Carbon(null)
     *   - When the string "now" is passed to the constructor or parse(), ex. new Carbon(\'now\')
     *   - When a string containing the desired time is passed to Carbon::parse().
     *
     * Note the timezone parameter was left out of the examples above and
     * has no affect as the mock value will be returned regardless of its value.
     *
     * To clear the test instance call this method using the default
     * parameter of null.
     *
     * /!\\ Use this method for unit tests only.
     *
     * @param Closure|static|string|false|null $testNow real or mock Carbon instance
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a52780aeeb677123bef2f33a564c0019' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Temporarily sets a static date to be used within the callback.
     * Using setTestNow to set the date, executing the callback, then
     * clearing the test instance.
     *
     * /!\\ Use this method for unit tests only.
     *
     * @param Closure|static|string|false|null $testNow real or mock Carbon instance
     * @param Closure|null $callback
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'withTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7b43db4c172193242437b55356af2771' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the Carbon instance (real or mock) to be returned when a "now"
     * instance is created.
     *
     * @return Closure|static the current instance used for testing
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5dc9513f93c05003b005202d604baaf6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determine if there is a valid test instance set. A valid test instance
     * is anything that is not null.
     *
     * @return bool true if there is a test instance, otherwise false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'hasTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8e450b8a8515d8fd2a43bcfdb463c5e8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the given timezone and set it to the test instance if not null.
     * If null, get the timezone from the test instance and return it.
     *
     * @param string|\\DateTimeZone    $tz
     * @param \\Carbon\\CarbonInterface $testInstance
     *
     * @return string|\\DateTimeZone
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'handleMockTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '989c0130c73fef3520d4d824e40fa80e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the mocked date passed in setTestNow() and if it\'s a Closure, execute it.
     *
     * @param string|\\DateTimeZone $tz
     *
     * @return \\Carbon\\CarbonImmutable|\\Carbon\\Carbon|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getMockedTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ea9f08a07d58cef1cf59dd829012cf55' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\Carbon\\CarbonImmutable|\\Carbon\\Carbon $testInstance */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'mockConstructorParameters',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e01c3320f8b481234fd66c81e4e347d8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a5424bfdb6c4afefce37d19533127eef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Timestamp.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '417b10c45b2dd03c09c5a8291ae6c894' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp and set the timezone (use default one if not specified).
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string          $timestamp
     * @param \\DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '81efc2ab9588b6f911d7bbcacb4a9570' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from an timestamp keeping the timezone to UTC.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $timestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromTimestampUTC',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd3a1623a9fae648cd07c29283aa1883c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp in milliseconds.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $timestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromTimestampMsUTC',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3433f82ea77c38e3c1eb3ca0e9464204' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp in milliseconds.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string          $timestamp
     * @param \\DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'createFromTimestampMs',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1d2af00ba2c11b6361ddb49543458261' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timestamp.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $unixTimestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'timestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0a7dbbf77a05b816ae8ed4846c6a750a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a timestamp rounded with the given precision (6 by default).
     *
     * @example getPreciseTimestamp()   1532087464437474 (microsecond maximum precision)
     * @example getPreciseTimestamp(6)  1532087464437474
     * @example getPreciseTimestamp(5)  153208746443747  (1/100000 second precision)
     * @example getPreciseTimestamp(4)  15320874644375   (1/10000 second precision)
     * @example getPreciseTimestamp(3)  1532087464437    (millisecond precision)
     * @example getPreciseTimestamp(2)  153208746444     (1/100 second precision)
     * @example getPreciseTimestamp(1)  15320874644      (1/10 second precision)
     * @example getPreciseTimestamp(0)  1532087464       (second precision)
     * @example getPreciseTimestamp(-1) 153208746        (10 second precision)
     * @example getPreciseTimestamp(-2) 15320875         (100 second precision)
     *
     * @param int $precision
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getPreciseTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f3ce8b5f1e0f9b5fe046f9100fb35c58' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the milliseconds timestamps used amongst other by Date javascript objects.
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'valueOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '45c20e56eef015caef484f8ceb0bf527' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias getTimestamp
     *
     * Returns the UNIX timestamp for the current date.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'unix',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '98c34e589c426e9ec8d9458201eab45b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return an array with integer part digits and decimals digits split from one or more positive numbers
     * (such as timestamps) as string with the given number of decimals (6 by default).
     *
     * By splitting integer and decimal, this method obtain a better precision than
     * number_format when the input is a string.
     *
     * @param float|int|string $numbers  one or more numbers
     * @param int              $decimals number of decimals precision (6 by default)
     *
     * @return array 0-index is integer part, 1-index is decimal part digits
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getIntegerAndDecimalParts',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed5472109c86bff8b3b7aa6ef3344099' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ea3d61614013e91a722e9ebbda3eb5f4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Units.
 *
 * Add, subtract and set units.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '12645f1074cd2c2f98d5849ca9d27285' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add seconds to the instance using timestamp. Positive $value travels
     * forward while negative $value travels into the past.
     *
     * @param string $unit
     * @param int    $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'addRealUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '47cfa648d39a2aa0a173a30498d5f986' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if a property can be changed via setter.
     *
     * @param string $unit
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isModifiableUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5580cca944af31fd6482efbdcbb59062' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Call native PHP DateTime/DateTimeImmutable add() method.
     *
     * @param DateInterval $interval
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'rawAdd',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b6cf2eab63d3db7c504dc44b6b593ef5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add given units or interval to the current instance.
     *
     * @example $date->add(\'hour\', 3)
     * @example $date->add(15, \'days\')
     * @example $date->add(CarbonInterval::days(4))
     *
     * @param string|DateInterval|Closure|CarbonConverterInterface $unit
     * @param int                                                  $value
     * @param bool|null                                            $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'add',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '31166dbb368bbc30223c2c365171a295' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add given units to the current instance.
     *
     * @param string    $unit
     * @param int       $value
     * @param bool|null $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'addUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cfea7bc5b8b5cb48c902c79f3256cf81' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var static $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'addUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ca689dfb69da4a34a947947d5aa0c772' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units to the current instance.
     *
     * @param string    $unit
     * @param int       $value
     * @param bool|null $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'subUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c6cce03904e8f941decdccaf51de3f92' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Call native PHP DateTime/DateTimeImmutable sub() method.
     *
     * @param DateInterval $interval
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'rawSub',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9fd824bd8f1bf8f26ef1aa3a3497fe8b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units or interval to the current instance.
     *
     * @example $date->sub(\'hour\', 3)
     * @example $date->sub(15, \'days\')
     * @example $date->sub(CarbonInterval::days(4))
     *
     * @param string|DateInterval|Closure|CarbonConverterInterface $unit
     * @param int                                                  $value
     * @param bool|null                                            $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'sub',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a5b16d61403621278866dc2fc5bc6022' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units or interval to the current instance.
     *
     * @see sub()
     *
     * @param string|DateInterval $unit
     * @param int                 $value
     * @param bool|null           $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'subtract',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e800d19222f6568d7364a88cdd3a19c9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9865e61231e5af8283baf06d2e254f19' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Week.
 *
 * week and ISO week number, year and count in year.
 *
 * Depends on the following properties:
 *
 * @property int $daysInYear
 * @property int $dayOfWeek
 * @property int $dayOfYear
 * @property int $year
 *
 * Depends on the following methods:
 *
 * @method static addWeeks(int $weeks = 1)
 * @method static copy()
 * @method static dayOfYear(int $dayOfYear)
 * @method string getTranslationMessage(string $key, string $locale = null, string $default = null, $translator = null)
 * @method static next(int|string $day = null)
 * @method static startOfWeek(int $day = 1)
 * @method static subWeeks(int $weeks = 1)
 * @method static year(int $year = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fd953349ca2374208c76b68dfd3a2dee' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set/get the week number of year using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isoWeekYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '93cba5a7e87856213689a06f46645e1f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set/get the week number of year using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'weekYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '71a09dd66705edbcfdbbafb0f56d7d60' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the number of weeks of the current week-year using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isoWeeksInYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '679081c7c5eab62c10fa4aea72fc7364' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the number of weeks of the current week-year using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'weeksInYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b27fe2a281d7016e997a1075a4219d4f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the week number using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $week
     * @param int|null $dayOfWeek
     * @param int|null $dayOfYear
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'week',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '02414e2b65c26d6ed971739e20186deb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the week number using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $week
     * @param int|null $dayOfWeek
     * @param int|null $dayOfYear
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isoWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '468aa0be130f3a271f1cc78ccc4330af' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Names of days of the week.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '75c2197656e0d8c2878d43883744a019' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Will UTF8 encoding be used to print localized date/time ?
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b3287e5b94eb8fc4b764ac4856153047' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of unit and magic methods associated as doc-comments.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2858466d6da162f17e4a5045267517ea' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Creates a DateTimeZone from a string, DateTimeZone or integer offset.
     *
     * @param DateTimeZone|string|int|null $object     original value to get CarbonTimeZone from it.
     * @param DateTimeZone|string|int|null $objectDump dump of the object for error messages.
     *
     * @throws InvalidTimeZoneException
     *
     * @return CarbonTimeZone|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'safeCreateDateTimeZone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'abe4fef96b1a9c77eae9db0cd103779e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the TimeZone associated with the Carbon instance (as CarbonTimeZone).
     *
     * @return CarbonTimeZone
     *
     * @link http://php.net/manual/en/datetime.gettimezone.php
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '253609d6d105e92fe96477edf3273312' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of minimum and maximums for each unit.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getRangesByUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd374d9d2a9b3acd39f4b53df5b06f66e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a copy of the instance.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'copy',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '16fe6b64160ac00043c178c045606bda' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias copy
     *
     * Get a copy of the instance.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'clone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '24aa8015800dd7f257676933ca7d4e0e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a present instance in the same timezone.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'nowWithSameTz',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '88c0e7f16e428017738171e1ce7e5d69' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Throws an exception if the given object is not a DateTime and does not implement DateTimeInterface.
     *
     * @param mixed        $date
     * @param string|array $other
     *
     * @throws InvalidTypeException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'expectDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '25f12db0503d9ecf17eade188c5780dd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the Carbon instance passed through, a now instance in the same timezone
     * if null given or parse the input if string given.
     *
     * @param Carbon|DateTimeInterface|string|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'resolveCarbon',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2b619e9a41e4eca690a3e3fc4db11228' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the Carbon instance passed through, a now instance in the same timezone
     * if null given or parse the input if string given.
     *
     * @param Carbon|\\Carbon\\CarbonPeriod|\\Carbon\\CarbonInterval|\\DateInterval|\\DatePeriod|DateTimeInterface|string|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'carbonize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6050f287eeec4084689c2c15f87acb30' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a part of the Carbon object
     *
     * @param string $name
     *
     * @throws UnknownGetterException
     *
     * @return string|int|bool|DateTimeZone|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__get',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a4c43ae7273705ff4352cd6ad8a5a829' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a part of the Carbon object
     *
     * @param string $name
     *
     * @throws UnknownGetterException
     *
     * @return string|int|bool|DateTimeZone|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'get',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '030b43023c6158ed1684a98512c7f60a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if an attribute exists on the object
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__isset',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fb81263bcce5dddcf50529de9fc9294f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a part of the Carbon object
     *
     * @param string                  $name
     * @param string|int|DateTimeZone $value
     *
     * @throws UnknownSetterException|ReflectionException
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__set',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f1e9ee9576266447c7c57b1799bd756' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a part of the Carbon object
     *
     * @param string|array            $name
     * @param string|int|DateTimeZone $value
     *
     * @throws ImmutableException|UnknownSetterException
     *
     * @return $this
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'set',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0b258cd4dacf9af2481efbb644623ae2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current week day name (with context for languages with multiple forms).
     *
     * @param string|null $context      whole format string
     * @param string      $keySuffix    "", "_short" or "_min"
     * @param string|null $defaultValue default value if translation missing
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslatedDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8fd99976aa600d240697875ce1eeedab' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current short week day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslatedShortDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0b378d47083983fbec0ee67ac7153b91' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current abbreviated week day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslatedMinDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f0193b1f0b013568d716c6f8c790edfb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current month day name (with context for languages with multiple forms).
     *
     * @param string|null $context      whole format string
     * @param string      $keySuffix    "" or "_short"
     * @param string|null $defaultValue default value if translation missing
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslatedMonthName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '18498b0a8ae085b1239c553c3d3b42b3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current short month day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getTranslatedShortMonthName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a211b5ba07635bf4e4f1fcb93561162c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the day of year.
     *
     * @param int|null $value new value for day of year if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'dayOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '09803f7211e6d124d7f4e230533b2a73' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the weekday from 0 (Sunday) to 6 (Saturday).
     *
     * @param int|null $value new value for weekday if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'weekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2d04aa7b854c257e9491947502014597' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the ISO weekday from 1 (Monday) to 7 (Sunday).
     *
     * @param int|null $value new value for weekday if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isoWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '610ffb65132ff8760ce31ce0248da9eb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        new value for the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0ce5571b8beaf667bd283b948982278e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var static $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8779a9845a8fa246f682e2e1b688d086' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        amount to add to the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'addUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '71db1140e1222adbb91f18c9235dce2e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        amount to subtract to the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'subUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '87048f8b63608e2542106db0c4de522f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the minutes offset to UTC if no arguments passed, else set the timezone with given minutes shift passed.
     *
     * @param int|null $offset
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'utcOffset',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '695e0eeb208b509b2d7d591853c8e89d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date with gregorian year, month and day numbers.
     *
     * @see https://php.net/manual/en/datetime.setdate.php
     *
     * @param int $year
     * @param int $month
     * @param int $day
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1cc7b5055259e68988227f899a464254' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.
     *
     * @see https://php.net/manual/en/datetime.setisodate.php
     *
     * @param int $year
     * @param int $week
     * @param int $day
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setISODate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '02b042dcc8c630d6f25773e2d2a6b9ab' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date and time all together.
     *
     * @param int $year
     * @param int $month
     * @param int $day
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microseconds
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fa936d9984e99c32f9e3359fb9caf188' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the current time of the DateTime object to a different time.
     *
     * @see https://php.net/manual/en/datetime.settime.php
     *
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microseconds
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6da0ad928e53baaa413e7e262bbbb1d2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timestamp.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $unixTimestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '25aa2fd3eb004b48368595f2e6b977c8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the time by time string.
     *
     * @param string $time
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setTimeFromTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7a94236d2b59db850e45251afec0c865' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias setTimezone
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'timezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '26942d596583d2607bd9b1d44b733cfd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the timezone or returns the timezone name if no arguments passed.
     *
     * @param DateTimeZone|string $value
     *
     * @return static|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'tz',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '103c777d934374109c93dcd3ff81465d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone from a string or object.
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '18c11c989baa19284d4d89a0781df865' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone from a string or object and add/subtract the offset difference.
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'shiftTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e76b1dd638f6caa55676e50fde2d99e4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone to UTC.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'utc',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dafb2ab73bb50dc0ff8a0cbb61c64780' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the year, month, and date for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date now if null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setDateFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '52b25bc43fb2b5cec5c2fb6596687cd8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the hour, minute, second and microseconds for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date now if null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setTimeFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '682d08781211c3ccadeeb2e38a19be8d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date and time for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setDateTimeFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5f50a507b072dacf5f59e7b1c2936d03' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the days of the week
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae657897607ee946a0b5e137f5fb6dab' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the first day of week
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getWeekStartsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8f963df38e6505223e6f83e6356f23b8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             Use $weekEndsAt optional parameter instead when using endOfWeek method. You can also use the
     *             \'first_day_of_week\' locale setting to change the start of week according to current locale
     *             selected and implicitly the end of week.
     *
     * Set the first day of week
     *
     * @param int|string $day week start day (or \'auto\' to get the first day of week from Carbon::getLocale() culture).
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setWeekStartsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b30c606c2066659ce9310d0e9be6be86' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the last day of week
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getWeekEndsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '45d8b5f4798b48a299a566348cdbfa95' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             Use $weekStartsAt optional parameter instead when using startOfWeek, floorWeek, ceilWeek
     *             or roundWeek method. You can also use the \'first_day_of_week\' locale setting to change the
     *             start of week according to current locale selected and implicitly the end of week.
     *
     * Set the last day of week
     *
     * @param int|string $day week end day (or \'auto\' to get the day before the first day of week
     *                        from Carbon::getLocale() culture).
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setWeekEndsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '70c0465cca8949eedd47607bd93d4d61' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get weekend days
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eab3286d99a48fb32ad306907dc5d6f7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather consider week-end is always saturday and sunday, and if you have some custom
     *             week-end days to handle, give to those days an other name and create a macro for them:
     *
     *             ```
     *             Carbon::macro(\'isDayOff\', function ($date) {
     *                 return $date->isSunday() || $date->isMonday();
     *             });
     *             Carbon::macro(\'isNotDayOff\', function ($date) {
     *                 return !$date->isDayOff();
     *             });
     *             if ($someDate->isDayOff()) ...
     *             if ($someDate->isNotDayOff()) ...
     *             // Add 5 not-off days
     *             $count = 5;
     *             while ($someDate->isDayOff() || ($count-- > 0)) {
     *                 $someDate->addDay();
     *             }
     *             ```
     *
     * Set weekend days
     *
     * @param array $days
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e995ab37e658968b83f9269c93c692a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determine if a time string will produce a relative date.
     *
     * @param string $time
     *
     * @return bool true if time match a relative date, false if absolute or invalid time string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'hasRelativeKeywords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'def1085d26841d0b43b20ec390bc082c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use UTF-8 language packages on every machine.
     *
     * Set if UTF8 will be used for localized date/time.
     *
     * @param bool $utf8
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setUtf8',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'afbdfddc32cfed2dcff05cb21125a150' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance with the current locale.  You can set the current
     * locale using setlocale() http://php.net/setlocale.
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'formatLocalized',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe547420867611a8a66e2f9ccac05f13' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of locale formats for ISO formatting.
     *
     * @param string|null $locale current locale used if null
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getIsoFormats',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cb2fc3c53ff4e6ed72190e78ccc4852a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of calendar formats for ISO formatting.
     *
     * @param string|null $locale current locale used if null
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getCalendarFormats',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'de6d101fcb63ae18890690b85670dfee' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of locale units for ISO formatting.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getIsoUnits',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5ad041786f6aaa24b6578ecfb5733ca6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a unit of the instance padded with 0 by default or any other string if specified.
     *
     * @param string $unit      Carbon unit name
     * @param int    $length    Length of the output (2 by default)
     * @param string $padString String to use for padding ("0" by default)
     * @param int    $padType   Side(s) to pad (STR_PAD_LEFT by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getPaddedUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9ab7d7217eb975ccfdc2e5168f7345ae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a property with its ordinal.
     *
     * @param string      $key
     * @param string|null $period
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'ordinal',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5224c0e725874aa08b7d8ce0b92f28e2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the meridiem of the current time in the current locale.
     *
     * @param bool $isLower if true, returns lowercase variant if available in the current locale.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'meridiem',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1c46a1e086bc3d107de0691fa5ec0ece' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the alternative number for a given date property if available in the current locale.
     *
     * @param string $key date property
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getAltNumber',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '83e55a8bbe9cc2ea10a2cfb648515cc8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format in the current language using ISO replacement patterns.
     *
     * @param string      $format
     * @param string|null $originalFormat provide context if a chunk has been passed alone
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '20dce2e556afbb3d8e43712b629f5822' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of replacements from date() format to isoFormat().
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getFormatsToIsoReplacements',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2155875766b06397837f2614ed17b089' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format as ->format() do (using date replacements patterns from http://php.net/manual/fr/function.date.php)
     * but translate words whenever possible (months, day names, etc.) using the current locale.
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'translatedFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '42b92b2c161fb3f580632593a2bb1bb5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the offset hour and minute formatted with +/- and a given separator (":" by default).
     * For example, if the time zone is 9 hours 30 minutes, you\'ll get "+09:30", with "@@" as first
     * argument, "+09@@30", with "" as first argument, "+0930". Negative offset will return something
     * like "-12:00".
     *
     * @param string $separator string to place between hours and minutes (":" by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'getOffsetString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '00aaa22283b66e7931b2c05ccf59ffcf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Dynamically handle calls to the class.
     *
     * @param string $method     magic method name called
     * @param array  $parameters parameters list
     *
     * @throws BadMethodCallException
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__callStatic',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '32289da40be9336ba3faffd115f529b0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set specified unit to new given value.
     *
     * @param string $unit  year, month, day, hour, minute, second or microsecond
     * @param int    $value new value for given unit
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'setUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ac04020038987bde7f0fb0107bb27bb6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns standardized singular of a given singular/plural unit name (in English).
     *
     * @param string $unit
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'singularUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '01b6ef8544993ca1a964b1570ea2723e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns standardized plural of a given singular/plural unit name (in English).
     *
     * @param string $unit
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'pluralUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8be8b588163f4de09365f2636a9284cd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Dynamically handle calls to the class.
     *
     * @param string $method     magic method name called
     * @param array  $parameters parameters list
     *
     * @throws UnknownMethodException|BadMethodCallException|ReflectionException|Throwable
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => '__call',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd0c7fca532509231f3092cff4bfff792' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is mutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon',
         'uses' => 
        array (
          'date' => 'Carbon\\Traits\\Date',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
        ),
         'className' => 'Carbon\\Carbon',
         'functionName' => 'isMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
  ),
));