<?php declare(strict_types = 1);

return PHPStan\Cache\CacheItem::__set_state(array(
   'variableKey' => 'C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Date.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Boundaries.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Comparison.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Converter.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Creator.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Difference.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Macro.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Mixin.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Modifiers.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Mutability.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Cast.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Options.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Localization.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Rounding.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\IntervalRounding.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Serialization.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\ObjectInitialisation.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Test.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Timestamp.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Units.php-1610491694,C:\\wamp64\\www\\vendor\\nesbot\\carbon\\src\\Carbon\\Traits\\Week.php-1610491694',
   'data' => 
  array (
    'b0b4344081533efd03d83da1f4dcfb65' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => NULL,
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dd7734b221db8cf1bd039fda8c1340d4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * A simple API extension for DateTime.
 *
 * <autodoc generated by `composer phpdoc`>
 *
 * @property      int              $year
 * @property      int              $yearIso
 * @property      int              $month
 * @property      int              $day
 * @property      int              $hour
 * @property      int              $minute
 * @property      int              $second
 * @property      int              $micro
 * @property      int              $microsecond
 * @property      int|float|string $timestamp                                                                         seconds since the Unix Epoch
 * @property      string           $englishDayOfWeek                                                                  the day of week in English
 * @property      string           $shortEnglishDayOfWeek                                                             the abbreviated day of week in English
 * @property      string           $englishMonth                                                                      the month in English
 * @property      string           $shortEnglishMonth                                                                 the abbreviated month in English
 * @property      string           $localeDayOfWeek                                                                   the day of week in current locale LC_TIME
 * @property      string           $shortLocaleDayOfWeek                                                              the abbreviated day of week in current locale LC_TIME
 * @property      string           $localeMonth                                                                       the month in current locale LC_TIME
 * @property      string           $shortLocaleMonth                                                                  the abbreviated month in current locale LC_TIME
 * @property      int              $milliseconds
 * @property      int              $millisecond
 * @property      int              $milli
 * @property      int              $week                                                                              1 through 53
 * @property      int              $isoWeek                                                                           1 through 53
 * @property      int              $weekYear                                                                          year according to week format
 * @property      int              $isoWeekYear                                                                       year according to ISO week format
 * @property      int              $dayOfYear                                                                         1 through 366
 * @property      int              $age                                                                               does a diffInYears() with default parameters
 * @property      int              $offset                                                                            the timezone offset in seconds from UTC
 * @property      int              $offsetMinutes                                                                     the timezone offset in minutes from UTC
 * @property      int              $offsetHours                                                                       the timezone offset in hours from UTC
 * @property      CarbonTimeZone   $timezone                                                                          the current timezone
 * @property      CarbonTimeZone   $tz                                                                                alias of $timezone
 * @property-read int              $dayOfWeek                                                                         0 (for Sunday) through 6 (for Saturday)
 * @property-read int              $dayOfWeekIso                                                                      1 (for Monday) through 7 (for Sunday)
 * @property-read int              $weekOfYear                                                                        ISO-8601 week number of year, weeks starting on Monday
 * @property-read int              $daysInMonth                                                                       number of days in the given month
 * @property-read string           $latinMeridiem                                                                     "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
 * @property-read string           $latinUpperMeridiem                                                                "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
 * @property-read string           $timezoneAbbreviatedName                                                           the current timezone abbreviated name
 * @property-read string           $tzAbbrName                                                                        alias of $timezoneAbbreviatedName
 * @property-read string           $dayName                                                                           long name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $shortDayName                                                                      short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $minDayName                                                                        very short name of weekday translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $monthName                                                                         long name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $shortMonthName                                                                    short name of month translated according to Carbon locale, in english if no translation available for current language
 * @property-read string           $meridiem                                                                          lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read string           $upperMeridiem                                                                     uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
 * @property-read int              $noZeroHour                                                                        current hour from 1 to 24
 * @property-read int              $weeksInYear                                                                       51 through 53
 * @property-read int              $isoWeeksInYear                                                                    51 through 53
 * @property-read int              $weekOfMonth                                                                       1 through 5
 * @property-read int              $weekNumberInMonth                                                                 1 through 5
 * @property-read int              $firstWeekDay                                                                      0 through 6
 * @property-read int              $lastWeekDay                                                                       0 through 6
 * @property-read int              $daysInYear                                                                        365 or 366
 * @property-read int              $quarter                                                                           the quarter of this instance, 1 - 4
 * @property-read int              $decade                                                                            the decade of this instance
 * @property-read int              $century                                                                           the century of this instance
 * @property-read int              $millennium                                                                        the millennium of this instance
 * @property-read bool             $dst                                                                               daylight savings time indicator, true if DST, false otherwise
 * @property-read bool             $local                                                                             checks if the timezone is local, true if local, false otherwise
 * @property-read bool             $utc                                                                               checks if the timezone is UTC, true if UTC, false otherwise
 * @property-read string           $timezoneName                                                                      the current timezone name
 * @property-read string           $tzName                                                                            alias of $timezoneName
 * @property-read string           $locale                                                                            locale of the current instance
 *
 * @method        bool             isUtc()                                                                            Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
 * @method        bool             isLocal()                                                                          Check if the current instance has non-UTC timezone.
 * @method        bool             isValid()                                                                          Check if the current instance is a valid date.
 * @method        bool             isDST()                                                                            Check if the current instance is in a daylight saving time.
 * @method        bool             isSunday()                                                                         Checks if the instance day is sunday.
 * @method        bool             isMonday()                                                                         Checks if the instance day is monday.
 * @method        bool             isTuesday()                                                                        Checks if the instance day is tuesday.
 * @method        bool             isWednesday()                                                                      Checks if the instance day is wednesday.
 * @method        bool             isThursday()                                                                       Checks if the instance day is thursday.
 * @method        bool             isFriday()                                                                         Checks if the instance day is friday.
 * @method        bool             isSaturday()                                                                       Checks if the instance day is saturday.
 * @method        bool             isSameYear(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentYear()                                                                    Checks if the instance is in the same year as the current moment.
 * @method        bool             isNextYear()                                                                       Checks if the instance is in the same year as the current moment next year.
 * @method        bool             isLastYear()                                                                       Checks if the instance is in the same year as the current moment last year.
 * @method        bool             isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentWeek()                                                                    Checks if the instance is in the same week as the current moment.
 * @method        bool             isNextWeek()                                                                       Checks if the instance is in the same week as the current moment next week.
 * @method        bool             isLastWeek()                                                                       Checks if the instance is in the same week as the current moment last week.
 * @method        bool             isSameDay(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentDay()                                                                     Checks if the instance is in the same day as the current moment.
 * @method        bool             isNextDay()                                                                        Checks if the instance is in the same day as the current moment next day.
 * @method        bool             isLastDay()                                                                        Checks if the instance is in the same day as the current moment last day.
 * @method        bool             isSameHour(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentHour()                                                                    Checks if the instance is in the same hour as the current moment.
 * @method        bool             isNextHour()                                                                       Checks if the instance is in the same hour as the current moment next hour.
 * @method        bool             isLastHour()                                                                       Checks if the instance is in the same hour as the current moment last hour.
 * @method        bool             isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMinute()                                                                  Checks if the instance is in the same minute as the current moment.
 * @method        bool             isNextMinute()                                                                     Checks if the instance is in the same minute as the current moment next minute.
 * @method        bool             isLastMinute()                                                                     Checks if the instance is in the same minute as the current moment last minute.
 * @method        bool             isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentSecond()                                                                  Checks if the instance is in the same second as the current moment.
 * @method        bool             isNextSecond()                                                                     Checks if the instance is in the same second as the current moment next second.
 * @method        bool             isLastSecond()                                                                     Checks if the instance is in the same second as the current moment last second.
 * @method        bool             isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMicro()                                                                   Checks if the instance is in the same microsecond as the current moment.
 * @method        bool             isNextMicro()                                                                      Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool             isLastMicro()                                                                      Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool             isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)               Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMicrosecond()                                                             Checks if the instance is in the same microsecond as the current moment.
 * @method        bool             isNextMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment next microsecond.
 * @method        bool             isLastMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment last microsecond.
 * @method        bool             isCurrentMonth()                                                                   Checks if the instance is in the same month as the current moment.
 * @method        bool             isNextMonth()                                                                      Checks if the instance is in the same month as the current moment next month.
 * @method        bool             isLastMonth()                                                                      Checks if the instance is in the same month as the current moment last month.
 * @method        bool             isCurrentQuarter()                                                                 Checks if the instance is in the same quarter as the current moment.
 * @method        bool             isNextQuarter()                                                                    Checks if the instance is in the same quarter as the current moment next quarter.
 * @method        bool             isLastQuarter()                                                                    Checks if the instance is in the same quarter as the current moment last quarter.
 * @method        bool             isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentDecade()                                                                  Checks if the instance is in the same decade as the current moment.
 * @method        bool             isNextDecade()                                                                     Checks if the instance is in the same decade as the current moment next decade.
 * @method        bool             isLastDecade()                                                                     Checks if the instance is in the same decade as the current moment last decade.
 * @method        bool             isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                   Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentCentury()                                                                 Checks if the instance is in the same century as the current moment.
 * @method        bool             isNextCentury()                                                                    Checks if the instance is in the same century as the current moment next century.
 * @method        bool             isLastCentury()                                                                    Checks if the instance is in the same century as the current moment last century.
 * @method        bool             isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
 * @method        bool             isCurrentMillennium()                                                              Checks if the instance is in the same millennium as the current moment.
 * @method        bool             isNextMillennium()                                                                 Checks if the instance is in the same millennium as the current moment next millennium.
 * @method        bool             isLastMillennium()                                                                 Checks if the instance is in the same millennium as the current moment last millennium.
 * @method        CarbonInterface  years(int $value)                                                                  Set current instance year to the given value.
 * @method        CarbonInterface  year(int $value)                                                                   Set current instance year to the given value.
 * @method        CarbonInterface  setYears(int $value)                                                               Set current instance year to the given value.
 * @method        CarbonInterface  setYear(int $value)                                                                Set current instance year to the given value.
 * @method        CarbonInterface  months(int $value)                                                                 Set current instance month to the given value.
 * @method        CarbonInterface  month(int $value)                                                                  Set current instance month to the given value.
 * @method        CarbonInterface  setMonths(int $value)                                                              Set current instance month to the given value.
 * @method        CarbonInterface  setMonth(int $value)                                                               Set current instance month to the given value.
 * @method        CarbonInterface  days(int $value)                                                                   Set current instance day to the given value.
 * @method        CarbonInterface  day(int $value)                                                                    Set current instance day to the given value.
 * @method        CarbonInterface  setDays(int $value)                                                                Set current instance day to the given value.
 * @method        CarbonInterface  setDay(int $value)                                                                 Set current instance day to the given value.
 * @method        CarbonInterface  hours(int $value)                                                                  Set current instance hour to the given value.
 * @method        CarbonInterface  hour(int $value)                                                                   Set current instance hour to the given value.
 * @method        CarbonInterface  setHours(int $value)                                                               Set current instance hour to the given value.
 * @method        CarbonInterface  setHour(int $value)                                                                Set current instance hour to the given value.
 * @method        CarbonInterface  minutes(int $value)                                                                Set current instance minute to the given value.
 * @method        CarbonInterface  minute(int $value)                                                                 Set current instance minute to the given value.
 * @method        CarbonInterface  setMinutes(int $value)                                                             Set current instance minute to the given value.
 * @method        CarbonInterface  setMinute(int $value)                                                              Set current instance minute to the given value.
 * @method        CarbonInterface  seconds(int $value)                                                                Set current instance second to the given value.
 * @method        CarbonInterface  second(int $value)                                                                 Set current instance second to the given value.
 * @method        CarbonInterface  setSeconds(int $value)                                                             Set current instance second to the given value.
 * @method        CarbonInterface  setSecond(int $value)                                                              Set current instance second to the given value.
 * @method        CarbonInterface  millis(int $value)                                                                 Set current instance millisecond to the given value.
 * @method        CarbonInterface  milli(int $value)                                                                  Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMillis(int $value)                                                              Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMilli(int $value)                                                               Set current instance millisecond to the given value.
 * @method        CarbonInterface  milliseconds(int $value)                                                           Set current instance millisecond to the given value.
 * @method        CarbonInterface  millisecond(int $value)                                                            Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMilliseconds(int $value)                                                        Set current instance millisecond to the given value.
 * @method        CarbonInterface  setMillisecond(int $value)                                                         Set current instance millisecond to the given value.
 * @method        CarbonInterface  micros(int $value)                                                                 Set current instance microsecond to the given value.
 * @method        CarbonInterface  micro(int $value)                                                                  Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicros(int $value)                                                              Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicro(int $value)                                                               Set current instance microsecond to the given value.
 * @method        CarbonInterface  microseconds(int $value)                                                           Set current instance microsecond to the given value.
 * @method        CarbonInterface  microsecond(int $value)                                                            Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicroseconds(int $value)                                                        Set current instance microsecond to the given value.
 * @method        CarbonInterface  setMicrosecond(int $value)                                                         Set current instance microsecond to the given value.
 * @method        CarbonInterface  addYears(int $value = 1)                                                           Add years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addYear()                                                                          Add one year to the instance (using date interval).
 * @method        CarbonInterface  subYears(int $value = 1)                                                           Sub years (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subYear()                                                                          Sub one year to the instance (using date interval).
 * @method        CarbonInterface  addYearsWithOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addYearWithOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subYearsWithOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subYearWithOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addYearsWithoutOverflow(int $value = 1)                                            Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearWithoutOverflow()                                                           Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsWithoutOverflow(int $value = 1)                                            Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearWithoutOverflow()                                                           Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearsWithNoOverflow(int $value = 1)                                             Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearWithNoOverflow()                                                            Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsWithNoOverflow(int $value = 1)                                             Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearWithNoOverflow()                                                            Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearsNoOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addYearNoOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearsNoOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subYearNoOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonths(int $value = 1)                                                          Add months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMonth()                                                                         Add one month to the instance (using date interval).
 * @method        CarbonInterface  subMonths(int $value = 1)                                                          Sub months (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMonth()                                                                         Sub one month to the instance (using date interval).
 * @method        CarbonInterface  addMonthsWithOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMonthWithOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMonthsWithOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMonthWithOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMonthsWithoutOverflow(int $value = 1)                                           Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthWithoutOverflow()                                                          Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsWithoutOverflow(int $value = 1)                                           Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthWithoutOverflow()                                                          Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthsWithNoOverflow(int $value = 1)                                            Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthWithNoOverflow()                                                           Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsWithNoOverflow(int $value = 1)                                            Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthWithNoOverflow()                                                           Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthsNoOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMonthNoOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthsNoOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMonthNoOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDays(int $value = 1)                                                            Add days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addDay()                                                                           Add one day to the instance (using date interval).
 * @method        CarbonInterface  subDays(int $value = 1)                                                            Sub days (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subDay()                                                                           Sub one day to the instance (using date interval).
 * @method        CarbonInterface  addHours(int $value = 1)                                                           Add hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addHour()                                                                          Add one hour to the instance (using date interval).
 * @method        CarbonInterface  subHours(int $value = 1)                                                           Sub hours (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subHour()                                                                          Sub one hour to the instance (using date interval).
 * @method        CarbonInterface  addMinutes(int $value = 1)                                                         Add minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMinute()                                                                        Add one minute to the instance (using date interval).
 * @method        CarbonInterface  subMinutes(int $value = 1)                                                         Sub minutes (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMinute()                                                                        Sub one minute to the instance (using date interval).
 * @method        CarbonInterface  addSeconds(int $value = 1)                                                         Add seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addSecond()                                                                        Add one second to the instance (using date interval).
 * @method        CarbonInterface  subSeconds(int $value = 1)                                                         Sub seconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subSecond()                                                                        Sub one second to the instance (using date interval).
 * @method        CarbonInterface  addMillis(int $value = 1)                                                          Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMilli()                                                                         Add one millisecond to the instance (using date interval).
 * @method        CarbonInterface  subMillis(int $value = 1)                                                          Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMilli()                                                                         Sub one millisecond to the instance (using date interval).
 * @method        CarbonInterface  addMilliseconds(int $value = 1)                                                    Add milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMillisecond()                                                                   Add one millisecond to the instance (using date interval).
 * @method        CarbonInterface  subMilliseconds(int $value = 1)                                                    Sub milliseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMillisecond()                                                                   Sub one millisecond to the instance (using date interval).
 * @method        CarbonInterface  addMicros(int $value = 1)                                                          Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMicro()                                                                         Add one microsecond to the instance (using date interval).
 * @method        CarbonInterface  subMicros(int $value = 1)                                                          Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMicro()                                                                         Sub one microsecond to the instance (using date interval).
 * @method        CarbonInterface  addMicroseconds(int $value = 1)                                                    Add microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMicrosecond()                                                                   Add one microsecond to the instance (using date interval).
 * @method        CarbonInterface  subMicroseconds(int $value = 1)                                                    Sub microseconds (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMicrosecond()                                                                   Sub one microsecond to the instance (using date interval).
 * @method        CarbonInterface  addMillennia(int $value = 1)                                                       Add millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addMillennium()                                                                    Add one millennium to the instance (using date interval).
 * @method        CarbonInterface  subMillennia(int $value = 1)                                                       Sub millennia (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subMillennium()                                                                    Sub one millennium to the instance (using date interval).
 * @method        CarbonInterface  addMillenniaWithOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMillenniumWithOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMillenniaWithOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subMillenniumWithOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addMillenniaWithoutOverflow(int $value = 1)                                        Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumWithoutOverflow()                                                     Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaWithoutOverflow(int $value = 1)                                        Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumWithoutOverflow()                                                     Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniaWithNoOverflow(int $value = 1)                                         Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumWithNoOverflow()                                                      Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaWithNoOverflow(int $value = 1)                                         Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumWithNoOverflow()                                                      Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniaNoOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addMillenniumNoOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniaNoOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subMillenniumNoOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturies(int $value = 1)                                                       Add centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addCentury()                                                                       Add one century to the instance (using date interval).
 * @method        CarbonInterface  subCenturies(int $value = 1)                                                       Sub centuries (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subCentury()                                                                       Sub one century to the instance (using date interval).
 * @method        CarbonInterface  addCenturiesWithOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addCenturyWithOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subCenturiesWithOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subCenturyWithOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addCenturiesWithoutOverflow(int $value = 1)                                        Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyWithoutOverflow()                                                        Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesWithoutOverflow(int $value = 1)                                        Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyWithoutOverflow()                                                        Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturiesWithNoOverflow(int $value = 1)                                         Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyWithNoOverflow()                                                         Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesWithNoOverflow(int $value = 1)                                         Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyWithNoOverflow()                                                         Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturiesNoOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addCenturyNoOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturiesNoOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subCenturyNoOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecades(int $value = 1)                                                         Add decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addDecade()                                                                        Add one decade to the instance (using date interval).
 * @method        CarbonInterface  subDecades(int $value = 1)                                                         Sub decades (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subDecade()                                                                        Sub one decade to the instance (using date interval).
 * @method        CarbonInterface  addDecadesWithOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addDecadeWithOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subDecadesWithOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subDecadeWithOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addDecadesWithoutOverflow(int $value = 1)                                          Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeWithoutOverflow()                                                         Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesWithoutOverflow(int $value = 1)                                          Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeWithoutOverflow()                                                         Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadesWithNoOverflow(int $value = 1)                                           Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeWithNoOverflow()                                                          Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesWithNoOverflow(int $value = 1)                                           Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeWithNoOverflow()                                                          Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadesNoOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addDecadeNoOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadesNoOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subDecadeNoOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarters(int $value = 1)                                                        Add quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addQuarter()                                                                       Add one quarter to the instance (using date interval).
 * @method        CarbonInterface  subQuarters(int $value = 1)                                                        Sub quarters (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subQuarter()                                                                       Sub one quarter to the instance (using date interval).
 * @method        CarbonInterface  addQuartersWithOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addQuarterWithOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subQuartersWithOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  subQuarterWithOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
 * @method        CarbonInterface  addQuartersWithoutOverflow(int $value = 1)                                         Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterWithoutOverflow()                                                        Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersWithoutOverflow(int $value = 1)                                         Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterWithoutOverflow()                                                        Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuartersWithNoOverflow(int $value = 1)                                          Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterWithNoOverflow()                                                         Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersWithNoOverflow(int $value = 1)                                          Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterWithNoOverflow()                                                         Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuartersNoOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addQuarterNoOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuartersNoOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  subQuarterNoOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
 * @method        CarbonInterface  addWeeks(int $value = 1)                                                           Add weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addWeek()                                                                          Add one week to the instance (using date interval).
 * @method        CarbonInterface  subWeeks(int $value = 1)                                                           Sub weeks (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subWeek()                                                                          Sub one week to the instance (using date interval).
 * @method        CarbonInterface  addWeekdays(int $value = 1)                                                        Add weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  addWeekday()                                                                       Add one weekday to the instance (using date interval).
 * @method        CarbonInterface  subWeekdays(int $value = 1)                                                        Sub weekdays (the $value count passed in) to the instance (using date interval).
 * @method        CarbonInterface  subWeekday()                                                                       Sub one weekday to the instance (using date interval).
 * @method        CarbonInterface  addRealMicros(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMicro()                                                                     Add one microsecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicros(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicro()                                                                     Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod     microsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonInterface  addRealMicroseconds(int $value = 1)                                                Add microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMicrosecond()                                                               Add one microsecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicroseconds(int $value = 1)                                                Sub microseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMicrosecond()                                                               Sub one microsecond to the instance (using timestamp).
 * @method        CarbonPeriod     microsecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
 * @method        CarbonInterface  addRealMillis(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMilli()                                                                     Add one millisecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillis(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMilli()                                                                     Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod     millisUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonInterface  addRealMilliseconds(int $value = 1)                                                Add milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMillisecond()                                                               Add one millisecond to the instance (using timestamp).
 * @method        CarbonInterface  subRealMilliseconds(int $value = 1)                                                Sub milliseconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillisecond()                                                               Sub one millisecond to the instance (using timestamp).
 * @method        CarbonPeriod     millisecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
 * @method        CarbonInterface  addRealSeconds(int $value = 1)                                                     Add seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealSecond()                                                                    Add one second to the instance (using timestamp).
 * @method        CarbonInterface  subRealSeconds(int $value = 1)                                                     Sub seconds (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealSecond()                                                                    Sub one second to the instance (using timestamp).
 * @method        CarbonPeriod     secondsUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
 * @method        CarbonInterface  addRealMinutes(int $value = 1)                                                     Add minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMinute()                                                                    Add one minute to the instance (using timestamp).
 * @method        CarbonInterface  subRealMinutes(int $value = 1)                                                     Sub minutes (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMinute()                                                                    Sub one minute to the instance (using timestamp).
 * @method        CarbonPeriod     minutesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
 * @method        CarbonInterface  addRealHours(int $value = 1)                                                       Add hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealHour()                                                                      Add one hour to the instance (using timestamp).
 * @method        CarbonInterface  subRealHours(int $value = 1)                                                       Sub hours (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealHour()                                                                      Sub one hour to the instance (using timestamp).
 * @method        CarbonPeriod     hoursUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
 * @method        CarbonInterface  addRealDays(int $value = 1)                                                        Add days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealDay()                                                                       Add one day to the instance (using timestamp).
 * @method        CarbonInterface  subRealDays(int $value = 1)                                                        Sub days (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealDay()                                                                       Sub one day to the instance (using timestamp).
 * @method        CarbonPeriod     daysUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
 * @method        CarbonInterface  addRealWeeks(int $value = 1)                                                       Add weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealWeek()                                                                      Add one week to the instance (using timestamp).
 * @method        CarbonInterface  subRealWeeks(int $value = 1)                                                       Sub weeks (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealWeek()                                                                      Sub one week to the instance (using timestamp).
 * @method        CarbonPeriod     weeksUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
 * @method        CarbonInterface  addRealMonths(int $value = 1)                                                      Add months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMonth()                                                                     Add one month to the instance (using timestamp).
 * @method        CarbonInterface  subRealMonths(int $value = 1)                                                      Sub months (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMonth()                                                                     Sub one month to the instance (using timestamp).
 * @method        CarbonPeriod     monthsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
 * @method        CarbonInterface  addRealQuarters(int $value = 1)                                                    Add quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealQuarter()                                                                   Add one quarter to the instance (using timestamp).
 * @method        CarbonInterface  subRealQuarters(int $value = 1)                                                    Sub quarters (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealQuarter()                                                                   Sub one quarter to the instance (using timestamp).
 * @method        CarbonPeriod     quartersUntil($endDate = null, int $factor = 1)                                    Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
 * @method        CarbonInterface  addRealYears(int $value = 1)                                                       Add years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealYear()                                                                      Add one year to the instance (using timestamp).
 * @method        CarbonInterface  subRealYears(int $value = 1)                                                       Sub years (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealYear()                                                                      Sub one year to the instance (using timestamp).
 * @method        CarbonPeriod     yearsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
 * @method        CarbonInterface  addRealDecades(int $value = 1)                                                     Add decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealDecade()                                                                    Add one decade to the instance (using timestamp).
 * @method        CarbonInterface  subRealDecades(int $value = 1)                                                     Sub decades (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealDecade()                                                                    Sub one decade to the instance (using timestamp).
 * @method        CarbonPeriod     decadesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
 * @method        CarbonInterface  addRealCenturies(int $value = 1)                                                   Add centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealCentury()                                                                   Add one century to the instance (using timestamp).
 * @method        CarbonInterface  subRealCenturies(int $value = 1)                                                   Sub centuries (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealCentury()                                                                   Sub one century to the instance (using timestamp).
 * @method        CarbonPeriod     centuriesUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
 * @method        CarbonInterface  addRealMillennia(int $value = 1)                                                   Add millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  addRealMillennium()                                                                Add one millennium to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillennia(int $value = 1)                                                   Sub millennia (the $value count passed in) to the instance (using timestamp).
 * @method        CarbonInterface  subRealMillennium()                                                                Sub one millennium to the instance (using timestamp).
 * @method        CarbonPeriod     millenniaUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
 * @method        CarbonInterface  roundYear(float $precision = 1, string $function = "round")                        Round the current instance year with given precision using the given function.
 * @method        CarbonInterface  roundYears(float $precision = 1, string $function = "round")                       Round the current instance year with given precision using the given function.
 * @method        CarbonInterface  floorYear(float $precision = 1)                                                    Truncate the current instance year with given precision.
 * @method        CarbonInterface  floorYears(float $precision = 1)                                                   Truncate the current instance year with given precision.
 * @method        CarbonInterface  ceilYear(float $precision = 1)                                                     Ceil the current instance year with given precision.
 * @method        CarbonInterface  ceilYears(float $precision = 1)                                                    Ceil the current instance year with given precision.
 * @method        CarbonInterface  roundMonth(float $precision = 1, string $function = "round")                       Round the current instance month with given precision using the given function.
 * @method        CarbonInterface  roundMonths(float $precision = 1, string $function = "round")                      Round the current instance month with given precision using the given function.
 * @method        CarbonInterface  floorMonth(float $precision = 1)                                                   Truncate the current instance month with given precision.
 * @method        CarbonInterface  floorMonths(float $precision = 1)                                                  Truncate the current instance month with given precision.
 * @method        CarbonInterface  ceilMonth(float $precision = 1)                                                    Ceil the current instance month with given precision.
 * @method        CarbonInterface  ceilMonths(float $precision = 1)                                                   Ceil the current instance month with given precision.
 * @method        CarbonInterface  roundDay(float $precision = 1, string $function = "round")                         Round the current instance day with given precision using the given function.
 * @method        CarbonInterface  roundDays(float $precision = 1, string $function = "round")                        Round the current instance day with given precision using the given function.
 * @method        CarbonInterface  floorDay(float $precision = 1)                                                     Truncate the current instance day with given precision.
 * @method        CarbonInterface  floorDays(float $precision = 1)                                                    Truncate the current instance day with given precision.
 * @method        CarbonInterface  ceilDay(float $precision = 1)                                                      Ceil the current instance day with given precision.
 * @method        CarbonInterface  ceilDays(float $precision = 1)                                                     Ceil the current instance day with given precision.
 * @method        CarbonInterface  roundHour(float $precision = 1, string $function = "round")                        Round the current instance hour with given precision using the given function.
 * @method        CarbonInterface  roundHours(float $precision = 1, string $function = "round")                       Round the current instance hour with given precision using the given function.
 * @method        CarbonInterface  floorHour(float $precision = 1)                                                    Truncate the current instance hour with given precision.
 * @method        CarbonInterface  floorHours(float $precision = 1)                                                   Truncate the current instance hour with given precision.
 * @method        CarbonInterface  ceilHour(float $precision = 1)                                                     Ceil the current instance hour with given precision.
 * @method        CarbonInterface  ceilHours(float $precision = 1)                                                    Ceil the current instance hour with given precision.
 * @method        CarbonInterface  roundMinute(float $precision = 1, string $function = "round")                      Round the current instance minute with given precision using the given function.
 * @method        CarbonInterface  roundMinutes(float $precision = 1, string $function = "round")                     Round the current instance minute with given precision using the given function.
 * @method        CarbonInterface  floorMinute(float $precision = 1)                                                  Truncate the current instance minute with given precision.
 * @method        CarbonInterface  floorMinutes(float $precision = 1)                                                 Truncate the current instance minute with given precision.
 * @method        CarbonInterface  ceilMinute(float $precision = 1)                                                   Ceil the current instance minute with given precision.
 * @method        CarbonInterface  ceilMinutes(float $precision = 1)                                                  Ceil the current instance minute with given precision.
 * @method        CarbonInterface  roundSecond(float $precision = 1, string $function = "round")                      Round the current instance second with given precision using the given function.
 * @method        CarbonInterface  roundSeconds(float $precision = 1, string $function = "round")                     Round the current instance second with given precision using the given function.
 * @method        CarbonInterface  floorSecond(float $precision = 1)                                                  Truncate the current instance second with given precision.
 * @method        CarbonInterface  floorSeconds(float $precision = 1)                                                 Truncate the current instance second with given precision.
 * @method        CarbonInterface  ceilSecond(float $precision = 1)                                                   Ceil the current instance second with given precision.
 * @method        CarbonInterface  ceilSeconds(float $precision = 1)                                                  Ceil the current instance second with given precision.
 * @method        CarbonInterface  roundMillennium(float $precision = 1, string $function = "round")                  Round the current instance millennium with given precision using the given function.
 * @method        CarbonInterface  roundMillennia(float $precision = 1, string $function = "round")                   Round the current instance millennium with given precision using the given function.
 * @method        CarbonInterface  floorMillennium(float $precision = 1)                                              Truncate the current instance millennium with given precision.
 * @method        CarbonInterface  floorMillennia(float $precision = 1)                                               Truncate the current instance millennium with given precision.
 * @method        CarbonInterface  ceilMillennium(float $precision = 1)                                               Ceil the current instance millennium with given precision.
 * @method        CarbonInterface  ceilMillennia(float $precision = 1)                                                Ceil the current instance millennium with given precision.
 * @method        CarbonInterface  roundCentury(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
 * @method        CarbonInterface  roundCenturies(float $precision = 1, string $function = "round")                   Round the current instance century with given precision using the given function.
 * @method        CarbonInterface  floorCentury(float $precision = 1)                                                 Truncate the current instance century with given precision.
 * @method        CarbonInterface  floorCenturies(float $precision = 1)                                               Truncate the current instance century with given precision.
 * @method        CarbonInterface  ceilCentury(float $precision = 1)                                                  Ceil the current instance century with given precision.
 * @method        CarbonInterface  ceilCenturies(float $precision = 1)                                                Ceil the current instance century with given precision.
 * @method        CarbonInterface  roundDecade(float $precision = 1, string $function = "round")                      Round the current instance decade with given precision using the given function.
 * @method        CarbonInterface  roundDecades(float $precision = 1, string $function = "round")                     Round the current instance decade with given precision using the given function.
 * @method        CarbonInterface  floorDecade(float $precision = 1)                                                  Truncate the current instance decade with given precision.
 * @method        CarbonInterface  floorDecades(float $precision = 1)                                                 Truncate the current instance decade with given precision.
 * @method        CarbonInterface  ceilDecade(float $precision = 1)                                                   Ceil the current instance decade with given precision.
 * @method        CarbonInterface  ceilDecades(float $precision = 1)                                                  Ceil the current instance decade with given precision.
 * @method        CarbonInterface  roundQuarter(float $precision = 1, string $function = "round")                     Round the current instance quarter with given precision using the given function.
 * @method        CarbonInterface  roundQuarters(float $precision = 1, string $function = "round")                    Round the current instance quarter with given precision using the given function.
 * @method        CarbonInterface  floorQuarter(float $precision = 1)                                                 Truncate the current instance quarter with given precision.
 * @method        CarbonInterface  floorQuarters(float $precision = 1)                                                Truncate the current instance quarter with given precision.
 * @method        CarbonInterface  ceilQuarter(float $precision = 1)                                                  Ceil the current instance quarter with given precision.
 * @method        CarbonInterface  ceilQuarters(float $precision = 1)                                                 Ceil the current instance quarter with given precision.
 * @method        CarbonInterface  roundMillisecond(float $precision = 1, string $function = "round")                 Round the current instance millisecond with given precision using the given function.
 * @method        CarbonInterface  roundMilliseconds(float $precision = 1, string $function = "round")                Round the current instance millisecond with given precision using the given function.
 * @method        CarbonInterface  floorMillisecond(float $precision = 1)                                             Truncate the current instance millisecond with given precision.
 * @method        CarbonInterface  floorMilliseconds(float $precision = 1)                                            Truncate the current instance millisecond with given precision.
 * @method        CarbonInterface  ceilMillisecond(float $precision = 1)                                              Ceil the current instance millisecond with given precision.
 * @method        CarbonInterface  ceilMilliseconds(float $precision = 1)                                             Ceil the current instance millisecond with given precision.
 * @method        CarbonInterface  roundMicrosecond(float $precision = 1, string $function = "round")                 Round the current instance microsecond with given precision using the given function.
 * @method        CarbonInterface  roundMicroseconds(float $precision = 1, string $function = "round")                Round the current instance microsecond with given precision using the given function.
 * @method        CarbonInterface  floorMicrosecond(float $precision = 1)                                             Truncate the current instance microsecond with given precision.
 * @method        CarbonInterface  floorMicroseconds(float $precision = 1)                                            Truncate the current instance microsecond with given precision.
 * @method        CarbonInterface  ceilMicrosecond(float $precision = 1)                                              Ceil the current instance microsecond with given precision.
 * @method        CarbonInterface  ceilMicroseconds(float $precision = 1)                                             Ceil the current instance microsecond with given precision.
 * @method        string           shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, \'Absolute\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, \'Relative\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, \'RelativeToNow\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1) Get the difference (short format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 * @method        string           longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)  Get the difference (long format, \'RelativeToOther\' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
 *
 * </autodoc>
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3ba530c586733ceef4f40cbe8c32e61' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7f08bae58383c847fbb2b32a183d6f58' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Boundaries.
 *
 * startOf, endOf and derived method for each unit.
 *
 * Depends on the following properties:
 *
 * @property int $year
 * @property int $month
 * @property int $daysInMonth
 * @property int $quarter
 *
 * Depends on the following methods:
 *
 * @method $this setTime(int $hour, int $minute, int $second = 0, int $microseconds = 0)
 * @method $this setDate(int $year, int $month, int $day)
 * @method $this addMonths(int $value = 1)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3ac2c165775ca6d3e79866acb80f671e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the time to 00:00:00 start of day
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfDay();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dfe7e7ff89ef54831a3e661d7c1c7400' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the time to 23:59:59.999999 end of day
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfDay();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f5429b22e37d634079ab4927dbb5cbd7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the month and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMonth();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '21d143e6695c4d0ef1bfed7e0aba7258' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the month and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMonth();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '259a01c4d1e860821c5114998d8b321a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the quarter and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfQuarter();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '54ddec3d65ceb25461d835087de0673e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the quarter and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfQuarter();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2d9a100e6b69e71cb4a40609fea943c1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the year and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfYear();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '80a4e52f57aa2c95d1cb66789296e954' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the year and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfYear();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '817b05b4377dae38b481661da5fc71db' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the decade and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfDecade();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfDecade',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '39fe265beeb5cdf735bd47bd938b2dbd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the decade and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfDecade();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfDecade',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f31940de8fbb6ecf74a03b97a34c5832' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the century and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfCentury();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfCentury',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '36319b6e0a22d038ca49ec00bbbd948b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the century and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfCentury();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfCentury',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4002798441f6613225af5d737326274d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of the millennium and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMillennium();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfMillennium',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '30b7e9250430ed2ecd10321a6510c60a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of the millennium and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMillennium();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfMillennium',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4bb98e5625e04528a3fb95b5353ff91b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to the first day of week (defined in $weekStartsAt) and the time to 00:00:00
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->locale(\'ar\')->startOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfWeek(Carbon::SUNDAY) . "\\n";
     * ```
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '60cc99ce720f7b99d5accd55bf6c9a22' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the date to end of week (defined in $weekEndsAt) and time to 23:59:59.999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->locale(\'ar\')->endOfWeek() . "\\n";
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfWeek(Carbon::SATURDAY) . "\\n";
     * ```
     *
     * @param int $weekEndsAt optional start allow you to specify the day of week to use to end the week
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5862a0aeb427590c4290a0e591a1e402' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current hour, minutes and seconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfHour();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfHour',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec5a36fe4f1aa016b6084de1c381d089' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current hour, minutes and seconds become 59
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfHour();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfHour',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2686e5eace5306320ccc1645d5ecc708' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current minute, seconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->startOfMinute();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfMinute',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f278faecd9698d4c04b886a807e582c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current minute, seconds become 59
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16\')->endOfMinute();
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfMinute',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9ebeec1d9ebacd3cdcf94caa6a0c6a74' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current second, microseconds become 0
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOfSecond()
     *   ->format(\'H:i:s.u\');
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOfSecond',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '513a91e8e059761d68e572926605d390' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current second, microseconds become 999999
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->endOfSecond()
     *   ->format(\'H:i:s.u\');
     * ```
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOfSecond',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '639b71a2dd32d1e7473e6e4d922b80c3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to start of current given unit.
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOf(\'month\')
     *   ->endOf(\'week\', Carbon::FRIDAY);
     * ```
     *
     * @param string            $unit
     * @param array<int, mixed> $params
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'startOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2ae48e81e51aa2a94b0908d84e454cf3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to end of current given unit.
     *
     * @example
     * ```
     * echo Carbon::parse(\'2018-07-25 12:45:16.334455\')
     *   ->startOf(\'month\')
     *   ->endOf(\'week\', Carbon::FRIDAY);
     * ```
     *
     * @param string            $unit
     * @param array<int, mixed> $params
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'endOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f92b96505293844b0d94a2f5eb50e0dc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9502c74c9ede34e921e9ff089ee7ea45' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Comparison.
 *
 * Comparison utils and testers. All the following methods return booleans.
 * nowWithSameTz
 *
 * Depends on the following methods:
 *
 * @method static        resolveCarbon($date)
 * @method static        copy()
 * @method static        nowWithSameTz()
 * @method static static yesterday($timezone = null)
 * @method static static tomorrow($timezone = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1b45d989b4f79ee99aa0a3c8b5a26bd1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(Carbon::parse(\'2018-07-25 12:45:16\')); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->eq(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see equalTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'eq',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cac048a8a0c5776111c9c5c1d148d1f3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(Carbon::parse(\'2018-07-25 12:45:16\')); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->equalTo(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'equalTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd8041f13d3f0f22f6d2375cf4c2daa28' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is not equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(Carbon::parse(\'2018-07-25 12:45:16\')); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->ne(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see notEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'ne',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0d27968d2df78bac7647a57db32f4561' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is not equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(Carbon::parse(\'2018-07-25 12:45:16\')); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->notEqualTo(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'notEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd7ddcd4ce9002669295926b4da175779' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->gt(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'gt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '98549c94d5c4b785bb483cea7a77706e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThan(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'greaterThan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5cddcb317cae556ecf752d49fbc5593c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isAfter(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isAfter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '42e633c056457a4f8755bce00fa5f371' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->gte(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see greaterThanOrEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'gte',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3bb4008df2520ba598906e8a62c3b84d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is greater (after) than or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:15\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->greaterThanOrEqualTo(\'2018-07-25 12:45:17\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'greaterThanOrEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e4cfc214ffc583159be756994d54471f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lt(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'lt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a39b27e0b0786ec5ca7b6eba580be0a4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThan(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'lessThan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'adb0f736723821e2e8dffd8e6ead75f0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) than another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:16\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->isBefore(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThan()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isBefore',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9bf2d5efdf1cce872a8e3f056560377d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->lte(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see lessThanOrEqualTo()
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'lte',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e55b7e3206e1674c265409c004df4538' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is less (before) or equal to another
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:15\'); // false
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:16\'); // true
     * Carbon::parse(\'2018-07-25 12:45:16\')->lessThanOrEqualTo(\'2018-07-25 12:45:17\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'lessThanOrEqualTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '311fea44629e851f498556bb7e088c02' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others.
     *
     * The third argument allow you to specify if bounds are included or not (true by default)
     * but for when you including/excluding bounds may produce different results in your application,
     * we recommend to use the explicit methods ->betweenIncluded() or ->betweenExcluded() instead.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->between(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-25\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->between(\'2018-07-25\', \'2018-08-01\', false); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     * @param bool                                    $equal Indicates if an equal to comparison should be done
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'between',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7c693b4cb808ce6115932491a0a9205a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others, bounds included.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->betweenIncluded(\'2018-07-25\', \'2018-08-01\'); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'betweenIncluded',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ce5a7b55b9940f9a3a9480c157806fe8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others, bounds excluded.
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->betweenExcluded(\'2018-07-25\', \'2018-08-01\'); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'betweenExcluded',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9a972958163608b3ea87b6fd872c929e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is between two others
     *
     * @example
     * ```
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-14\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-08-01\', \'2018-08-20\'); // false
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-25\', \'2018-08-01\'); // true
     * Carbon::parse(\'2018-07-25\')->isBetween(\'2018-07-25\', \'2018-08-01\', false); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     * @param bool                                    $equal Indicates if an equal to comparison should be done
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isBetween',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '56d2fbb397214a5479ae1156e93a26d1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a weekday.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-14\')->isWeekday(); // false
     * Carbon::parse(\'2019-07-15\')->isWeekday(); // true
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fca5333280db600f0e1ec2b18b0958d5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a weekend day.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-14\')->isWeekend(); // true
     * Carbon::parse(\'2019-07-15\')->isWeekend(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isWeekend',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '344ebf3188a8a09d7f9539365432f5f3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is yesterday.
     *
     * @example
     * ```
     * Carbon::yesterday()->isYesterday(); // true
     * Carbon::tomorrow()->isYesterday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isYesterday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '51568da31e57099154a312070afd2dbc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is today.
     *
     * @example
     * ```
     * Carbon::today()->isToday(); // true
     * Carbon::tomorrow()->isToday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isToday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a0e7107928617a1a41447ade2908f585' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is tomorrow.
     *
     * @example
     * ```
     * Carbon::tomorrow()->isTomorrow(); // true
     * Carbon::yesterday()->isTomorrow(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isTomorrow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c09606e5ee290a26bc4f4f9c70357b82' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the future, ie. greater (after) than now.
     *
     * @example
     * ```
     * Carbon::now()->addHours(5)->isFuture(); // true
     * Carbon::now()->subHours(5)->isFuture(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isFuture',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd35fab48381392e69e0de37b219b94f2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the past, ie. less (before) than now.
     *
     * @example
     * ```
     * Carbon::now()->subHours(5)->isPast(); // true
     * Carbon::now()->addHours(5)->isPast(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isPast',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '00c693042203e8f4e9a19c0515d9b22d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a leap year.
     *
     * @example
     * ```
     * Carbon::parse(\'2020-01-01\')->isLeapYear(); // true
     * Carbon::parse(\'2019-01-01\')->isLeapYear(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isLeapYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a1de89b48e4ad686cbe1a30d1c36747c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is a long year
     *
     * @example
     * ```
     * Carbon::parse(\'2015-01-01\')->isLongYear(); // true
     * Carbon::parse(\'2016-01-01\')->isLongYear(); // false
     * ```
     *
     * @see https://en.wikipedia.org/wiki/ISO_8601#Week_dates
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isLongYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '869f886ac605cb8863b98ca0ad24219c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Compares the formatted values of the two dates.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-06-13\')->isSameAs(\'Y-d\', Carbon::parse(\'2019-12-13\')); // true
     * Carbon::parse(\'2019-06-13\')->isSameAs(\'Y-d\', Carbon::parse(\'2019-06-14\')); // false
     * ```
     *
     * @param string                                        $format date formats to compare.
     * @param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date   instance to compare with or null to use current day.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isSameAs',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '48598ce04f40e78a72680b355c552af2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the current unit given.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-13\')->isSameUnit(\'year\', Carbon::parse(\'2019-12-25\')); // true
     * Carbon::parse(\'2018-12-13\')->isSameUnit(\'year\', Carbon::parse(\'2019-12-25\')); // false
     * ```
     *
     * @param string                                 $unit singular unit string
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date instance to compare with or null to use current day.
     *
     * @throws BadComparisonUnitException
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isSameUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '04c9014293763082bf1df9ac3936b96b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determines if the instance is in the current unit given.
     *
     * @example
     * ```
     * Carbon::now()->isCurrentUnit(\'hour\'); // true
     * Carbon::now()->subHours(2)->isCurrentUnit(\'hour\'); // false
     * ```
     *
     * @param string $unit The unit to test.
     *
     * @throws BadMethodCallException
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isCurrentUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8aabdc0cf0c3c91b5dd42277323cd887' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the passed in date is in the same quarter as the instance quarter (and year if needed).
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2019-03-01\')); // true
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2019-04-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2018-03-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameQuarter(Carbon::parse(\'2018-03-01\'), false); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date       The instance to compare with or null to use current day.
     * @param bool                                          $ofSameYear Check if it is the same month in the same year.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isSameQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '42a86b494e357fcdb54da14f5f27b832' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the passed in date is in the same month as the instance´s month.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2019-01-01\')); // true
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2019-02-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2018-01-01\')); // false
     * Carbon::parse(\'2019-01-12\')->isSameMonth(Carbon::parse(\'2018-01-01\'), false); // true
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date       The instance to compare with or null to use the current date.
     * @param bool                                   $ofSameYear Check if it is the same month in the same year.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isSameMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ba5b99d227d974a2e4bf29e510c2c379' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if this day is a specific day of the week.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(Carbon::WEDNESDAY); // true
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(Carbon::FRIDAY); // false
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(\'Wednesday\'); // true
     * Carbon::parse(\'2019-07-17\')->isDayOfWeek(\'Friday\'); // false
     * ```
     *
     * @param int $dayOfWeek
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isDayOfWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '65d138d236f55723e1a6376d034c088d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if its the birthday. Compares the date/month values of the two dates.
     *
     * @example
     * ```
     * Carbon::now()->subYears(5)->isBirthday(); // true
     * Carbon::now()->subYears(5)->subDay()->isBirthday(); // false
     * Carbon::parse(\'2019-06-05\')->isBirthday(Carbon::parse(\'2001-06-05\')); // true
     * Carbon::parse(\'2019-06-05\')->isBirthday(Carbon::parse(\'2001-06-06\')); // false
     * ```
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date The instance to compare with or null to use current day.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isBirthday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f84604b4b1f718a5a5e63339ff4e933' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if today is the last day of the Month
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28\')->isLastOfMonth(); // true
     * Carbon::parse(\'2019-03-28\')->isLastOfMonth(); // false
     * Carbon::parse(\'2019-03-30\')->isLastOfMonth(); // false
     * Carbon::parse(\'2019-03-31\')->isLastOfMonth(); // true
     * Carbon::parse(\'2019-04-30\')->isLastOfMonth(); // true
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isLastOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9635a46bce6c39a924e235b42f3bcb19' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is start of day / midnight.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 00:00:00\')->isStartOfDay(); // true
     * Carbon::parse(\'2019-02-28 00:00:00.999999\')->isStartOfDay(); // true
     * Carbon::parse(\'2019-02-28 00:00:01\')->isStartOfDay(); // false
     * Carbon::parse(\'2019-02-28 00:00:00.000000\')->isStartOfDay(true); // true
     * Carbon::parse(\'2019-02-28 00:00:00.000012\')->isStartOfDay(true); // false
     * ```
     *
     * @param bool $checkMicroseconds check time at microseconds precision
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isStartOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6ab1582afcf4e91d573626f403dc8b29' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is end of day.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 23:59:59.999999\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:59.123456\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:59\')->isEndOfDay(); // true
     * Carbon::parse(\'2019-02-28 23:59:58.999999\')->isEndOfDay(); // false
     * Carbon::parse(\'2019-02-28 23:59:59.999999\')->isEndOfDay(true); // true
     * Carbon::parse(\'2019-02-28 23:59:59.123456\')->isEndOfDay(true); // false
     * Carbon::parse(\'2019-02-28 23:59:59\')->isEndOfDay(true); // false
     * ```
     *
     * @param bool $checkMicroseconds check time at microseconds precision
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isEndOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '95dd2f5dec982bb50dfde280d39a8673' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is start of day / midnight.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 00:00:00\')->isMidnight(); // true
     * Carbon::parse(\'2019-02-28 00:00:00.999999\')->isMidnight(); // true
     * Carbon::parse(\'2019-02-28 00:00:01\')->isMidnight(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isMidnight',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '50f78ebcaea559b7221f614558001ce2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if the instance is midday.
     *
     * @example
     * ```
     * Carbon::parse(\'2019-02-28 11:59:59.999999\')->isMidday(); // false
     * Carbon::parse(\'2019-02-28 12:00:00\')->isMidday(); // true
     * Carbon::parse(\'2019-02-28 12:00:00.999999\')->isMidday(); // true
     * Carbon::parse(\'2019-02-28 12:00:01\')->isMidday(); // false
     * ```
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isMidday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6f320f1ba5a9dc0ceaeb7985db2cc295' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format.
     *
     * @example
     * ```
     * Carbon::hasFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::hasFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'hasFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4f4dd6a279b491ad98b00aac34eec452' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format.
     *
     * @example
     * ```
     * Carbon::hasFormatWithModifiers(\'31/08/2015\', \'d#m#Y\'); // true
     * Carbon::hasFormatWithModifiers(\'31/08/2015\', \'m#d#Y\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'hasFormatWithModifiers',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2e09fb0b744c8a38965de3d4916ca892' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format and valid to create a
     * new instance.
     *
     * @example
     * ```
     * Carbon::canBeCreatedFromFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::canBeCreatedFromFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'canBeCreatedFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '11bf3ccda39f700ee7e24c6f73cd6a04' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current date matches the given string.
     *
     * @example
     * ```
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2018\')); // false
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019-06\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'06-02\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'2019-06-02\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'Sunday\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'June\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23:45\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12:23:00\')); // false
     * var_dump(Carbon::parse(\'2019-06-02 12:23:45\')->is(\'12h\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 15:23:45\')->is(\'3pm\')); // true
     * var_dump(Carbon::parse(\'2019-06-02 15:23:45\')->is(\'3am\')); // false
     * ```
     *
     * @param string $tester day name, month name, hour, date, etc. as string
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'is',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '64d2e643fe10ec488ffc684b106f92de' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if the (date)time string is in a given format with
     * given list of pattern replacements.
     *
     * @example
     * ```
     * Carbon::hasFormat(\'11:12:45\', \'h:i:s\'); // true
     * Carbon::hasFormat(\'13:12:45\', \'h:i:s\'); // false
     * ```
     *
     * @param string $date
     * @param string $format
     * @param array  $replacements
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'invalidargumentexception' => 'InvalidArgumentException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'matchFormatPattern',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec43533315550edec63fb8e7aac91e0d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1ca26f6a044590463a4243c784747703' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Converter.
 *
 * Change date into different string formats and types and
 * handle the string cast.
 *
 * Depends on the following methods:
 *
 * @method static copy()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b8151669349481504faebac5d7c0a934' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use for __toString method when type juggling occurs.
     *
     * @var string|Closure|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '059636f15d4d02cf955bdaf1bd796c16' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Reset the format used to the default when type juggling a Carbon instance to a string
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'resetToStringFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8f4a44ece4b08db72e9acfb7e53f55d0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather let Carbon object being casted to string with DEFAULT_TO_STRING_FORMAT, and
     *             use other method or custom format passed to format() method if you need to dump an other string
     *             format.
     *
     * Set the default format used when type juggling a Carbon instance to a string
     *
     * @param string|Closure|null $format
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setToStringFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '118e22e46dd4ad61be4a431cfd8a8aeb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the formatted date string on success or FALSE on failure.
     *
     * @see https://php.net/manual/en/datetime.format.php
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'format',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '178c2282b6d484d7202ef8ebad285951' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @see https://php.net/manual/en/datetime.format.php
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'rawFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '43996a587cafbbe4070132452c038a99' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as a string using the set format
     *
     * @example
     * ```
     * echo Carbon::now(); // Carbon instances can be casted to string
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__toString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '53c85475db7ae1ef49752cbede3b8fdd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date
     *
     * @example
     * ```
     * echo Carbon::now()->toDateString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toDateString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3a44c00f3d311d52c0daf6fb1e85708f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as a readable date
     *
     * @example
     * ```
     * echo Carbon::now()->toFormattedDateString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toFormattedDateString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4b7f8e5e9bd0ffbccf6bbeed8608fec6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as time
     *
     * @example
     * ```
     * echo Carbon::now()->toTimeString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '29be5e4e90caa31b1965c24ad552f7c0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date and time
     *
     * @example
     * ```
     * echo Carbon::now()->toDateTimeString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toDateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f77741fc283d883426d2d0a55dfd4ffa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a format from H:i to H:i:s.u according to given unit precision.
     *
     * @param string $unitPrecision "minute", "second", "millisecond" or "microsecond"
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTimeFormatByPrecision',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fb9a3c6f4e1eaf66efe56ccae9679c26' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as date and time T-separated with no timezone
     *
     * @example
     * ```
     * echo Carbon::now()->toDateTimeLocalString();
     * echo "\\n";
     * echo Carbon::now()->toDateTimeLocalString(\'minute\'); // You can specify precision among: minute, second, millisecond and microsecond
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toDateTimeLocalString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '65525ab6987f511c470d477671c811fa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance with day, date and time
     *
     * @example
     * ```
     * echo Carbon::now()->toDayDateTimeString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toDayDateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2d8076e66fd264d02a51b696d32153c1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as ATOM
     *
     * @example
     * ```
     * echo Carbon::now()->toAtomString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toAtomString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c125df8cc20c62c733070fc890076be2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as COOKIE
     *
     * @example
     * ```
     * echo Carbon::now()->toCookieString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toCookieString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2e1907155068f71c8539531dc9373d99' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as ISO8601
     *
     * @example
     * ```
     * echo Carbon::now()->toIso8601String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toIso8601String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cee2cd9097a51f65a2773d687ce037c0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC822
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc822String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toRfc822String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1e51cb5d508abd5d607ee67ef97e3d50' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Convert the instance to UTC and return as Zulu ISO8601
     *
     * @example
     * ```
     * echo Carbon::now()->toIso8601ZuluString();
     * ```
     *
     * @param string $unitPrecision
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toIso8601ZuluString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9a24508eeb951f2e51a20b1d75cba8c3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC850
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc850String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toRfc850String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '90117791c0f2add79e14a3d647d63ba2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC1036
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc1036String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toRfc1036String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cc07f1545b8a11cead29913b6abbd4a7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC1123
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc1123String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toRfc1123String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a0842219b2e5d0963f6371d5bf49525f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC2822
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc2822String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toRfc2822String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b7a88802015a879b3b3638f3dad954f7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC3339
     *
     * @param bool $extended
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc3339String() . "\\n";
     * echo Carbon::now()->toRfc3339String(true) . "\\n";
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toRfc3339String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b2eedaafa53aadb3e5a64a02a05091ef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RSS
     *
     * @example
     * ```
     * echo Carbon::now()->toRssString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toRssString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0af90f90d27ae25c06776d1f3f7ce925' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as W3C
     *
     * @example
     * ```
     * echo Carbon::now()->toW3cString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toW3cString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7dec866b304efeda32b3d4593ec6c1a8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance as RFC7231
     *
     * @example
     * ```
     * echo Carbon::now()->toRfc7231String();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toRfc7231String',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c1c8faf1acc8a905d6032a4bfafd0bbe' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get default array representation.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toArray());
     * ```
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toArray',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7e086ca36f813bea2cf44a0ccf1dc5df' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get default object representation.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toObject());
     * ```
     *
     * @return object
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toObject',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2390820ae4f5bdbe35c8c3844bc10917' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns english human readable complete date string.
     *
     * @example
     * ```
     * echo Carbon::now()->toString();
     * ```
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd2ec2d8fa81d52a937c2e83cfc538377' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z, if $keepOffset truthy, offset will be kept:
     * 1977-04-22T01:00:00-05:00).
     *
     * @example
     * ```
     * echo Carbon::now(\'America/Toronto\')->toISOString() . "\\n";
     * echo Carbon::now(\'America/Toronto\')->toISOString(true) . "\\n";
     * ```
     *
     * @param bool $keepOffset Pass true to keep the date offset. Else forced to UTC.
     *
     * @return null|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toISOString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7e6076be8015a1f010f92b422e862e04' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z) with UTC timezone.
     *
     * @example
     * ```
     * echo Carbon::now(\'America/Toronto\')->toJSON();
     * ```
     *
     * @return null|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toJSON',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '324315416b790f6f2c1efe32e308b1f1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return native DateTime PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDateTime());
     * ```
     *
     * @return DateTime
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e90a5a9d9f271a1b3b12550460d9f235' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return native toDateTimeImmutable PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDateTimeImmutable());
     * ```
     *
     * @return DateTimeImmutable
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toDateTimeImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ecd82df610986b7448b52a84424b362b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias toDateTime
     *
     * Return native DateTime PHP object matching the current instance.
     *
     * @example
     * ```
     * var_dump(Carbon::now()->toDate());
     * ```
     *
     * @return DateTime
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5a24f7161204bc254c3e879d8151e6e2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
     *
     * @param \\DateTimeInterface|Carbon|CarbonImmutable|int|null $end      period end date or recurrences count if int
     * @param int|\\DateInterval|string|null                      $interval period default interval or number of the given $unit
     * @param string|null                                        $unit     if specified, $interval must be an integer
     *
     * @return CarbonPeriod
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toPeriod',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2dff360f11d4c83ea87c2bc423b7ce80' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
     *
     * @param \\DateTimeInterface|Carbon|CarbonImmutable|null $end      period end date
     * @param int|\\DateInterval|string|null                  $interval period default interval or number of the given $unit
     * @param string|null                                    $unit     if specified, $interval must be an integer
     *
     * @return CarbonPeriod
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'datetime' => 'DateTime',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'range',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8125c1e512510656b9e850a95c8ba138' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '625699456a4be84740838a7b236d755f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Creator.
 *
 * Static creators.
 *
 * Depends on the following methods:
 *
 * @method static Carbon|CarbonImmutable getTestNow()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cae2125d1c72774b639115425d119390' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b37fff96e61cc0384bf7d2dcce9c69f0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * True when parent::__construct has been called.
     *
     * @var string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5b5a9bec02b85502286260525fc603cd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The errors that can occur.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f3f99b7a852bcc6ce93814cd1c0cfee9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new Carbon instance.
     *
     * Please see the testing aids section (specifically static::setTestNow())
     * for more on the possibility of this constructor returning a test instance.
     *
     * @param string|null              $time
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__construct',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c45008e7a423373b816019e60ab8c523' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get timezone from a datetime instance.
     *
     * @param DateTimeInterface        $date
     * @param DateTimeZone|string|null $tz
     *
     * @return DateTimeInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'constructTimezoneFromDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '59664573263f499bd93cdf9334fa89ef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Update constructedObjectId on cloned.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__clone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e24ed77a83e04ea0dd4f6d999b7d9cc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a DateTime one.
     *
     * @param DateTimeInterface $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'instance',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '72dfc2615687f535ec52523af58f8802' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a string.
     *
     * This is an alias for the constructor that allows better fluent syntax
     * as it allows you to do Carbon::parse(\'Monday next week\')->fn() rather
     * than (new Carbon(\'Monday next week\'))->fn().
     *
     * @param string|DateTimeInterface|null $time
     * @param DateTimeZone|string|null      $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'rawParse',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b57ab04889928ae96d29dbcd685b4941' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a string.
     *
     * This is an alias for the constructor that allows better fluent syntax
     * as it allows you to do Carbon::parse(\'Monday next week\')->fn() rather
     * than (new Carbon(\'Monday next week\'))->fn().
     *
     * @param string|DateTimeInterface|null $time
     * @param DateTimeZone|string|null      $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'parse',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4f134d58b149f91aead8e8403d975561' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.).
     *
     * @param string                   $time   date/time string in the given language (may also contain English).
     * @param string|null              $locale if locale is null or not specified, current global locale will be
     *                                         used instead.
     * @param DateTimeZone|string|null $tz     optional timezone for the new instance.
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'parseFromLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dccc9d81f64e6031869214a12814116a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a Carbon instance for the current date and time.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'now',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1a41a3c550ed75fed4c1351c9950ea94' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for today.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'today',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2def10da7e802ceb7eb0a6e3d3b27980' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for tomorrow.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'tomorrow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec7a08e1ab961788c812faed0343a783' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for yesterday.
     *
     * @param DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'yesterday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fc5d9ec4fae957b82ff0cee12917f5fb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for the greatest supported date.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'maxValue',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9c6dcb822af6ada9380876df62a4522d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance for the lowest supported date.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'minValue',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'afb1b91dfa60abe63d7aacc7a4f71a79' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new Carbon instance from a specific date and time.
     *
     * If any of $year, $month or $day are set to null their now() values will
     * be used.
     *
     * If $hour is null it will be set to its now() value and the default
     * values for $minute and $second will be their now() values.
     *
     * If $hour is not null then the default values for $minute and $second
     * will be 0.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'create',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '30c6b7de8d74e03b3c8909122533750f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a new safe Carbon instance from a specific date and time.
     *
     * If any of $year, $month or $day are set to null their now() values will
     * be used.
     *
     * If $hour is null it will be set to its now() value and the default
     * values for $minute and $second will be their now() values.
     *
     * If $hour is not null then the default values for $minute and $second
     * will be 0.
     *
     * If one of the set values is not valid, an InvalidDateException
     * will be thrown.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidDateException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createSafe',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e43d7b3fec608fad84f3382e9e231ecc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a date. The time portion is set to now.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1937f99572bdde936ba450c679cad24e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a date. The time portion is set to midnight.
     *
     * @param int|null                 $year
     * @param int|null                 $month
     * @param int|null                 $day
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createMidnightDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '29a18ffa01ad5e60fb20a37a6e0b50d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from just a time. The date portion is set to today.
     *
     * @param int|null                 $hour
     * @param int|null                 $minute
     * @param int|null                 $second
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2cc911195a0678bba602fda1f1c710c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a time string. The date portion is set to today.
     *
     * @param string                   $time
     * @param DateTimeZone|string|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b6994ccf6d542d7bb35575764b3b5cca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param string                         $format     Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $originalTz
     *
     * @return DateTimeInterface|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromFormatAndTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c00753613a8ea2df07fa579d37331e54' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format.
     *
     * @param string                         $format Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'rawCreateFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2958e762fe70bb69ea433270138e5f75' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\Carbon\\CarbonImmutable|\\Carbon\\Carbon|null $mock */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'rawCreateFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5bc3c2a570f17525828505cf10d49c41' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format.
     *
     * @param string                         $format Datetime format
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c5ae82d4b25501e85928a4070356aaf9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific ISO format (same replacements as ->isoFormat()).
     *
     * @param string                                             $format     Datetime format
     * @param string                                             $time
     * @param DateTimeZone|string|false|null                     $tz         optional timezone
     * @param string|null                                        $locale     locale to be used for LTS, LT, LL, LLL, etc. macro-formats (en by fault, unneeded if no such macro-format in use)
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator optional custom translator to use for macro-formats
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromIsoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '37b97cf1287cbadc136fb91757967822' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific format and a string in a given language.
     *
     * @param string                         $format Datetime format
     * @param string                         $locale
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromLocaleFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b1e0d3be2e233267a107f788726b70b8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a specific ISO format and a string in a given language.
     *
     * @param string                         $format Datetime ISO format
     * @param string                         $locale
     * @param string                         $time
     * @param DateTimeZone|string|false|null $tz
     *
     * @throws InvalidFormatException
     *
     * @return static|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromLocaleIsoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8e7215968b3d6bdbb6988c191e954cf0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Make a Carbon instance from given variable if possible.
     *
     * Always return a new instance. Parse only strings and only these likely to be dates (skip intervals
     * and recurrences). Throw an exception for invalid format, but otherwise return null.
     *
     * @param mixed $var
     *
     * @throws InvalidFormatException
     *
     * @return static|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'make',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6a6e451727bb400da95e8ec80027fba7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set last errors.
     *
     * @param array $lastErrors
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setLastErrors',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c27dc18f0fce445ac6b92324d299f6b3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * {@inheritdoc}
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invaliddateexception' => 'Carbon\\Exceptions\\InvalidDateException',
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
          'outofrangeexception' => 'Carbon\\Exceptions\\OutOfRangeException',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'exception' => 'Exception',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getLastErrors',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd0d9be1de8e0a36cfa7b53143fdb493a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '85d11157ac773ab97ca2fb27209c4f4f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Difference.
 *
 * Depends on the following methods:
 *
 * @method bool lessThan($date)
 * @method static copy()
 * @method static resolveCarbon($date = null)
 * @method static Translator translator()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4fef390c0d9037b4f76a52d897b47d74' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @codeCoverageIgnore
     *
     * @param CarbonInterval $diff
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'fixNegativeMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8eef905be968e40f7fe84275ca04bc0a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param DateInterval $diff
     * @param bool         $absolute
     *
     * @return CarbonInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'fixDiffInterval',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd1c7fa388b11bc464f408bdbab2178ec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference as a DateInterval instance.
     * Return relative interval (negative if
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return DateInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diff',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f016f3e9af14b887e0d036727e346f83' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference as a CarbonInterval instance.
     * Return absolute interval (always positive) unless you pass false to the second argument.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return CarbonInterval
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffAsCarbonInterval',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9712eafc4c7f36ba7fa8ea101f5a3738' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in years
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5f8667d4d2a7bdbbac0b2a4f54665885' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in quarters rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInQuarters',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '77955c835ad156f16aa8ff3c4c34ae9d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6c23100ce50e0052cbf98ae5bd91b900' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '219da6dceea7ddbc0bf027552f779199' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1ea1205e9a5e22d4b28e099bdaa38bda' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days using a filter closure rounded down.
     *
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInDaysFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '67ef854f2a56354db44d74b838d406da' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours using a filter closure rounded down.
     *
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInHoursFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3e159b6a2c1d0af27e40aed40e7076a9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference by the given interval using a filter closure.
     *
     * @param CarbonInterval                                         $ci       An interval to traverse by
     * @param Closure                                                $callback
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffFiltered',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7b2972233e4864f440c3386617eac28c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weekdays rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInWeekdays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e05aa1a67a06fed762c5a7b32b73ade6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weekend days using a filter rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f57d462f150c829fd23798728898381a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae48de3816647efd9654c277d8a83d58' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInRealHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '28092f9a5421ab47941a54bbb8e1a8ce' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1dcb4a5f5e75e6c519e49540e00ee754' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInRealMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8482ce79b3e83b84492deb1426c82919' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0315ae8e89e09a1bd0146235da9c7b3a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in microseconds.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7267e4c44f572120af90362bc8061c9f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in milliseconds rounded down.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInMilliseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9a4286bc4800c4798e053c1b5fa90250' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8077dfceb532f5bb94b98847c016b444' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3a93748c2980abef89f263d0463d216f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in microseconds using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInRealMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6f3bc4707814329759b45b12c48fd68c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInRealMicroseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '097a258d67ec747a74eb5b228b8b27d7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in milliseconds rounded down using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffInRealMilliseconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f3a02f6e7e436227eaba09ac0d4de5aa' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '053c68b4dc40ecd7aa29f6e4e64ba964' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd52d19e2d9451732e97acc67d8c556cc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '41e40cd0c314fa3e977e9f840acff6f2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a52a5f0712893c792bb05edb8bb2bce2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae5553237f8d14d1de2aebcee81e7642' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7c3961dd4cf344e16a00ff1b9da65609' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe87f6f771ca895d6f0e21c4638d2d8d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfMonthAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1de9d6523d116deee264ce1a5951afe2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in year as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5b7c0b9de07f6cc699e811627318d68e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ae6f3148b728b3db90a5dcb957b2d141' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfYearAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9e0b89ce55fa33f3ab814a7d343a6473' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in seconds as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealSeconds',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1befc583146e5c46cb1a8fbca88d6383' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in minutes as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealMinutes',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '41c8760c0b6640a7d4b6e1ede2454f89' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in hours as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealHours',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b88ae03c852c20cf52a17f1f846c966d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in days as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a4ba2855f0f3679689bfbb135e62b191' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in weeks as float (microsecond-precision).
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealWeeks',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e83dea9ee551b11f3894b4a380fd95e1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in months as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e1e414d7a9e66f82b2e1859338853749' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ebca44a851349ddcc8c3d5515fcffc4e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfMonthAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cbcc195ba1f8a70ba536d2395cebb2ba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in year as float (microsecond-precision) using timestamps.
     *
     * @param \\Carbon\\CarbonInterface|\\DateTimeInterface|string|null $date
     * @param bool                                                   $absolute Get the absolute of the difference
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '64f6bd466b317022585b8d51b2df0e6b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $floorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aad201f6a076aa9ea8db80a185dd1f47' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon|CarbonImmutable $startOfYearAfterFloorEnd */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floatDiffInRealYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '39b41713068dbbcffec3cef57154e11f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The number of seconds since midnight.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'secondsSinceMidnight',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8ea54a89e6f0e85216fa081cd83ab612' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The number of seconds until 23:59:59.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'secondsUntilEndOfDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2474d3bc9a216991e0c9d351d0b28e54' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @example
     * ```
     * echo Carbon::tomorrow()->diffForHumans() . "\\n";
     * echo Carbon::tomorrow()->diffForHumans([\'parts\' => 2]) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans([\'parts\' => 3, \'join\' => true]) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday()) . "\\n";
     * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday(), [\'short\' => true]) . "\\n";
     * ```
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'diffForHumans',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1731c43f276311f396179207785e2187' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias diffForHumans
     *
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'from',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a4a1f2ab468dd26aaa9025b23b85707d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias diffForHumans
     *
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'since',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '693169eaa5915b23dbe2f72e3a34246d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given (or now if null given) to current instance.
     *
     * When comparing a value in the past to default now:
     * 1 hour from now
     * 5 months from now
     *
     * When comparing a value in the future to default now:
     * 1 hour ago
     * 5 months ago
     *
     * When comparing a value in the past to another value:
     * 1 hour after
     * 5 months after
     *
     * When comparing a value in the future to another value:
     * 1 hour before
     * 5 months before
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'to',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e22d604076739bd6cded94517c9e5c2e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias to
     *
     * Get the difference in a human readable format in the current locale from an other
     * instance given (or now if null given) to current instance.
     *
     * @param Carbon|\\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
     *                                                             if null passed, now will be used as comparison reference;
     *                                                             if any other type, it will be converted to date and used as reference.
     * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                                                             - \'syntax\' entry (see below)
     *                                                             - \'short\' entry (see below)
     *                                                             - \'parts\' entry (see below)
     *                                                             - \'options\' entry (see below)
     *                                                             - \'join\' entry determines how to join multiple parts of the string
     *                                                             `  - if $join is a string, it\'s used as a joiner glue
     *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
     *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
     *                                                             `    will be used instead of the glue for the last item
     *                                                             `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                                                             `  - if $join is missing, a space will be used as glue
     *                                                             - \'other\' entry (see above)
     *                                                             if int passed, it add modifiers:
     *                                                             Possible values:
     *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool                                        $short   displays short format of time units
     * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int                                         $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'until',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '85333759643bf65246f627e2b94f725f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current
     * instance to now.
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single unit)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'fromNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0b8134ff84093240e36087627b6e058d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given to now
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single part)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4bb3d5490c78756c29439fc0c939baef' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from an other
     * instance given to now
     *
     * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
     *                           - \'syntax\' entry (see below)
     *                           - \'short\' entry (see below)
     *                           - \'parts\' entry (see below)
     *                           - \'options\' entry (see below)
     *                           - \'join\' entry determines how to join multiple parts of the string
     *                           `  - if $join is a string, it\'s used as a joiner glue
     *                           `  - if $join is a callable/closure, it get the list of string and should return a string
     *                           `  - if $join is an array, the first item will be the default glue, and the second item
     *                           `    will be used instead of the glue for the last item
     *                           `  - if $join is true, it will be guessed from the locale (\'list\' translation file entry)
     *                           `  - if $join is missing, a space will be used as glue
     *                           if int passed, it add modifiers:
     *                           Possible values:
     *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
     *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
     *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
     *                           Default value: CarbonInterface::DIFF_ABSOLUTE
     * @param bool      $short   displays short format of time units
     * @param int       $parts   maximum number of parts to display (default value: 1: single part)
     * @param int       $options human diff options
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'ago',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5870ffccd270958beaf5daa0ed091ec9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the difference in a human readable format in the current locale from current instance to an other
     * instance given (or now if null given).
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'timespan',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0a54846aa9e3eaff288d2e49fc0540ed' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns either the close date "Friday 15h30", or a calendar date "10/09/2017" is farthest than 7 days from now.
     *
     * @param Carbon|\\DateTimeInterface|string|null $referenceTime
     * @param array                                 $formats
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3c114ed1e7800895a5f1f8ebe5a64a82' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $current */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c191c7be9746348c1e3a96ae3c8a1f5c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $other */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'calendar',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e4cc7ff83f5c251f9c6bff5c83031009' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0911b6617a4167cc6636b01a1611f37d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Macros.
 *
 * Allows users to register macros within the Carbon class.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4d9b99aa5b92d9b1463d9f6ecc861d32' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7e90cf85959975b45ae9bac73ef2f159' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Mixin.
 *
 * Allows mixing in entire classes with multiple macros.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1f70c61c15bd229fa669e34f23a06bd0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Stack of macro instance contexts.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c2a1f2ee7a4d1b41e1793f0e781ea44d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Mix another object into the class.
     *
     * @example
     * ```
     * Carbon::mixin(new class {
     *   public function addMoon() {
     *     return function () {
     *       return $this->addDays(30);
     *     };
     *   }
     *   public function subMoon() {
     *     return function () {
     *       return $this->subDays(30);
     *     };
     *   }
     * });
     * $fullMoon = Carbon::create(\'2018-12-22\');
     * $nextFullMoon = $fullMoon->addMoon();
     * $blackMoon = Carbon::create(\'2019-01-06\');
     * $previousBlackMoon = $blackMoon->subMoon();
     * echo "$nextFullMoon\\n";
     * echo "$previousBlackMoon\\n";
     * ```
     *
     * @param object|string $mixin
     *
     * @throws ReflectionException
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'mixin',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'df1591b6808b63eeb7481414555b6ad4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param object|string $mixin
     *
     * @throws ReflectionException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'loadMixinClass',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd5524a7e254eb3c6d088462782c11d58' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @param string $trait
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'loadMixinTrait',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3b0d4798c56fd33e533acb1338359c55' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @phpstan-ignore-next-line */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'loadMixinTrait',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '59e43771edfb8dfe96b5b0d1494debe9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Stack a Carbon context from inside calls of self::this() and execute a given action.
     *
     * @param static|null $context
     * @param callable    $callable
     *
     * @throws Throwable
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'bindMacroContext',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b18f2737f70d00a5f635a5425aa3cd20' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the current context from inside a macro callee or a null if static.
     *
     * @return static|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'context',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '780b949ad6e5219296ae32a0dfbf360f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the current context from inside a macro callee or a new one if static.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'generator' => 'Generator',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'this',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd19703b0874dec11cd391cfb29a1466d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The registered macros.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cf966ba5bdf0b4c430eb7ae824020cb3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The registered generic macros.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c14c6ce0f5e5b3e444c92e58f2f96d8c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Register a custom macro.
     *
     * @example
     * ```
     * $userSettings = [
     *   \'locale\' => \'pt\',
     *   \'timezone\' => \'America/Sao_Paulo\',
     * ];
     * Carbon::macro(\'userFormat\', function () use ($userSettings) {
     *   return $this->copy()->locale($userSettings[\'locale\'])->tz($userSettings[\'timezone\'])->calendar();
     * });
     * echo Carbon::yesterday()->hours(11)->userFormat();
     * ```
     *
     * @param string          $name
     * @param object|callable $macro
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'macro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1936894b010d05dbf4c8913a1b08a34c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Remove all macros and generic macros.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'resetMacros',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '020d2398c94385016bf38698d9e05225' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Register a custom macro.
     *
     * @param object|callable $macro
     * @param int             $priority marco with higher priority is tried first
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'genericMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c7b75ab62a5a9ca3e817e6ffd50f6868' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if macro is registered globally.
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'hasMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3d925b8ba7b57a77d0681d3a51fe8a27' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the raw callable macro registered globally for a given name.
     *
     * @param string $name
     *
     * @return callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '95a68c244a90f7c21dc41651f4f987b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Checks if macro is registered globally or locally.
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'hasLocalMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cc252ecb7f2be4547cc07780780fb90a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the raw callable macro registered globally or locally for a given name.
     *
     * @param string $name
     *
     * @return callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getLocalMacro',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a935f03f386066ca0294ed7274f95cd6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '812df531ce7366690604c79d334a52d2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Modifiers.
 *
 * Returns dates relative to current date using modifier short-hand.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '75398b21c7c7f2e3b4ffc41f89aebef8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Midday/noon hour.
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd070f0d7477b8d368bcf6d434d62a600' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * get midday/noon hour
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getMidDayAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0dd205cfe8eda2fe7e1e30adbb071490' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather consider mid-day is always 12pm, then if you need to test if it\'s an other
     *             hour, test it explicitly:
     *                 $date->format(\'G\') == 13
     *             or to set explicitly to a given hour:
     *                 $date->setTime(13, 0, 0, 0)
     *
     * Set midday/noon hour
     *
     * @param int $hour midday hour
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setMidDayAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e83a52a38006a15565205762422eda81' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to midday, default to self::$midDayAt
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'midDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3bd8f5071b001e4d9f4c282e1a671b0a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the next occurrence of a given modifier such as a day of
     * the week. If no modifier is provided, modify to the next occurrence
     * of the current day of the week. Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param string|int|null $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'next',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7bfa9c6cb47fbd2fe7f31cc97506f985' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward or backward to the next week- or weekend-day.
     *
     * @param bool $weekday
     * @param bool $forward
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'nextOrPreviousDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1805356f0ae3ed9f3936ef8de2a8d1db' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'nextOrPreviousDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8109efba162caf69e51bc359859f4f45' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward to the next weekday.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'nextWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7abdd839efd23bf4f0d526a9b7c2c0c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go backward to the previous weekday.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'previousWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '090cca3a3ef2ba118bcd17e1f9c3f4ee' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go forward to the next weekend day.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'nextWeekendDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f855bf1cacd22234c0029a0a0540e4a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Go backward to the previous weekend day.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'previousWeekendDay',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b4eb7f43abacf0015b579887dd7351fc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the previous occurrence of a given modifier such as a day of
     * the week. If no dayOfWeek is provided, modify to the previous occurrence
     * of the current day of the week. Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param string|int|null $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'previous',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aa3a7bde1416b09cae40f66db0a6b11f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current month. If no dayOfWeek is provided, modify to the
     * first day of the current month.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'firstOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7e56a76d86bb4535b8e381227163b07e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current month. If no dayOfWeek is provided, modify to the
     * last day of the current month.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'lastOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ff6a5f0bb7a7dc1f3d0d7f33b6b0937f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current month. If the calculated occurrence is outside the scope
     * of the current month, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'nthOfMonth',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '96a5886ad02d32d406ff58d5596adec6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current quarter. If no dayOfWeek is provided, modify to the
     * first day of the current quarter.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'firstOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4d183116cf58bfc61a33755285a5ad6e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current quarter. If no dayOfWeek is provided, modify to the
     * last day of the current quarter.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'lastOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec6feed0a4d30e5c09020d9de55a644d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current quarter. If the calculated occurrence is outside the scope
     * of the current quarter, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'nthOfQuarter',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '561b8ff767531b7bd2eb13d5b6d333b0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the first occurrence of a given day of the week
     * in the current year. If no dayOfWeek is provided, modify to the
     * first day of the current year.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'firstOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '343b532183dabb942e3dbf86b75195e6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the last occurrence of a given day of the week
     * in the current year. If no dayOfWeek is provided, modify to the
     * last day of the current year.  Use the supplied constants
     * to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int|null $dayOfWeek day of the week default null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'lastOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '749b98c9664a83d8d10c57b0598fea56' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify to the given occurrence of a given day of the week
     * in the current year. If the calculated occurrence is outside the scope
     * of the current year, then return false and no modifications are made.
     * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
     *
     * @param int $nth
     * @param int $dayOfWeek
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'nthOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '77e6817b6bfad885e07e51cd8b79c235' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Modify the current instance to the average of a given instance (default now) and the current instance
     * (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'average',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5790c90fa0b1557718e4b709e75ec755' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the closest date from the instance (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'closest',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd18936137f5b4ce64fbeaa20046d1bac' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the farthest date from the instance (second-precision).
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date1
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date2
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'farthest',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3c0365967de51804857ec04e1d7fc505' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the minimum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'min',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a60ead9953bfdefa84fe2931d1bc9c36' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the minimum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see min()
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'minimum',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a1c604962832884fa2b7eab0752b52d2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the maximum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'max',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd79c361dbc8b1d205d2d0b7a8d7b87cc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the maximum instance between a given instance (default now) and the current instance.
     *
     * @param \\Carbon\\Carbon|\\DateTimeInterface|mixed $date
     *
     * @see max()
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'maximum',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b6ef2a7bf129a4f3bc966dfaa8174bf6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Calls \\DateTime::modify if mutable or \\DateTimeImmutable::modify else.
     *
     * @see https://php.net/manual/en/datetime.modify.php
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'modify',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f8d4c8cb4eee1d88e3453535075ae50f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Similar to native modify() method of DateTime but can handle more grammars.
     *
     * @example
     * ```
     * echo Carbon::now()->change(\'next 2pm\');
     * ```
     *
     * @link https://php.net/manual/en/datetime.modify.php
     *
     * @param string $modifier
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'change',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '783dee9ba502615f057f5e298b110504' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b0cdf2d99ee4ca472c6d53ae8ea2d10f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Mutability.
 *
 * Utils to know if the current object is mutable or immutable and convert it.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '73a5233ac6c1ae1be3ee6617939509a3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Cast.
 *
 * Utils to cast into an other class.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidcastexception' => 'Carbon\\Exceptions\\InvalidCastException',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '03afb66106545e9c17a5c4d6572759a1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Cast the current instance into the given class.
     *
     * @param string $className The $className::instance() method will be called to cast the current object.
     *
     * @return DateTimeInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidcastexception' => 'Carbon\\Exceptions\\InvalidCastException',
          'datetimeinterface' => 'DateTimeInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'cast',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8aecc5bafa765e3fc4e49f143ec2a3dc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is mutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4f59289e041fee395a7d3c08ec3b46ae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the current class/instance is immutable.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0844a6a548d98630bdddcd1cde835156' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a mutable copy of the instance.
     *
     * @return Carbon
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '39e665cf0cf3f0081799af85eb4cd9e6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var Carbon $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toMutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '839d0956b1b964748619720668f01729' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a immutable copy of the instance.
     *
     * @return CarbonImmutable
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0a92e1741bbd0f82cc2a07002c41552f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonImmutable $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbon' => 'Carbon\\Carbon',
          'carbonimmutable' => 'Carbon\\CarbonImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'toImmutable',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ed538da0fba7ce42fc6801fd77a338d9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2d5bf442a1dc3e015ac8a4b6da8e710a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Options.
 *
 * Embed base methods to change settings of Carbon classes.
 *
 * Depends on the following methods:
 *
 * @method \\Carbon\\Carbon|\\Carbon\\CarbonImmutable shiftTimezone($timezone) Set the timezone
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e2e4e8f40d2501df11421e724aaa7ba9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd5408fdd351b947bc6ec44c2f86cdcf4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Localization.
 *
 * Embed default and locale translators and translation base methods.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8e86bf8704ad13e8a4014cc073b244d3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Default translator.
     *
     * @var \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '73da88a0903b0b0f2884ecb936d5dec0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Specific translator of the current instance.
     *
     * @var \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3da20a21a65e134bed6da1aabe1e0a35' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Options for diffForHumans().
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe7c8f2f61bcac36e1490fcd19da5ebd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOptions
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setHumanDiffOptions',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0321a33da5da3d17a0f7d23e02b09261' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOption
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'enableHumanDiffOption',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b159c12a31a9852341f364080d956ed5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * @param int $humanDiffOption
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'disableHumanDiffOption',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dd6f205ec0f5c1899fdcb1c8bb94955a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return default humanDiff() options (merged flags as integer).
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getHumanDiffOptions',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a2df5f9c182691cbe6918730f77f7bb6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the default translator instance in use.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b25261525cc91276a518c489c0bead29' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the default translator instance to use.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a03fb2974cfcc9b6b7d3aa84909161e7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return true if the current instance has its own translator.
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'hasLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec762bbc94f3d3494ce8c0d91add6b33' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translator of the current instance or the default if none set.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f50bcee2367080d134052a46ab9dc5a1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the translator for the current instance.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return $this
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setLocalTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd4bca925eafbd910d171e72771631b37' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns raw translation message for a given key.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator the translator to use
     * @param string                                             $key        key to find
     * @param string|null                                        $locale     current locale used if null
     * @param string|null                                        $default    default value if translation returns the key
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslationMessageWith',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3436f4baf0e4a212f3f918f04abdc515' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns raw translation message for a given key.
     *
     * @param string                                             $key        key to find
     * @param string|null                                        $locale     current locale used if null
     * @param string|null                                        $default    default value if translation returns the key
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator an optional translator to use
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslationMessage',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7cf4621aa625cc24f32c602af40aaee6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate using translation string or callback available.
     *
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     * @param string                                             $key
     * @param array                                              $parameters
     * @param null                                               $number
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'translateWith',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3a57fbf374b358acea5a9e170e20776' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate using translation string or callback available.
     *
     * @param string                                             $key
     * @param array                                              $parameters
     * @param null                                               $number
     * @param \\Symfony\\Component\\Translation\\TranslatorInterface $translator
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'translate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '215b663a7d852ac5fbfb95e104cb634a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the alternative number for a given integer if available in the current locale.
     *
     * @param int $number
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'translateNumber',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '56c8dfa7958d7e07778294c6232da03e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a time string from a locale to an other.
     *
     * @param string      $timeString date/time/duration string to translate (may also contain English)
     * @param string|null $from       input locale of the $timeString parameter (`Carbon::getLocale()` by default)
     * @param string|null $to         output locale of the result returned (`"en"` by default)
     * @param int         $mode       specify what to translate with options:
     *                                - CarbonInterface::TRANSLATE_ALL (default)
     *                                - CarbonInterface::TRANSLATE_MONTHS
     *                                - CarbonInterface::TRANSLATE_DAYS
     *                                - CarbonInterface::TRANSLATE_UNITS
     *                                - CarbonInterface::TRANSLATE_MERIDIEM
     *                                You can use pipe to group: CarbonInterface::TRANSLATE_MONTHS | CarbonInterface::TRANSLATE_DAYS
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'translateTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd8f1620609f6516071735d5c1b3c88b8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a time string from the current locale (`$date->locale()`) to an other.
     *
     * @param string      $timeString time string to translate
     * @param string|null $to         output locale of the result returned ("en" by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'translateTimeStringTo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f37dfd4d8652c5d8e8e96520d715e7f2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the locale for the current instance.
     *
     * @param string|null $locale
     * @param string      ...$fallbackLocales
     *
     * @return $this|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'locale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eaf67eaf7d21d466b5fdd3c1dd2675c1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the current translator locale.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '253564436a9f5d951e0646b26b61135f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the current translator locale and indicate if the source locale file exists.
     * Pass \'auto\' as locale to use closest language from the current LC_TIME locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2c2770096a280cea61ae07363791679a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the fallback locale.
     *
     * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
     *
     * @param string $locale
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setFallbackLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '862c86d7a3e6b429cea8772d56f98523' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the fallback locale.
     *
     * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
     *
     * @return string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getFallbackLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '21b2f296c7ad6386e5ce1287dffca32f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the current locale to the given, execute the passed function, reset the locale to previous one,
     * then return the result of the closure (or null if the closure was void).
     *
     * @param string   $locale locale ex. en
     * @param callable $func
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'executeWithLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2acc94f6de85cc865a44e9f260f65d7f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has short-units support.
     * Support is considered enabled if either year, day or hour has a short variant translated.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'localeHasShortUnits',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '827a03987c4e500fa3fc45d5fd54fb66' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after).
     * Support is considered enabled if the 4 sentences are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'localeHasDiffSyntax',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2b0629bb384d8ed25fc386a0b0ee8631' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow).
     * Support is considered enabled if the 3 words are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'localeHasDiffOneDayWords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b7635a8957eb2fd4ce2f0c59710686f0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow).
     * Support is considered enabled if the 2 words are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'localeHasDiffTwoDayWords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7d5561998e36464c778c1f8448b6065b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X).
     * Support is considered enabled if the 4 sentences are translated in the given locale.
     *
     * @param string $locale locale ex. en
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'localeHasPeriodSyntax',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2cc47e773168d518143151e0a0e26be9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the list of internally available locales and already loaded custom locales.
     * (It will ignore custom translator dynamic loading.)
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getAvailableLocales',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ff52ffd3b4162bf431a1cfbb9d3870cc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of Language object for each available locale. This object allow you to get the ISO name, native
     * name, region and variant of the locale.
     *
     * @return Language[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getAvailableLocalesInfo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '621f4c35a7ca7c63845a47fb0ce737b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Initialize the default translator instance if necessary.
     *
     * @return \\Symfony\\Component\\Translation\\TranslatorInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'translator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ec754dd073ce41f6281f8905960fff55' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the locale of a given translator.
     *
     * If null or omitted, current local translator is used.
     * If no local translator is in use, current global translator is used.
     *
     * @param null $translator
     *
     * @return string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslatorLocale',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd8958344fbe6afae727eb606b199cfea' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Throw an error if passed object is not LocaleAwareInterface.
     *
     * @param LocaleAwareInterface|null $translator
     *
     * @return LocaleAwareInterface|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getLocaleAwareTranslator',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dba383a4cba569b7f07b94db005ae6e1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the word cleaned from its translation codes.
     *
     * @param string $word
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'cleanWordFromTranslationString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9e03b8de4e35744f2210baebee189d68' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Translate a list of words.
     *
     * @param string[] $keys     keys to translate.
     * @param string[] $messages messages bag handling translations.
     * @param string   $key      \'to\' (to get the translation) or \'from\' (to get the detection RegExp pattern).
     *
     * @return string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'translateWordsByKeys',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f5a429c6477e3c6cfb728686405f0d31' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get an array of translations based on the current date.
     *
     * @param callable $translation
     * @param int      $length
     * @param string   $timeString
     *
     * @return string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'notlocaleawareexception' => 'Carbon\\Exceptions\\NotLocaleAwareException',
          'language' => 'Carbon\\Language',
          'translator' => 'Carbon\\Translator',
          'closure' => 'Closure',
          'translatorbaginterface' => 'Symfony\\Component\\Translation\\TranslatorBagInterface',
          'translatorinterface' => 'Symfony\\Component\\Translation\\TranslatorInterface',
          'localeawareinterface' => 'Symfony\\Contracts\\Translation\\LocaleAwareInterface',
          'contractstranslatorinterface' => 'Symfony\\Contracts\\Translation\\TranslatorInterface',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslationArray',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4173da7995933f3b7cae7dca223f3b96' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Customizable PHP_INT_SIZE override.
     *
     * @var int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9fc433d35261b05cf43bab26db469063' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * First day of week.
     *
     * @var int|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0ee00002bf9e5dfc9b5d02f4ccb5c980' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Last day of week.
     *
     * @var int|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '90d329d941cde6786199c707f2897c0b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Days of weekend.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd86ef468c670542bf7059894d93d3fac' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format regex patterns.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0e1615f8655649b3943b1626d78638cb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format modifiers (such as available in createFromFormat) regex patterns.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '818024ff77a05e667911549b3bf2f274' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if months should be calculated with overflow.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'cd60ba9434551d283c4b57756f9dafe2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if years should be calculated with overflow.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '393ffd73185cee29c2c0b3f3848bc797' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if the strict mode is in use.
     * Global setting.
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe4c4388141893477d1e365f0d5bc0c7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of format.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '406d857cc7ed7889ce7d21a610a2e1e9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of createFromFormat.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9386f03b1634aa6877b926a8642d2548' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Function to call instead of parse.
     *
     * @var string|callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2f8ee5b75ab26ba60237a484a4a474ae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if months should be calculated with overflow.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b9715413063b7fa0eda385025a6defb2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if years should be calculated with overflow.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bee848cd70942ca69fbeab8c2f8f60bc' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Indicates if the strict mode is in use.
     * Specific setting.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0d0cc8f88b9a44ac21c6979fee0c95a4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Options for diffForHumans and forHumans methods.
     *
     * @var bool|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '82c1ace7eb35dd651a001c227e492d8d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use on string cast.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3f5a1e70f0034b30dafa5512a89673d1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format to use on JSON serialization.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e42b35d1997e61242ce98cabdff0cb07' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Instance-specific macros.
     *
     * @var array|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd841f43ecb954ddb4dd605b898a7c01e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Instance-specific generic macros.
     *
     * @var array|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a76c4ab36e233c4745b927678f591c3f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     * @see settings
     *
     * Enable the strict mode (or disable with passing false).
     *
     * @param bool $strictModeEnabled
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'useStrictMode',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ee703ccb9775336f263f5a93b4218cfe' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if the strict mode is globally in use, false else.
     * (It can be overridden in specific instances.)
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isStrictModeEnabled',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c9bf68f6269b032a7c1cde104641e89d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Indicates if months should be calculated with overflow.
     *
     * @param bool $monthsOverflow
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'useMonthsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f992ed4db514ca65d5e556ed4be4ef58' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Reset the month overflow behavior.
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'resetMonthsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '33cba9cbe413a72b0e24f8c2ad755f6e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the month overflow global behavior (can be overridden in specific instances).
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'shouldOverflowMonths',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b298199f18082de9bdcbb9cb34e372dd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Indicates if years should be calculated with overflow.
     *
     * @param bool $yearsOverflow
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'useYearsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c4e3f0840494d1bcc0895dca990f3e3e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use the ->settings() method.
     *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
     *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
     * @see settings
     *
     * Reset the month overflow behavior.
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'resetYearsOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b1a390fe43572817b5d8d78bfba3d78a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the month overflow global behavior (can be overridden in specific instances).
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'shouldOverflowYears',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '72670d8f62b366bd46d2b8fff7414649' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set specific options.
     *  - strictMode: true|false|null
     *  - monthOverflow: true|false|null
     *  - yearOverflow: true|false|null
     *  - humanDiffOptions: int|null
     *  - toStringFormat: string|Closure|null
     *  - toJsonFormat: string|Closure|null
     *  - locale: string|null
     *  - timezone: \\DateTimeZone|string|int|null
     *  - macros: array|null
     *  - genericMacros: array|null
     *
     * @param array $settings
     *
     * @return $this|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'settings',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'da290f73f9593269d4b421c90f842583' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns current local settings.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getSettings',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '94eecb1e1a22ce2cc4e340c0a7454766' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Show truthy properties on var_dump().
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'datetimeinterface' => 'DateTimeInterface',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__debugInfo',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a96b6243130473a1d0feb68d838e7e65' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f7a7e2114d0423d1e275ac3904190c20' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Rounding.
 *
 * Round, ceil, floor units.
 *
 * Depends on the following methods:
 *
 * @method static copy()
 * @method static startOfWeek(int $weekStartsAt = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'deef718013363a9cbcde0ba5c995b06c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ce13012a8372972260c4506bb406e0b9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait to call rounding methods to interval or the interval of a period.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterval' => 'Carbon\\CarbonInterval',
          'invalidintervalexception' => 'Carbon\\Exceptions\\InvalidIntervalException',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5293e223aff5f32f71001f2c88498f1a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance at the given unit with given precision if specified and the given function.
     *
     * @param string    $unit
     * @param float|int $precision
     * @param string    $function
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'roundUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '270c1637c9942e5f49bf59716cdb362d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var CarbonInterface $result */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'roundUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4ab8584fb6d2fa01b3773ce11fceb65e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Truncate the current instance at the given unit with given precision if specified.
     *
     * @param string    $unit
     * @param float|int $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floorUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9f3f70938e0e47d3925e6a3912d62302' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance at the given unit with given precision if specified.
     *
     * @param string    $unit
     * @param float|int $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'ceilUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7bf2a304ee1e2ff951586d811e26a3c5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     * @param string                              $function
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'round',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5cf6e9498957b1eaf4de43cb43ca40f6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floor',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '27ff0647acb875b6ec213bc395818e04' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance second with given precision if specified.
     *
     * @param float|int|string|\\DateInterval|null $precision
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'ceil',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f9ffb850c62c170aada832d718efa6bf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Round the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'roundWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b73aca4a16c23b5b96a0be8f1a82b91d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Truncate the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'floorWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e591b138268122a8ee333f2c9a2aa40e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Ceil the current instance week.
     *
     * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
     *
     * @return CarbonInterface
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carboninterface' => 'Carbon\\CarbonInterface',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'ceilWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a8c5192bfb93b93855652b1d4d99ef41' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'edc7ad238c80920273ff8608473206f5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Serialization.
 *
 * Serialization and JSON stuff.
 *
 * Depends on the following properties:
 *
 * @property int $year
 * @property int $month
 * @property int $daysInMonth
 * @property int $quarter
 *
 * Depends on the following methods:
 *
 * @method string|static locale(string $locale = null, string ...$fallbackLocales)
 * @method string        toJSON()
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '876bb4e31dfab0f571a468644c25a069' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The custom Carbon JSON serializer.
     *
     * @var callable|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '953ac7f5e2f2491bfb65b687919c9566' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of key to use for dump/serialization.
     *
     * @var string[]
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f3f7c93e660cef5efb8901701a3688bb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Locale to dump comes here before serialization.
     *
     * @var string|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3d3eeb4dc903d5ca89c4bbbd00dd5c55' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a serialized string of the instance.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'serialize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '921dc781d378e81014428f8c4196995e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create an instance from a serialized string.
     *
     * @param string $value
     *
     * @throws InvalidFormatException
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'fromSerialized',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9c897114ddfb86b23137313adc0cda9c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * The __set_state handler.
     *
     * @param string|array $dump
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__set_state',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4f4964747b4f081bab2f24dde02300c3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\DateTimeInterface $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__set_state',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1f51a90396a77972d52aa742cfeef14d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the list of properties to dump on serialize() called on.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__sleep',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '01a027af10ce2066eac8a02901d2bd7f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set locale if specified on unserialize() called.
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__wakeup',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c0912021b9f58c8fcc9fbbc81cb95af0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Prepare the object for JSON serialization.
     *
     * @return array|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'jsonSerialize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '23aeda4a22bddf7bba40b8132dcdde8f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather transform Carbon object before the serialization.
     *
     * JSON serialize all Carbon instances using the given callback.
     *
     * @param callable $callback
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'serializeUsing',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1c5b5284c418cfc23c9cc86c9bf0db4c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Cleanup properties attached to the public scope of DateTime when a dump of the date is requested.
     * foreach ($date as $_) {}
     * serializer($date)
     * var_export($date)
     * get_object_vars($date)
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'invalidformatexception' => 'Carbon\\Exceptions\\InvalidFormatException',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'cleanupDumpProperties',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fe6b9893304b5129938f15c1cbe1669d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'edde66ec066802ad2f2f8970eb6f54f0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * A test Carbon instance to be returned when now instances are created.
     *
     * @var static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '16fa3dac7ead0969dd88cec76b3074fb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a Carbon instance (real or mock) to be returned when a "now"
     * instance is created.  The provided instance will be returned
     * specifically under the following conditions:
     *   - A call to the static now() method, ex. Carbon::now()
     *   - When a null (or blank string) is passed to the constructor or parse(), ex. new Carbon(null)
     *   - When the string "now" is passed to the constructor or parse(), ex. new Carbon(\'now\')
     *   - When a string containing the desired time is passed to Carbon::parse().
     *
     * Note the timezone parameter was left out of the examples above and
     * has no affect as the mock value will be returned regardless of its value.
     *
     * To clear the test instance call this method using the default
     * parameter of null.
     *
     * /!\\ Use this method for unit tests only.
     *
     * @param Closure|static|string|false|null $testNow real or mock Carbon instance
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '43fd0079e9e32f408d6cec9de7540528' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Temporarily sets a static date to be used within the callback.
     * Using setTestNow to set the date, executing the callback, then
     * clearing the test instance.
     *
     * /!\\ Use this method for unit tests only.
     *
     * @param Closure|static|string|false|null $testNow real or mock Carbon instance
     * @param Closure|null $callback
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'withTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1dfe2545103c564741a10bc03a1ec410' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the Carbon instance (real or mock) to be returned when a "now"
     * instance is created.
     *
     * @return Closure|static the current instance used for testing
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f4f68caf6b0649f101273ef61e3508d5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determine if there is a valid test instance set. A valid test instance
     * is anything that is not null.
     *
     * @return bool true if there is a test instance, otherwise false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'hasTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7c5b2925fc4fa6f4fe3818cf5bd2e74e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the given timezone and set it to the test instance if not null.
     * If null, get the timezone from the test instance and return it.
     *
     * @param string|\\DateTimeZone    $tz
     * @param \\Carbon\\CarbonInterface $testInstance
     *
     * @return string|\\DateTimeZone
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'handleMockTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2a9b27b79d7653e6531fc112aad260ed' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the mocked date passed in setTestNow() and if it\'s a Closure, execute it.
     *
     * @param string|\\DateTimeZone $tz
     *
     * @return \\Carbon\\CarbonImmutable|\\Carbon\\Carbon|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getMockedTestNow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b2e0826a82c16c280c76ab92036ffe4e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var \\Carbon\\CarbonImmutable|\\Carbon\\Carbon $testInstance */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'closure' => 'Closure',
          'datetimeimmutable' => 'DateTimeImmutable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'mockConstructorParameters',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c094fdb0bcefc389ed50398d78d74f01' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '60397340d7756ef87d7dc8edaf070dba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Timestamp.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '27cd347103298cfa919c158d63cb5bc8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp and set the timezone (use default one if not specified).
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string          $timestamp
     * @param \\DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '78550b9d1159e9bd65d75e7b48720b07' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from an timestamp keeping the timezone to UTC.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $timestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromTimestampUTC',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8cda4a7d425cb18365dd99abcfd8fc44' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp in milliseconds.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $timestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromTimestampMsUTC',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5f80078549b0cb8d9b70940b2f01b8da' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Create a Carbon instance from a timestamp in milliseconds.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string          $timestamp
     * @param \\DateTimeZone|string|null $tz
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'createFromTimestampMs',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b28051d1440a3af83ad4e8f8cf617e3e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timestamp.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $unixTimestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'timestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'bf22c6ad5fd7ebe1158a671af2282aea' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a timestamp rounded with the given precision (6 by default).
     *
     * @example getPreciseTimestamp()   1532087464437474 (microsecond maximum precision)
     * @example getPreciseTimestamp(6)  1532087464437474
     * @example getPreciseTimestamp(5)  153208746443747  (1/100000 second precision)
     * @example getPreciseTimestamp(4)  15320874644375   (1/10000 second precision)
     * @example getPreciseTimestamp(3)  1532087464437    (millisecond precision)
     * @example getPreciseTimestamp(2)  153208746444     (1/100 second precision)
     * @example getPreciseTimestamp(1)  15320874644      (1/10 second precision)
     * @example getPreciseTimestamp(0)  1532087464       (second precision)
     * @example getPreciseTimestamp(-1) 153208746        (10 second precision)
     * @example getPreciseTimestamp(-2) 15320875         (100 second precision)
     *
     * @param int $precision
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getPreciseTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5abb38cc90e7be5de2f069ac8d3b9572' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the milliseconds timestamps used amongst other by Date javascript objects.
     *
     * @return float
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'valueOf',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd3e06039289bd4b35576508d20622f2d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias getTimestamp
     *
     * Returns the UNIX timestamp for the current date.
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'unix',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '217cfc8fe606c9842db8f090b44f676c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return an array with integer part digits and decimals digits split from one or more positive numbers
     * (such as timestamps) as string with the given number of decimals (6 by default).
     *
     * By splitting integer and decimal, this method obtain a better precision than
     * number_format when the input is a string.
     *
     * @param float|int|string $numbers  one or more numbers
     * @param int              $decimals number of decimals precision (6 by default)
     *
     * @return array 0-index is integer part, 1-index is decimal part digits
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getIntegerAndDecimalParts',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a3e26a5fa58e97917ef181b41a32dc17' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'faea19b664298e82d4c6089f4472fe08' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Units.
 *
 * Add, subtract and set units.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c4a05a7d1445ab2c93dbb154a67292ba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add seconds to the instance using timestamp. Positive $value travels
     * forward while negative $value travels into the past.
     *
     * @param string $unit
     * @param int    $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'addRealUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a6b2a00d6e9b1529f956b3cb40ed0b72' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns true if a property can be changed via setter.
     *
     * @param string $unit
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isModifiableUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2cd9bdfb3c2db28373aeb6b6903f6a78' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Call native PHP DateTime/DateTimeImmutable add() method.
     *
     * @param DateInterval $interval
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'rawAdd',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c7e6c6a5784d5dff5da31a84dfc41f81' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add given units or interval to the current instance.
     *
     * @example $date->add(\'hour\', 3)
     * @example $date->add(15, \'days\')
     * @example $date->add(CarbonInterval::days(4))
     *
     * @param string|DateInterval|Closure|CarbonConverterInterface $unit
     * @param int                                                  $value
     * @param bool|null                                            $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'add',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '547fdd96e8d5939c99dc3aaee48659b6' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add given units to the current instance.
     *
     * @param string    $unit
     * @param int       $value
     * @param bool|null $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'addUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'dd215b96ed293a9d7fe93d541fca5dcf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var static $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'addUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'ee51cd1cfbf2e82b3cc0848e414c5414' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units to the current instance.
     *
     * @param string    $unit
     * @param int       $value
     * @param bool|null $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'subUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e0a7b554f5b2739ad89dc11866d94add' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Call native PHP DateTime/DateTimeImmutable sub() method.
     *
     * @param DateInterval $interval
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'rawSub',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '60beacee3e50506be503ca028cbbc609' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units or interval to the current instance.
     *
     * @example $date->sub(\'hour\', 3)
     * @example $date->sub(15, \'days\')
     * @example $date->sub(CarbonInterval::days(4))
     *
     * @param string|DateInterval|Closure|CarbonConverterInterface $unit
     * @param int                                                  $value
     * @param bool|null                                            $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'sub',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '93817dc4c0811923a29a68dd2a0f68ec' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract given units or interval to the current instance.
     *
     * @see sub()
     *
     * @param string|DateInterval $unit
     * @param int                 $value
     * @param bool|null           $overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'carbonconverterinterface' => 'Carbon\\CarbonConverterInterface',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carboninterval' => 'Carbon\\CarbonInterval',
          'unitexception' => 'Carbon\\Exceptions\\UnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'subtract',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '93491daeef61525ec8addf8f0e554fa0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * This file is part of the Carbon package.
 *
 * (c) Brian Nesbitt <brian@nesbot.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '08661d6f7ec17eb7f59afbfb424dbdb1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Trait Week.
 *
 * week and ISO week number, year and count in year.
 *
 * Depends on the following properties:
 *
 * @property int $daysInYear
 * @property int $dayOfWeek
 * @property int $dayOfYear
 * @property int $year
 *
 * Depends on the following methods:
 *
 * @method static addWeeks(int $weeks = 1)
 * @method static copy()
 * @method static dayOfYear(int $dayOfYear)
 * @method string getTranslationMessage(string $key, string $locale = null, string $default = null, $translator = null)
 * @method static next(int|string $day = null)
 * @method static startOfWeek(int $day = 1)
 * @method static subWeeks(int $weeks = 1)
 * @method static year(int $year = null)
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '52cb1306eac5b31e7a25d2bfe6a77179' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set/get the week number of year using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isoWeekYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd291c321f4d72700ed10fc92027e6a4d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set/get the week number of year using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'weekYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1731f1232d8e88633e14587f17563d9f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the number of weeks of the current week-year using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isoWeeksInYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '87d49e025146fe49a9c93b11d51a8323' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the number of weeks of the current week-year using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
     * @param int|null $dayOfYear first day of year included in the week #1
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'weeksInYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'df7c0b2b5bf7ac85855d9398369f99ab' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the week number using given first day of week and first
     * day of year included in the first week. Or use US format if no settings
     * given (Sunday / Jan 6).
     *
     * @param int|null $week
     * @param int|null $dayOfWeek
     * @param int|null $dayOfYear
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'week',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c2c6e795b0f46849d4d1ccf59fb763a5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the week number using given first day of week and first
     * day of year included in the first week. Or use ISO format if no settings
     * given.
     *
     * @param int|null $week
     * @param int|null $dayOfWeek
     * @param int|null $dayOfYear
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isoWeek',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '25b7be9dec6262a702929e502c377444' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Names of days of the week.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '98c11d5e779347f6aafd24f56b6cf7a1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Will UTF8 encoding be used to print localized date/time ?
     *
     * @var bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c4731ef8a1398136689208bba52481b1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of unit and magic methods associated as doc-comments.
     *
     * @var array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'a132b06749e9d870fc7b41ea2dc081b3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Creates a DateTimeZone from a string, DateTimeZone or integer offset.
     *
     * @param DateTimeZone|string|int|null $object     original value to get CarbonTimeZone from it.
     * @param DateTimeZone|string|int|null $objectDump dump of the object for error messages.
     *
     * @throws InvalidTimeZoneException
     *
     * @return CarbonTimeZone|false
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'safeCreateDateTimeZone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '0c306787465af12397f4313ece64b566' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the TimeZone associated with the Carbon instance (as CarbonTimeZone).
     *
     * @return CarbonTimeZone
     *
     * @link http://php.net/manual/en/datetime.gettimezone.php
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '18da87c7117f8c8873ce3b85fbd53df8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of minimum and maximums for each unit.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getRangesByUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4cec66e277b9df9645fe9f488020b8ba' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a copy of the instance.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'copy',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2491a425ed9e6cb2b83fe4ec136120c1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias copy
     *
     * Get a copy of the instance.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'clone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd17b6b5aa2b676a99a963d4ebe5d30b9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a present instance in the same timezone.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'nowWithSameTz',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'd50ba52c4c987aa0df7dcdcd9be14603' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Throws an exception if the given object is not a DateTime and does not implement DateTimeInterface.
     *
     * @param mixed        $date
     * @param string|array $other
     *
     * @throws InvalidTypeException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'expectDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '392a91a0c021f35f59b64dbfe92c209c' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the Carbon instance passed through, a now instance in the same timezone
     * if null given or parse the input if string given.
     *
     * @param Carbon|DateTimeInterface|string|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'resolveCarbon',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '8528ed0afcd2a0f663af08b9b802d4ca' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the Carbon instance passed through, a now instance in the same timezone
     * if null given or parse the input if string given.
     *
     * @param Carbon|\\Carbon\\CarbonPeriod|\\Carbon\\CarbonInterval|\\DateInterval|\\DatePeriod|DateTimeInterface|string|null $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'carbonize',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '6a6cf9f188671c8ceb7192df0975d7ae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a part of the Carbon object
     *
     * @param string $name
     *
     * @throws UnknownGetterException
     *
     * @return string|int|bool|DateTimeZone|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__get',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1352205b1efaf27af8877b5d99077741' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get a part of the Carbon object
     *
     * @param string $name
     *
     * @throws UnknownGetterException
     *
     * @return string|int|bool|DateTimeZone|null
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'get',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '002aac68cf6a78c6759444b83931b390' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Check if an attribute exists on the object
     *
     * @param string $name
     *
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__isset',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e3aea832ae566394dc75fc72c55689a8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a part of the Carbon object
     *
     * @param string                  $name
     * @param string|int|DateTimeZone $value
     *
     * @throws UnknownSetterException|ReflectionException
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__set',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '817eecba649fc6af4ac36b65da6e1ece' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a part of the Carbon object
     *
     * @param string|array            $name
     * @param string|int|DateTimeZone $value
     *
     * @throws ImmutableException|UnknownSetterException
     *
     * @return $this
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'set',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '85168660fe42a0fa6545f98383ccf34f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current week day name (with context for languages with multiple forms).
     *
     * @param string|null $context      whole format string
     * @param string      $keySuffix    "", "_short" or "_min"
     * @param string|null $defaultValue default value if translation missing
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslatedDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f9827bd7c33552b9913e07fcf0bdd594' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current short week day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslatedShortDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '275c20e8c0d6b8d69d95c2019c28d989' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current abbreviated week day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslatedMinDayName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b134847f30f98b5a2c3b910914dc6769' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current month day name (with context for languages with multiple forms).
     *
     * @param string|null $context      whole format string
     * @param string      $keySuffix    "" or "_short"
     * @param string|null $defaultValue default value if translation missing
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslatedMonthName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '960b7be8bfcea5649026419f26583bb2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the translation of the current short month day name (with context for languages with multiple forms).
     *
     * @param string|null $context whole format string
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getTranslatedShortMonthName',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'fae56062e580f4f562d11dc6a3877b5e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the day of year.
     *
     * @param int|null $value new value for day of year if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'dayOfYear',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'caf2fd67aaab5b9b6a6c86c48266ddb4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the weekday from 0 (Sunday) to 6 (Saturday).
     *
     * @param int|null $value new value for weekday if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'weekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '748cb6e866294a74fa505c07284945b0' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get/set the ISO weekday from 1 (Monday) to 7 (Sunday).
     *
     * @param int|null $value new value for weekday if using as setter.
     *
     * @return static|int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isoWeekday',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2ff78b9cedcfdb572f645bae8f83320d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        new value for the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aae1b7f8b1721d50a7f596c9623e184a' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/** @var static $date */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7158d28e9c543498d02fe6e2902fb91f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Add any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        amount to add to the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'addUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '76ab1d6c3acd180125c4a1edde4e9d6d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Subtract any unit to a new value without overflowing current other unit given.
     *
     * @param string $valueUnit    unit name to modify
     * @param int    $value        amount to subtract to the input unit
     * @param string $overflowUnit unit name to not overflow
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'subUnitNoOverflow',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c874de4316de340b2455ccea722bea39' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the minutes offset to UTC if no arguments passed, else set the timezone with given minutes shift passed.
     *
     * @param int|null $offset
     *
     * @return int|static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'utcOffset',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '940a2d79d0381f46489612117098a449' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date with gregorian year, month and day numbers.
     *
     * @see https://php.net/manual/en/datetime.setdate.php
     *
     * @param int $year
     * @param int $month
     * @param int $day
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setDate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4bdac89b2943aed5e94de7f1f1ef282d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.
     *
     * @see https://php.net/manual/en/datetime.setisodate.php
     *
     * @param int $year
     * @param int $week
     * @param int $day
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setISODate',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '079e1d74cf850c9747f7b0dfd8aeacd7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date and time all together.
     *
     * @param int $year
     * @param int $month
     * @param int $day
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microseconds
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setDateTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'eb7b3017b7f69b996a4aba233c2fa3b8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Resets the current time of the DateTime object to a different time.
     *
     * @see https://php.net/manual/en/datetime.settime.php
     *
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microseconds
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setTime',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '2220d1bdeee6c6f850ccc42075448364' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timestamp.
     *
     * Timestamp input can be given as int, float or a string containing one or more numbers.
     *
     * @param float|int|string $unixTimestamp
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setTimestamp',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '74ae03a0e57c1823e75a073bca7febde' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the time by time string.
     *
     * @param string $time
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setTimeFromTimeString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '38dfa178017cd469e22dd29a52d6eeae' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @alias setTimezone
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'timezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1587846c130e522e79325d44ba0087c7' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the timezone or returns the timezone name if no arguments passed.
     *
     * @param DateTimeZone|string $value
     *
     * @return static|string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'tz',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e23f2a708e8916859595bc48f86388e5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone from a string or object.
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '857dc70a9acbc9d5d5f5091f1b26c62e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone from a string or object and add/subtract the offset difference.
     *
     * @param DateTimeZone|string $value
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'shiftTimezone',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4a116b4a6e2576e9b5434abc6f1bca9d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the instance\'s timezone to UTC.
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'utc',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b86a6028c3e735b1e79b39acf39b5d48' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the year, month, and date for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date now if null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setDateFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '143cf9a06b99f50bfdbda48266eeee77' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the hour, minute, second and microseconds for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date now if null
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setTimeFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'c90b9907a54d8e5d5b466fd53eca1552' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set the date and time for this instance to that of the passed instance.
     *
     * @param Carbon|DateTimeInterface $date
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setDateTimeFrom',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9497dd863ee50466509564c766efc0e4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the days of the week
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '351fc6d86b04ea18b289bcd133071984' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the first day of week
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getWeekStartsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'aec76b18583dc055d0c949c8554071d8' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             Use $weekEndsAt optional parameter instead when using endOfWeek method. You can also use the
     *             \'first_day_of_week\' locale setting to change the start of week according to current locale
     *             selected and implicitly the end of week.
     *
     * Set the first day of week
     *
     * @param int|string $day week start day (or \'auto\' to get the first day of week from Carbon::getLocale() culture).
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setWeekStartsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '28fcbfdd4326e75f24502ba41212c46b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get the last day of week
     *
     * @return int
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getWeekEndsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1124bb0371c821fc0658a472f9fe52e1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             Use $weekStartsAt optional parameter instead when using startOfWeek, floorWeek, ceilWeek
     *             or roundWeek method. You can also use the \'first_day_of_week\' locale setting to change the
     *             start of week according to current locale selected and implicitly the end of week.
     *
     * Set the last day of week
     *
     * @param int|string $day week end day (or \'auto\' to get the day before the first day of week
     *                        from Carbon::getLocale() culture).
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setWeekEndsAt',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7b8fd2a74404aea65c345e2d9e9da21e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Get weekend days
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '989284cf6abe4aa953c8d086c2b376d4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather consider week-end is always saturday and sunday, and if you have some custom
     *             week-end days to handle, give to those days an other name and create a macro for them:
     *
     *             ```
     *             Carbon::macro(\'isDayOff\', function ($date) {
     *                 return $date->isSunday() || $date->isMonday();
     *             });
     *             Carbon::macro(\'isNotDayOff\', function ($date) {
     *                 return !$date->isDayOff();
     *             });
     *             if ($someDate->isDayOff()) ...
     *             if ($someDate->isNotDayOff()) ...
     *             // Add 5 not-off days
     *             $count = 5;
     *             while ($someDate->isDayOff() || ($count-- > 0)) {
     *                 $someDate->addDay();
     *             }
     *             ```
     *
     * Set weekend days
     *
     * @param array $days
     *
     * @return void
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setWeekendDays',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '1048756b810b49a383a22e550b1be34b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Determine if a time string will produce a relative date.
     *
     * @param string $time
     *
     * @return bool true if time match a relative date, false if absolute or invalid time string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'hasRelativeKeywords',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5efaf1c95cfab24831455f716e7b1971' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
     *             You should rather use UTF-8 language packages on every machine.
     *
     * Set if UTF8 will be used for localized date/time.
     *
     * @param bool $utf8
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setUtf8',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3518977dd8a17e9949f23ac8c656445f' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format the instance with the current locale.  You can set the current
     * locale using setlocale() http://php.net/setlocale.
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'formatLocalized',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9298cdcd869bf726add8b8220d7a78bd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of locale formats for ISO formatting.
     *
     * @param string|null $locale current locale used if null
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getIsoFormats',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '550b6c7618a15ff065b9d813b6cc2d44' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of calendar formats for ISO formatting.
     *
     * @param string|null $locale current locale used if null
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getCalendarFormats',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '102b6da015966cd6edb66682ab82f490' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns list of locale units for ISO formatting.
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getIsoUnits',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '89840b4524b92dc3a641de6a7c07caaf' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns a unit of the instance padded with 0 by default or any other string if specified.
     *
     * @param string $unit      Carbon unit name
     * @param int    $length    Length of the output (2 by default)
     * @param string $padString String to use for padding ("0" by default)
     * @param int    $padType   Side(s) to pad (STR_PAD_LEFT by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getPaddedUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '130d3d20f47b9b0647d4fc000e609367' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return a property with its ordinal.
     *
     * @param string      $key
     * @param string|null $period
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'ordinal',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '61ce764b3a8c90c0620dac3452cdf53b' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Return the meridiem of the current time in the current locale.
     *
     * @param bool $isLower if true, returns lowercase variant if available in the current locale.
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'meridiem',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '7c46331413813d7509bdf8e9ef20e8c1' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the alternative number for a given date property if available in the current locale.
     *
     * @param string $key date property
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getAltNumber',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e0a22b908282603e097329b4678770da' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format in the current language using ISO replacement patterns.
     *
     * @param string      $format
     * @param string|null $originalFormat provide context if a chunk has been passed alone
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'isoFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '4d717bd213199b1759b1c8f67b2d2753' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * List of replacements from date() format to isoFormat().
     *
     * @return array
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getFormatsToIsoReplacements',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '359f50ef865dbe7c8a1fdccbf9d980bd' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Format as ->format() do (using date replacements patterns from http://php.net/manual/fr/function.date.php)
     * but translate words whenever possible (months, day names, etc.) using the current locale.
     *
     * @param string $format
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'translatedFormat',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '9453bea6ba3fedcf33a8af5973824e08' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns the offset hour and minute formatted with +/- and a given separator (":" by default).
     * For example, if the time zone is 9 hours 30 minutes, you\'ll get "+09:30", with "@@" as first
     * argument, "+09@@30", with "" as first argument, "+0930". Negative offset will return something
     * like "-12:00".
     *
     * @param string $separator string to place between hours and minutes (":" by default)
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'getOffsetString',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'f2b71dc08f119c4b3ef7282165e95745' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Dynamically handle calls to the class.
     *
     * @param string $method     magic method name called
     * @param array  $parameters parameters list
     *
     * @throws BadMethodCallException
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__callStatic',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3ea0262c08aebb5f6d487503e15c2b86' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Set specified unit to new given value.
     *
     * @param string $unit  year, month, day, hour, minute, second or microsecond
     * @param int    $value new value for given unit
     *
     * @return static
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'setUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'b6f785ae3084bf54271c0f8f13802240' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns standardized singular of a given singular/plural unit name (in English).
     *
     * @param string $unit
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'singularUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '3e6aaadbe90569676b1c0339b1904992' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Returns standardized plural of a given singular/plural unit name (in English).
     *
     * @param string $unit
     *
     * @return string
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => 'pluralUnit',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '773526223e235f2288d09250950128c2' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Dynamically handle calls to the class.
     *
     * @param string $method     magic method name called
     * @param array  $parameters parameters list
     *
     * @throws UnknownMethodException|BadMethodCallException|ReflectionException|Throwable
     *
     * @return mixed
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Carbon\\Traits',
         'uses' => 
        array (
          'badmethodcallexception' => 'BadMethodCallException',
          'carbon' => 'Carbon\\Carbon',
          'carboninterface' => 'Carbon\\CarbonInterface',
          'carbonperiod' => 'Carbon\\CarbonPeriod',
          'carbontimezone' => 'Carbon\\CarbonTimeZone',
          'badcomparisonunitexception' => 'Carbon\\Exceptions\\BadComparisonUnitException',
          'immutableexception' => 'Carbon\\Exceptions\\ImmutableException',
          'invalidtimezoneexception' => 'Carbon\\Exceptions\\InvalidTimeZoneException',
          'invalidtypeexception' => 'Carbon\\Exceptions\\InvalidTypeException',
          'unknowngetterexception' => 'Carbon\\Exceptions\\UnknownGetterException',
          'unknownmethodexception' => 'Carbon\\Exceptions\\UnknownMethodException',
          'unknownsetterexception' => 'Carbon\\Exceptions\\UnknownSetterException',
          'unknownunitexception' => 'Carbon\\Exceptions\\UnknownUnitException',
          'closure' => 'Closure',
          'dateinterval' => 'DateInterval',
          'dateperiod' => 'DatePeriod',
          'datetime' => 'DateTime',
          'datetimeinterface' => 'DateTimeInterface',
          'datetimezone' => 'DateTimeZone',
          'invalidargumentexception' => 'InvalidArgumentException',
          'reflectionexception' => 'ReflectionException',
          'throwable' => 'Throwable',
        ),
         'className' => 'Carbon\\Traits\\Date',
         'functionName' => '__call',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
  ),
));